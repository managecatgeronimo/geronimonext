#Generated by ResourceBundle Editor (http://eclipse-rbe.sourceforge.net)
#=====================================================================
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#=====================================================================
# $Rev$ $Date$

apache.javaSysNormal.etc                     = 其它
apache.javaSysNormal.os                      = 操作系统
apache.javaSysNormal.usr                     = 用户
apache.javaSysNormal.vm                      = 虚拟机
apache.jk.ajpPort.networkPort                = AJP的网络端口
apache.jk.ajpPort.networkPortExplanation     = <tt>mod_jk</tt> 使用 AJP 的协议和 Geronimo Web 容器交互.现在，你还没有为 Web 容器配置 AJP 监听器。在这里选择一个端口。将会配置一个AJP监听器监听此端口。
apache.jk.ajpPort.title                      = <b>Apache mod_jk</b> -- AJP端口
apache.jk.config.logFileLocation             = <tt>mod_jk</tt> 日志文件位置
apache.jk.config.logFileLoctionExplanation   = <tt>mod_jk</tt> 把日志文件写到你指定的路径中。这个日志文件路径需要在 Apache 配置中被指定。请选择日志文件的路径。
apache.jk.config.operatingSystem             = 操作系统
apache.jk.config.operatingSystemExplanation  = 安装<tt>mod_jk</tt>的过程依赖于具体的操作系统。对一些操作系统，我们提供了专门的指导，而对其它操作系统，你则必须自己安装<tt>mod_jk</tt>。
apache.jk.config.pathToProperties            = <tt>workers.properties</tt>的路径
apache.jk.config.pathToPropertiesExplanation = <tt>mod_jk</tt>需要一个<tt>workers.properties</tt>的文件，用来指明可以在哪些应用服务器在哪些端口通讯等等信息。这个工具将生成<tt>workers.properties</tt>文件的内容。但是仍然要在Apache配置文件中指向这个文件，所以我们需要知道你打算把这个文件放在哪里。
apache.jk.config.title                       = <b>Apache mod_jk</b> -- 基本配置
apache.jk.index.frag1                        = 这个portlet用于指导你配置Apache的<tt>mod_jk</tt>模块，从而通过Apache 2 HTTP server访问Geronimo。为此，你需要完成以下步骤：
apache.jk.index.frag2                        = 回答这里的一些问题，我们将给你一些具体的指导，并为你生成配置信息。
apache.jk.index.getStarted                   = 开始
apache.jk.index.notes                        = <p>注意:</p><ul><li>Geronimo不会记住你先前使用这个工具时作出的设置。每次你都必须重新输入所有数据，或者仅仅将新的信息粘帖到已有的配置文件。</li> <li>运行这个工具时，每一个将经过Apache 访问的Web 应用必须正在运行，并且作为一个通过Apache 访问的应用运行。
apache.jk.index.severalSteps                 = <ol><li>配置Geronimo web容器以支持AJP协议</li><li>安装<tt>mod_jk.so</tt> Apache module (如果需要的话，编译它)</li><li>创建<tt>workers.properties</tt>配置文件，使Apache指向 Geronimo AJP连接器</li><li>添加Apache配置，指出哪些URL需要被发送给Geronimo，以及Apache是否要处理静态内容（只有web应用中的动态内容才被发送给Geronimo）</li></ol>
apache.jk.results.alreadyHasAJPListener      = Geronimo的配置中已经有一个AJP监听器运行在{0}端口。不需要再做任何事情。
apache.jk.results.anAJPLisstnerAdded         = 已经添加一个AJP监听器运行在端口{0}。不需要再做任何事情。
apache.jk.results.canActivateIt              = 一旦安装了<tt>mod_jk</tt> RPM，你可以激活它，通过
apache.jk.results.followingInfoToConfig      = 下面的信息需要保存在你的Apache配置中。
apache.jk.results.howToActivateOthers        = 添加下面的行到<tt>/etc/httpd/conf/httpd.conf</tt>:</p><pre>LoadModule jk_module modules/mod_jk.so</pre> <p>然后你可以运行<tt>service httpd start</tt>  (或者 <tt>service httpd restart</tt>)来启动Apache。
apache.jk.results.howToActivateifOsSuSE      = 把<tt>jk</tt>添加到<tt>APACHE_MODULES</tt> 的配置值中运行<tt>rcapache2 start</tt> (或 <tt>rcapache2 restart</tt>)之后以root身份运行<tt>SuSEconfig</tt>。\r\n
apache.jk.results.noInstructionsToInstall    = <p>对于你选择的操作系统,我们没有如何安装<tt>mod_jk</tt>的具体指导。你也许可以从下面的链接下载二进制发行版本<a href="http://www.apache.org/dist/tomcat/tomcat-connectors/jk/binaries/">http://www.apache.org/dist/tomcat/tomcat-connectors/jk/binaries/</a>。否则，你必须编译源文件。</p><p>要在Apache中加载 <tt>mod_jk</tt>， 通常你需要安装<tt>.so</tt> (Linux/UNIX/Mac OS X) 或者 <tt>.dll</tt> (Windows)，然后添加下面的一行到<tt>httpd.conf</tt>中：</p> <pre> LoadModule jk_module modules/mod_jk.so</pre> <p>最后，启动或重启Apache。
apache.jk.results.saveFollowingToFile        = 你已经决定保存文件到<tt> {0} </tt>。请将下面的内容保存到那个文件。
apache.jk.results.saveWhereIfSuSE            = 对于SuSE，这些信息必须保存在Apache的conf.d目录下的一个文件。比如说：将下面内容写到<tt>/etc/apache2/conf.d/geronimo-jk.conf</tt>
apache.jk.results.saveWhereOthwise           = 这些信息必须加到Apache配置文件。配置文件通常在<tt>/etc/httpd/conf/httpd.conf</tt>路径。
apache.jk.results.step1                      = 步骤1:配置Geronimo AJP
apache.jk.results.step2                      = 步骤2: 安装 <tt>mod_jk</tt>
apache.jk.results.step2_installUsingRPM      = 在{0},你可以使用RPM来安装<tt>mod_jk</tt>。这并没有在Apache中激活它，但至少在正确的位置安装了二进制文件。要安装，在你的安装媒体文件中找到下面的RPM,并运行象下面这样的命令:
apache.jk.results.step3                      = 步骤3:创建 <tt>workers.properties</tt> 文件
apache.jk.results.step4                      = 步骤4: 配置Apache<h2>
apache.jk.results.step5                      = 步骤5: 重启Apache
apache.jk.results.step5Content               = 完成了上述步骤，Apache应该可以运行了。启动Geronimo和重启Apache，然后试着通过Apache URL访问Geronimo Web应用。如果发生任何问题，检查Apache错误日志，和mod_jk错误日志(at <tt>{0}</tt>)。
apache.jk.results.summary                    = 这个页面列出了要加载Apache<tt>mod_jk</tt>和配置<tt>mod_jk</tt>与Geronimo交互，你必须要做的事情。
apache.jk.results.title                      = <b>Apache mod_jk</b> --配置结果
apache.jk.webApps.dynamicPaths               = 动态路径
apache.jk.webApps.select                     = <p>对<i>正在运行</i>的每个Geronimo Web应用，请选择：</p><dl>  <dt><b>Through Apache</b></dt>  <dd>这个Web应用是否可以通过Apache访问</dd>  <dt><b>静态内容</b></dt><dd>Apache是否需要处理这个Web应用的静态内容 。（而不是由Geronimo处理所有内容）</dd>  <dt> <b>动态路径</b></dt> <dd>如果由Apache处理静态内容，那么哪些URL路径需要发送给Geronimo来处理 (举例 <tt>/servlet/*</tt> 或 <tt>*.jsp</tt>)</dd></dl>
apache.jk.webApps.staticContent              = 静态内容
apache.jk.webApps.throughApache              = 通过Apache
apache.jk.webApps.title                      = <b>Apache mod_jk</b> -- 选择Web应用
apache.jk.webApps.webApplication             = Web应用

ca.caDetails.summary                                = 这个页面显示了CA证书和密钥对的详细信息。 <i>最大序列号</i>用于显示CA已经发布的证书的最大序列号值。<i>证书文本</i>以base64编码的形式显示CA的证书内容。这些文本可帮助证书请求者在它们的软件中指定这个CA为受信CA。
ca.caDetails.title                                  = 证书授权机构详情
ca.certReqDetails.summary                           = 这个页面显示证书签名请求(CSR)的详细细节，并且允许你输入要发布的证书的有效期限和签名算法。证书序列号则通过自动增加最近发布的证书的序列号来生成。在下一个页面中，你可以查看并确认这些细节，并发布这个证书。
ca.certReqDetails.title                             = <b>发布新证书</b> - 步骤2: 查看请求和输入证书详情
ca.common.CSRText                                   = CSR文本
ca.common.Division_BusinessUnit                     = 部门/企业机构
ca.common.aliasForCAKeypair                         = CA钥匙对别名
ca.common.backToCAHome                              = 返回到CA主页
ca.common.base64EncodedCertText                     = Base64编码的证书文本
ca.common.certAuthorityIdentity                     = 证书授权机构身份信息
ca.common.certRequestorDetails                      = 证书请求者详情
ca.common.certRequests                              = 证书请求
ca.common.certSerialNo                              = 证书序列号
ca.common.certSerialNumber                          = 证书序列号
ca.common.certificateDetails                        = 证书详情
ca.common.city_Locality                             = 城市/地区
ca.common.commonName                                = 常用名
ca.common.company_Organization                      = 公司/组织名
ca.common.countryCode                               = 国家代码
ca.common.criticalExt                               = 关键扩展
ca.common.detailsOfCert                             = 将颁发的证书的细节
ca.common.emptyText                                 = 焦点所在字段不能为空。
ca.common.fingerPrints                              = 指纹
ca.common.highestSerialNumber                       = 最大序列号值
ca.common.integer                                   = 焦点所在字段必须为整数。
ca.common.issueNewCert                              = 发布新证书
ca.common.issuer                                    = 发布者
ca.common.keyAlgorithm                              = 密钥算法
ca.common.keyDetails                                = Key详情
ca.common.keySize                                   = Key大小
ca.common.lockCA                                    = 锁定CA
ca.common.mmddyyyy                                  = 焦点所在字段必须为日期，格式为MM/DD/YYYY。
ca.common.noRequests                                = 当前没有请求。
ca.common.nonCriticalExt                            = 非关键扩展
ca.common.passwordMismatch                          = 密码不匹配。
ca.common.processCSR                                = 处理证书签名请求(CSR)
ca.common.publicKey                                 = 公钥
ca.common.publicKeyAlg                              = 公钥算法
ca.common.reviewCADetails                           = 查看CA细节
ca.common.reviewClientCertDetails                   = 查看客户证书详情
ca.common.serialNumber                              = 序列号
ca.common.setupCertAuthority                        = 设置证书授权机构
ca.common.signatureAlg                              = 签名算法
ca.common.signatureAlgorithm                        = 签名算法
ca.common.state_Province                            = 州/省
ca.common.subject                                   = 主题
ca.common.title                                     = 查看证书
ca.common.unlockCA                                  = 解锁CA
ca.common.unlockCertAuthority                       = 解锁认证机构
ca.common.validFrom                                 = 有效起始时间
ca.common.validFromDate                             = 有效起始日期
ca.common.validTo                                   = 有效结束时间
ca.common.validToDate                               = 有效结束日期
ca.common.viewCADetails                             = 查看CA详情
ca.common.viewIssuedCert                            = 查看已发布证书
ca.common.wrongDate                                 = 起始日期必须先于截止日期。
ca.confirmCA.summary                                = 这个页面让你检查前一个页面输入的CA的细节。如果你需要修改这里的任何信息，请返回到上一个页面。一旦点击<i>设置证书授权机构</i>按钮，将生成一个密钥对和自签署的证书，并存储在密钥库中。CA证书序列号被存储在文本文件中。序列号的值，在每次处理一个CSR之后将会增加。
ca.confirmCA.title                                  = <b>设置证书授权机构(CA)</b> -步骤2: 查看和确认CA细节信息
ca.confirmCertReq.approveCSR                        = 批准CSR
ca.confirmCertReq.confirmCertRequest                = 确认证书请求
ca.confirmCertReq.rejectCSR                         = 拒绝CSR
ca.confirmCertReq.summary                           = 这个页面显示了证书认证请求的细节，并且允许你批准这一请求，一旦请求被批准，它就可以用于证书的发布。
ca.confirmClientCert.issueCert                      = 颁发证书
ca.confirmClientCert.summary                        = 这个页面显示了前一个页面输入的证书签名请求(CSR)和证书的详细细节。点击<i>颁发证书</i>按钮之后，将会颁发并保存一个证书。下一个页面将会显示颁发的证书的详细细节。
ca.confirmClientCert.title                          = <b>颁发新证书</b> - Step 3: 确认并颁发证书
ca.index.CAFunctionsAccessed                        = 可以使用下面的链接访问CA提供的功能。
ca.index.CAInitialized                              = 已经初始化CA。
ca.index.CALocked                                   = 但是，CA被锁定了。请先解锁CA才能访问CA提供的功能。
ca.index.CANotInitialized                           = CA没有运行，或者还没有初始化，请使用下面提供的链接来初始化CA。
ca.index.publishCACert                              = 发布CA证书
ca.index.requestsToBeFulfilled                      = 要处理的请求
ca.index.requestsToBeVerified                       = 要核实的请求
ca.index.title                                      = 这个portlet允许你设置证书授权机构，和颁发证书以作为对证书签名请求的回应。 你可以通过<i>设置证书授权机构</i>功能功能提供CA身份细节，CA密钥对的算法参数，自签名证书，保护CA私钥的密码等信息，来初始化CA。 这个密码用来解锁CA以访问ＣＡ提供的功能。一旦ＣＡ被初始化，可以使用<i>颁发新证书</i>功能来处理CSRs。可以使用 <i>查看已颁发证书</i>功能来查看以前颁发的证书。 
ca.listRequestsIssue.CertRequestsAwaiting           = 等待实现的证书请求
ca.listRequestsIssue.CertRequestsAwaitingExp        = 这个页面显示了等待实现的证书请求。
ca.listRequestsVerify.certRequestsAwaitingVerify    = 等待验证的证书请求
ca.listRequestsVerify.certRequestsAwaitingVerifyExp = 这个页面显示了等待验证的证书请求。
ca.processCSR.pastePkcs10here                       = ...粘帖pkcs10编码的证书请求到这里...
ca.processCSR.summary                               = 在这个页面你可以处理证书签名请求，和查看请求者的详细信息。把你从请求者那里接收到的CSR文件的内容粘帖到这里，并点击<i>处理CSR</i>按钮。下一个页面将会显示请求者的详细信息，并允许你输入要发布一个证书所必须的信息。
ca.processCSR.title                                 = <b>发布新证书</b> -步骤1: 处理证书签名请求(CSR)
ca.setupCA.summary                                  = 在这个页面中，你可以输入证书授权机构的(CA)的详细信息，CA密钥对的算法参数，CA的自签名证书的算法，和保护CA私钥的密码。在下一个页面，你可以在生成CA密钥对和自签名的证书前，先检查这些信息。
ca.setupCA.title                                    = <b>设置证书授权机构</b> - 步骤1: 输入CA细节信息
ca.unlockCA.enterCAPrivateKeyPassword               = 输入CA私钥密码
ca.unlockCA.summary                                 = 在这个页面你可以输入用于保护CA私钥的密码来解锁CA。一旦解锁，CA提供的功能的功能将立即可用。
ca.viewCertificate.backToRequest                    = 返回未完成的请求
ca.viewCertificate.enterSerialNumber                = 输入要查看的证书的序列号，然后点击<i>查看证书</i>按钮。
ca.viewCertificate.screenShows                      = 这个页面显示了CA颁发的证书的详细信息。base64编码的证书文本会被作为对证书签名请求(CSR)的响应发送给请求者。

configmanager.help.stopStart            = 启动/停止
configmanager.help.stopStartExp         = "启动/停止"这个链接用于启动或停止应用。如果这个链接显示的是&quot;停止&quot，那么这个应用正在运行，所以点击这个按钮将停止应用，反之亦然。
configmanager.help.title                = 这个页面列出了服务器中安装的所有应用，以及表明这些应用正在运行还是已经停止。这里一共有四列，两个用于显示应用的信息，其它两个允许用户操作。第一列指明应用的状态，是&quot;已停止&quot;还是&quot;正运行&quot;第四列显示应用的configID，其它两列是：
configmanager.help.uninstallExp         = "卸载"链接用于从Geronimo中反部署或者移除应用。
configmanager.normal.cancel             = &nbsp;取消&nbsp;
configmanager.normal.childComponents    = 子组件
configmanager.normal.componentName      = 组件名称
configmanager.normal.confirmMsg01       = 是Apache Geronimo服务，停止该组件可能会妨碍服务器或者管理控制台正常工作。所有的直接或间接依赖组件也将被停止。请参考视图的"子组件"列表中的直接受影响的组件。要继续该操作么？
configmanager.normal.confirmMsg02       = 提供了你当前查看的管理控制台的界面。停止它将导致该界面不可用且需要手工恢复该功能。要继续该操作么？
configmanager.normal.confirmMsg03       = 由Apache Geronimo提供并且可能存在其它需要它的模块。(参考视图的"子组件"列表)。所有的直接或间接依赖组件也将被停止。要继续该操作么？
configmanager.normal.confirmMsg04       = 是Apache Geronimo服务，重启该组件可能会妨碍服务器或者管理控制台正常工作。作为停止操作的一部分，所有的直接或间接依赖组件也将被停止，而只有该组件本身会重启。请参考视图的"子组件"列表中的直接受影响的组件。要继续该操作么？
configmanager.normal.confirmMsg05       = 提供了你当前查看的管理控制台的界面。重启它将导致该界面不可用且需要手工恢复控制台功能。要继续该操作么？
configmanager.normal.confirmMsg06       = 由Apache Geronimo提供并且可能存在其它需要它的模块。(参考视图的"子组件"列表)。作为停止操作的一部分，所有的直接或间接依赖组件也将被停止。要继续该操作么？
configmanager.normal.confirmMsg07       = 是Apache Geronimo服务，卸载该组件可能会带来难以预期的后果，比如无法使用web管理控制台甚至服务器无法稳定工作。请参考视图的"子组件"列表中的直接受影响的组件。你确定要继续卸载么？
configmanager.normal.confirmMsg08       = 提供了你当前查看的管理控制台的界面。停止它将导致该界面不可用且需要手工恢复该功能。你确定要继续卸载么？
configmanager.normal.confirmMsg09       = 由Apache Geronimo提供并且可能存在其它需要它的模块。(参考视图的"子组件"列表)。你确定要继续卸载么？
configmanager.normal.confirmMsg10       = 你确定要卸载
configmanager.normal.confirmMsg11       = 你确定要刷新
configmanager.normal.displayName        = 显示名称
configmanager.normal.expertMode         = 专家用户(启用Geronimo提供的组件的所有功能)
configmanager.normal.ok                 = &nbsp;确定&nbsp;
configmanager.normal.parentComponents   = 父组件
configmanager.normal.showDependencyMode = 显示父组件和子组件

consolebase.common.JVMVersions     = JVM版本
consolebase.common.actions         = 操作
consolebase.common.alias           = 别名
consolebase.common.back            = 返回
consolebase.common.cancel          = 取消
consolebase.common.commands        = 命令
consolebase.common.confirmPassword = 确认密码
consolebase.common.date            = 日期
consolebase.common.delete          = 删除
consolebase.common.department      = 部门
consolebase.common.deployedAs      = 部署为
consolebase.common.description     = 描述
consolebase.common.done            = 完成
consolebase.common.edit            = 编辑
consolebase.common.email           = 邮件
consolebase.common.enable          = 启动
consolebase.common.familyName      = 姓
consolebase.common.file            = 文件
consolebase.common.filterCriteria  = 过滤条件
consolebase.common.finish          = 完成
consolebase.common.givenName       = 名
consolebase.common.group           = 组
consolebase.common.groupName       = 组名
consolebase.common.install         = 安装
consolebase.common.item            = 项
consolebase.common.monitor         = 监控
consolebase.common.name            = 名字
consolebase.common.next            = 下一步
consolebase.common.password        = 密码
consolebase.common.refresh         = 刷新
consolebase.common.reset           = 重置
consolebase.common.restart         = 重启
consolebase.common.return          = 返回
consolebase.common.save            = 保存
consolebase.common.size            = 大小
consolebase.common.start           = 启动
consolebase.common.state           = 状态
consolebase.common.stop            = 停止
consolebase.common.type            = 类型
consolebase.common.uninstall       = 卸载
consolebase.common.update          = 更新
consolebase.common.usage           = 用法
consolebase.common.user            = 用户
consolebase.common.userID          = 用户ID
consolebase.common.userName        = 用户名
consolebase.common.users           = 用户
consolebase.common.value           = 值
consolebase.common.version         = 版本
consolebase.common.view            = 查看

infomanager.javaSysHelp.body                   = 这个页面显示了服务器进程可用的系统属性值。
infomanager.javaSysNormal.etc                  = 其它
infomanager.javaSysNormal.operatingSystem      = 操作系统
infomanager.javaSysNormal.user                 = 用户
infomanager.javaSysNormal.virtualMachine       = 虚拟机
infomanager.svrInfoHelp.body                   = 这个页面提供了关于服务器正常运行时间和JVM使用的资源的信息。
infomanager.svrInfoNormal.architecture         = 架构
infomanager.svrInfoNormal.availableProcessors  = 可用处理器
infomanager.svrInfoNormal.build                = Build
infomanager.svrInfoNormal.cookiesMustBenabled  = 错误：必须启用Cookies。
infomanager.svrInfoNormal.currentMemoryUsed    = 当前占有内存
infomanager.svrInfoNormal.java                 = Java
infomanager.svrInfoNormal.javaVendor           = Java厂商
infomanager.svrInfoNormal.javaVersion          = Java版本
infomanager.svrInfoNormal.jvm                  = JVM
infomanager.svrInfoNormal.locale               = 语言
infomanager.svrInfoNormal.mostMemoryUsed       = 最多占有内存
infomanager.svrInfoNormal.node                 = 节点
infomanager.svrInfoNormal.notAvailable         = 目前不可用
infomanager.svrInfoNormal.operatingSystem      = 操作系统
infomanager.svrInfoNormal.os                   = 操作系统
infomanager.svrInfoNormal.os.arch              = 架构
infomanager.svrInfoNormal.os.locale            = 区域设置
infomanager.svrInfoNormal.os.name              = 名称
infomanager.svrInfoNormal.os.patchlevel        = 补丁级别
infomanager.svrInfoNormal.os.version           = 版本
infomanager.svrInfoNormal.patchLevel           = 补丁级别
infomanager.svrInfoNormal.server               = 服务器
infomanager.svrInfoNormal.startTime            = 启动时间
infomanager.svrInfoNormal.totalMemoryAllocated = 总共分配内存
infomanager.svrInfoNormal.upTime               = 运行时间
infomanager.svrInfoNormal.vendorInfo           = 厂商信息
infomanager.svrInfoNormal.version              = 版本

keystore.certificateDetails.backToKeystore     = 返回到密钥存储库
keystore.certificateDetails.certificateInfo    = 证书信息
keystore.certificateDetails.changeKeyPwd       = 修改密钥密码
keystore.certificateDetails.criticalExt        = 关键扩展
keystore.certificateDetails.deleteEntry        = 删除条目
keystore.certificateDetails.generateCSR        = 生成证书签名请求
keystore.certificateDetails.importCAReply      = 导入证书颁发机关应答
keystore.certificateDetails.nonCriticalExt     = 非关键扩展
keystore.certificateDetails.publicKeyAlg       = 公钥算法
keystore.certificateDetails.reallyDelete       = 你确实要删除{0}么？
keystore.certificateDetails.signatureAlg       = 签名算法
keystore.certificateDetails.validFrom          = 有效起始日期
keystore.certificateDetails.validTo            = 有效截至日期
keystore.changePassword.changePassword         = 修改密码
keystore.changePassword.changePwdForKeystore   = 修改钥匙对密码
keystore.changePassword.changePwdForPriKey     = 修改私钥密码
keystore.changePassword.confirmPassword        = 确认新密码
keystore.changePassword.newPassword            = 新密码
keystore.changePassword.oldPassword            = 旧密码
keystore.common.alias                          = 别名
keystore.common.emptyText                      = 焦点所在字段不能为空。
keystore.common.identity                       = 身份
keystore.common.integer                        = 焦点所在字段必须为整数。
keystore.common.issuer                         = 发布者
keystore.common.keyType                        = 私钥类型
keystore.common.keystore                       = 密钥存储库
keystore.common.passwordMismatch               = 密码不匹配。
keystore.common.serialNumber                   = 序列号
keystore.common.subject                        = 主题
keystore.common.trustedCertificate             = 可信任证书
keystore.common.unlockKeystore                 = 解锁密匙库
keystore.common.unlockPrivateKey               = 解开私钥
keystore.common.validity                       = 有效时间
keystore.common.version                        = 版本
keystore.configureKey.algorithm                = 算法
keystore.configureKey.aliasForKey              = 新私钥的别名
keystore.configureKey.certificateIdentity      = 证书
keystore.configureKey.city_Locality            = 城市/地区
keystore.configureKey.company_Org              = 公司/组织名
keystore.configureKey.country_Code             = 国家代码
keystore.configureKey.division_BusinessUnit    = 部门/企业单位
keystore.configureKey.keySize                  = 私钥大小
keystore.configureKey.passwordForKey           = 新私钥的密码
keystore.configureKey.reviewKeyData            = 检查密钥数据
keystore.configureKey.serverHostname           = 主机名称
keystore.configureKey.state_Province           = 州/城市
keystore.configureKey.title                    = 在这个屏幕，你可配置要生成私钥的一些属性，在下一个页面，你可以在生成私钥和证书之前，再次查看这些设置。
keystore.configureKey.validFor                 = 有效时间（单位：天）
keystore.confirmCertificate.certificateDetails = 证书细节
keystore.confirmCertificate.fingerprint        = 指纹
keystore.confirmCertificate.importCertificate  = 导入证书
keystore.confirmCertificate.title              = 请确认这是你要导入的证书：
keystore.confirmKey.generateKey                = 生成密钥
keystore.confirmKey.title                      = 请确认这是你要生成的私钥的信息：
keystore.createKeystore.createKeystore         = 创建密钥存储库
keystore.createKeystore.keystoreFileName       = 密钥存储库文件名
keystore.createKeystore.passwordForKeystore    = 密钥存储库的密码
keystore.createKeystore.type                   = 密钥库类型
keystore.generateCSR.PKCS10CertificatioRequest = PKCS10编码证书请求
keystore.importCAReply.PKCS7CertificateReply   = PKCS7编码证书应答
keystore.importCAReply.pasteHere               = ...把PKCS7 编码的证书应答粘帖在此处...
keystore.index.available                       = 可用
keystore.index.contents                        = 内容
keystore.index.continueLocking                 = 这个密钥存储库当前正在使用，锁定它可能导致服务器不能运行。是否还要继续？
keystore.index.editable                        = 可编辑
keystore.index.explanation                     = 密钥存储库开始时是锁定的，不能编辑，对服务器中的其它组件而言也是不可用的。<b>Editable</b> 标志指示密钥库是否已解锁因此可以进行编辑（通过输入密钥存储库密码）；此状态在当前登录会话期间持续不变。<b>Available</b> 标志指示是否保存了密码，使密钥存储库可用于服务器中的其他组件。
keystore.index.keystoreFile                    = 密钥存储库文件
keystore.index.keystoreLocked                  = 密钥存储库被锁定
keystore.index.locked                          = 已锁定
keystore.index.newKeystore                     = 新建密钥存储库
keystore.index.noKeystores                     = 未定义密钥库
keystore.index.title                           = 这个工具指导你如何（为Web容器等）配置密钥库以使用SSL连接器。
keystore.index.type                            = 类型
keystore.index.unlocked                        = 未锁定
keystore.unlockKey.title                       = 这个密钥存储库已被解锁。然而为了SSL能正常工作，密钥存储库中的私钥也需要被解锁。请指定在密钥存储库中私钥的密码。
keystore.unlockKey.unlockPrivateKey            = 解锁私钥
keystore.unlockKeystore.enterKeystorePassword  = 输入密钥存储库密码
keystore.uploadCertificate.aliasForCertificate = 证书别名
keystore.uploadCertificate.pasteHere           = ...把受信证书的文本粘帖在此处...
keystore.uploadCertificate.reviewCertificate   = 查看证书
keystore.uploadCertificate.title               = 在这个页面你可以输入要导入到密钥存储库的证书。把证书文件中的内容粘帖在文本区域，并指定保存到密钥存储库时的别名。在下一步，提交到密钥存储库之前，你可以再次查看证书的内容。
keystore.viewKeystore.addtrustCertificate      = 添加受信证书
keystore.viewKeystore.certificateFingerprint   = 证书指纹
keystore.viewKeystore.changePassword           = 修改keystore密码
keystore.viewKeystore.createprivateKey         = 创建私钥
keystore.viewKeystore.privateKey               = 私钥
keystore.viewKeystore.returnToKeystoreList     = 返回到密钥存储库列表
keystore.viewKeystore.title                    = 这个页面列出了密钥存储库中的内容。

logmanager.common.configFile                      = 配置文件
logmanager.common.emptyText                       = 焦点所在字段不能为空。
logmanager.common.filterCriteria                  = 过滤条件:
logmanager.common.integer                         = 焦点所在字段必须为整数。
logmanager.common.logLevel                        = 日志级别<i>
logmanager.common.refreshPeriod                   = 刷新周期
logmanager.common.refreshPeriodTooShort           = 刷新周期不能小于5秒。
logmanager.common.title                           = <b>注意:</b> 更新的值只在服务器的该次运行中有效.服务器一旦终止将重设为默认值. 使用<i>org.apache.geronimo.log4jservice.configuration</i>系统属性可以在服务器启动时覆盖设置文件值.
logmanager.help.configFileExplanation             = 通过在&quot;配置文件&quot;文本框中输入不同的路径和文件名可以使用另一个配置文件。
logmanager.help.introduction                      = <p>这个portlet允许用户暂时地选择一个日志配置文件。并且（或者）改变日志等级和刷新周期。<br>默认的 &quot;配置文件&quot;是一个标准的log4j文件，其中定义了Geronimo服务器将把日志输出到什么位置。<br>配置文件同时定义了日志级别，日志文件最大大小，以及其它与日志相关的属性。 <br> <br> Gereonimo控制台将在下面窗口面板的&quot;查看日志文件&quot;的portlet中显示来自Gereonimo日志文件的输出。</p>
logmanager.help.logLevelExplanation               = 用户可以从下拉框中选择日志级别。
logmanager.help.refreshPeriodExplanation          = 默认地Geronimo会每隔60秒检查一下配置文件是否被修改过。用户可以修改这个刷新周期。
logmanager.help.resetExplanation                  = 重置&quot;配置文件&quot;, &quot;刷新周期&quot; and &quot;日志级别&quot; 到上次&quot;更新&quot;时的设置。而不是重置到Geronimo服务器的默认值。
logmanager.help.updateExplanation                 = 使修改在服务器下次重启后生效。
logmanager.search.containingText                  = 包含的文字
logmanager.search.fileterLog                      = 过滤日志
logmanager.search.go                              = 查找
logmanager.search.level                           = 级别
logmanager.search.lines                           = 行
logmanager.search.maxResults                      = 最多包含
logmanager.search.messagesMatched                 = 日志文件中总共{0}条消息。 {1}符合查找条件。
logmanager.search.noLogs                          = 没有找到符合指定条件的日志
logmanager.search.numberOfResultsCapped           = 包含的行数
logmanager.search.to                              = 到
logmanager.search.withExceptions                  = 包含异常
logmanager.viewhelp.filterResults                 = 过滤结果
logmanager.viewhelp.filterResultsExplanationFrag1 = 允许用户自定义过滤标准，用户可以设置显示日志文件开始到结束中的任何行。<br>注意：浏览器可能限制一次能够显示多少行。
logmanager.viewhelp.filterResultsExplanationFrag2 = 用户可以设置日志级别作为过滤条件，以仅显示相应级别的日志。
logmanager.viewhelp.filterResultsExplanationFrag3 = 用户也可以输入要搜索的文本。
logmanager.viewhelp.introduction                  = 这个portlet显示了Geronimo服务器的日志，它有助于调试Geronimo控制台以及部署的应用中出现的问题。
logmanager.viewhelp.refreshExplanation            = 将过滤标准重置为Geronimo控制台的默认值，并显示Geronimo日志文件中的最近11行。

repository.help.addDependencyElement       = 为了在应用中使用某个模块，需要在应用的部署计划中添加它的依赖项。举例来说，为了使用Castor XML，需要在执行计划中添加下面的XML：
repository.help.browseExplanation          = 点击这个来选择要添加的模块。
repository.help.installExplanation         = 点击这个按钮来安装模块。
repository.help.title                      = 这个页面展示了服务器的存储库中已经安装的模块，存储库的目录结构和Apache Maven使用的目录结构一样，从而使得可以容易地在两者之间拷贝文件。Geronimo控制台提供了一种方法来添加模块：
repository.normal.addArchiveToRepository   = 添加存档到存储库中
repository.normal.artifact                 = 模块
repository.normal.currentRepositoryEntries = 当前存储库下条目
repository.normal.emptyText                = 焦点所在字段不能为空。
repository.normal.invalidChar              = 焦点所在字段包含非法字符。
repository.normal.replacedName             = 被替换组件名
repository.normal.replacedNameDescription  = 输入在运行时会被新加入组件替换掉的组件名称，要被替换掉的组件必须已存在于系统存储库中，并且所需输入的名称格式必须为 groupId/artifactId/Version/Type。如果不需要进行替换，保留该字段为空。
repository.normal.title                    = 添加档案到存储库
repository.normal.toViewUsage              = 点击每个条目来查看用法。
repository.usage.content                   = 要在一个应用程序或模块中使用<b>{0}</b>，请在部署计划中的environment元素中的dependencies小节中添加一个dependency元素，如下所示:
repository.usage.title                     = {0}使用方法

securityrealmmanager.common.add                            = 添加
securityrealmmanager.common.emptyText                      = 焦点所在字段不能为空。
securityrealmmanager.common.groupNameExp                   = 组的名称
securityrealmmanager.common.passwordMismatch               = 密码不匹配。
securityrealmmanager.common.remove                         = 移除
securityrealmmanager.common.update                         = 更新
securityrealmmanager.derby.groups.addmaximized.addGroup    = 添加组
securityrealmmanager.derby.groups.addmaximized.noUsers     = 没有用户
securityrealmmanager.derby.groups.addmaximized.updateGroup = 更新组
securityrealmmanager.derby.groups.help.addNewGroupBtnExp   = 点击这个按钮会创建新组。如果需要同时添加用户到新组中，点击&quot;添加&quot;按钮会在创建的新组中包含选择的用户。
securityrealmmanager.derby.groups.help.cancelUserBtnExp    = 点击这个按钮，将取消创建新组，并且浏览器将返回到上一个页面。
securityrealmmanager.derby.groups.help.descriptionExp      = 组的描述
securityrealmmanager.derby.groups.help.title               = 这个portlet列出了所有应用域的组和用户，并且允许用户添加，修改，删除它们。要添加一个新组，请点击&quot;创建新组&quot;链接，并且填写此页面的相关字段。要修改已经存在的组，点击相应组名的链接，并修改此页面的相关字段。要删除一个组，请点击要删除的组右边的&quot;删除&quot;链接。<br>  <br>点击&quot;创建新组&quot链接并填写各个相关字段，再点击&quot添加&quot可以创建新组。
securityrealmmanager.derby.groups.help.usersExp            = 左侧的列表框列出了当前所有的用户帐号。选择一个用户，并点击&quot;添加gt;&gt;&quot;按钮，将会把选择的用户添加到组中。选择右边列表框的用户并点击&quot;&lt;&lt;删除&quot;按钮会从组中删除掉选择的用户。
securityrealmmanager.derby.groups.maximized.createNewGroup = 创建新组
securityrealmmanager.derby.users.addmaximized.addUser      = 添加用户
securityrealmmanager.derby.users.addmaximized.updateUser   = 更新用户
securityrealmmanager.derby.users.help.addUserBtnExp        = 要添加新用户，请点击the &quot;添加&quot;按钮。
securityrealmmanager.derby.users.help.cancelUserBtnExp     = 可以点击这个按钮来取消创建用户。
securityrealmmanager.derby.users.help.confirmPasswordExp   = 重新输入新用户密码。
securityrealmmanager.derby.users.help.createUserBtnExp     = 点击这个按钮将创建新用户，并返回到&quot;控制台域用户&quot;的主页面。新用户也会在那里列出。
securityrealmmanager.derby.users.help.departmentExp        = 用户的部门
securityrealmmanager.derby.users.help.emailExp             = 用户的email地址
securityrealmmanager.derby.users.help.familyNameExp        = 用户的姓
securityrealmmanager.derby.users.help.givenNameExp         = 用户的名
securityrealmmanager.derby.users.help.passwordExp          = 用户的密码。
securityrealmmanager.derby.users.help.title                = 这个页面列出了所有应用域的用户，并允许你添加，修改，删除它们。要添加新用户，请点击&quot;创建新用户&quot;链接，并填写那个页面的相关字段。要修改新用户，请点击用户名称的链接，并修改那个页面的相关字段。要删除一个用户帐号，请点击要删除用户右边的&quot;删除&quot;链接。<br>  <br>点击&quot;创建新用户链接&quot;，用户需要填写一些字段，并点击&quot;添加&quot;按钮来添加用户。这些字段的定义如下：
securityrealmmanager.derby.users.help.usernameExp          = 用户的名称。
securityrealmmanager.derby.users.maximized.createNewUser   = 创建新用户
securityrealmmanager.se.groups.addmaximized.addGroup       = 添加组
securityrealmmanager.se.groups.addmaximized.updateGroup    = 更新组
securityrealmmanager.se.groups.help.addNewGroupBtnExp      = 点击这个按钮会创建新组。如果需要同时添加用户到新组中，点击&quot;添加&quot;按钮会在创建的新组中包含选择的用户。
securityrealmmanager.se.groups.help.cancelNewGroupBtnExp   = 取消当前操作.
securityrealmmanager.se.groups.help.title                  = 这个portlet列出了所有控制台域组和用户，并且允许用户添加，修改，删除它们。要添加一个新组，请点击&quot;创建新组&quot;链接，并且填写那个页面的相关字段。要修改已经存在的组，点击相应组名的链接，并修改那个页面的相关字段。要删除一个组，请点击要删除的组右边的&quot;删除&quot;链接。<br>  <br>点击&quot;创建新组&quot; 链接允许用户添加新组。相关字段的定义如下：
securityrealmmanager.se.groups.help.usersExp               = 左侧的列表框列出了当前所有的用户帐号。选择一个用户，并点击&quot;添加gt;&gt;&quot;按钮，将会把选择的用户添加到组中。选择右边列表框的用户并点击&quot;&lt;&lt;删除&quot;按钮会从组中删除掉选择的用户。
securityrealmmanager.se.groups.maximized.createNewGroup    = 创建新组
securityrealmmanager.se.groups.maximized.createNewUser     = 创建新用户
securityrealmmanager.se.groups.maximized.noUsers           = 没有用户
securityrealmmanager.se.groups.maximized.updateGroup       = 更新组
securityrealmmanager.se.users.addmaximized.addGroup        = 添加组
securityrealmmanager.se.users.addmaximized.addUser         = 添加用户
securityrealmmanager.se.users.addmaximized.updateUser      = 更新用户
securityrealmmanager.se.users.help.cancelUserBtnExp        = 取消当前操作.
securityrealmmanager.se.users.help.confirmPasswordExp      = 再次输入新用户的密码。
securityrealmmanager.se.users.help.createUserBtnExp        = 点击这个按钮将创建新用户，并返回到"控制台域用户"的主页面。新用户也会在那里列出。
securityrealmmanager.se.users.help.passwordExp             = 新用户的密码。
securityrealmmanager.se.users.help.title                   = 这个portlet列出所有的控制台域，并允许用户添加，修改和删除它们。要添加新用户，请点击 &quot;创建新用户&quot;链接，并填写那个页面的一些字段。要修改用户帐号，请点击用户姓名的链接，并修改那个页面的一些字段。要删除一个用户，请点击要删除的用户右边的&quot;删除&quot;链接。<br> <br>点击"创建新用户链接"会把用户带到另一个页面，在其中，用户需要填写一些字段，并点击&quot;添加&quot;按钮来添加用户。这些字段的定义如下：
securityrealmmanager.se.users.help.usernameExp             = 新用户的名称。
securityrealmmanager.se.users.maximized.createNewUser      = 创建新用户

servermanager.help.shutdownHelpBody   = <p>这个portlet让管理员可以远程关闭Geronimo服务器。</p><p>Shutdown命令会关闭服务器和JVM。在关闭服务器之后要想使用Geronimo控制台，必须重新启动Geronimo。
servermanager.normal.cancel           = &nbsp;取消&nbsp;
servermanager.normal.comfirmMsg01     = 你确定要要关闭服务器么（最后一次提示）？
servermanager.normal.ok               = &nbsp;确定&nbsp;
servermanager.normal.proceedOnlyIf    = 只有当你确定要关闭服务器时，才继续。
servermanager.normal.shutdown         = 关闭
servermanager.normal.warning          = 警告：关闭服务器将会使Web控制台不可用！
servermanager.shutdown.shutdownIssued = 已经开始关闭服务器。

threads.list.title                        = 这个页面列出了在Geronimo服务器中定义的线程池。<i>注意：目前，并不是所有Geronimo使用的线程都在下面列出的线程池中。我们正致力于把Geronimo不同组件使用的线程迁移到这些线程池中。</i>
threads.monitor.currentConsumersOfThreads = 目前线程池中的线程数
threads.monitor.description               = 描述
threads.monitor.highestRecorded           = 最高记录
threads.monitor.lowestRecorded            = 最低记录
threads.monitor.ofThreads                 = 线程数量
threads.monitor.poolMax                   = 线程最大数
threads.monitor.threadsInUse              = 使用中的线程
threads.monitor.title                     = {0}线程池的统计信息：

webaccesslogmanager.common.authenticatedUser  = 用户
webaccesslogmanager.common.filterLog          = 过滤日志
webaccesslogmanager.common.from               = 从 (MM/DD/YYYY)
webaccesslogmanager.common.ignoreDates        = 忽略日期
webaccesslogmanager.common.mmddyyyy           = 焦点所在字段必须为日期，格式为MM/DD/YYYY。
webaccesslogmanager.common.remoteAddress      = 远程地址
webaccesslogmanager.common.request            = 请求
webaccesslogmanager.common.requestMethod      = 请求方式
webaccesslogmanager.common.requestedURI       = 请求的URI
webaccesslogmanager.common.to                 = 到 (MM/DD/YYYY)
webaccesslogmanager.help.authenticatedUserExp = 用户名，比如&quot;system.&quot;
webaccesslogmanager.help.fromTo               = 从/到
webaccesslogmanager.help.fromToExp            = 显示指定日期的日志
webaccesslogmanager.help.ignoreDatesExp       = 如果这个选择框被选中的话，将不会根据日期来过滤。无论日期，匹配其它过滤条件的所有日志都会被显示。
webaccesslogmanager.help.refreshExp           = 根据用户指定的过滤条件，从日志文件中获取最近的内容。
webaccesslogmanager.help.remoteAddressExp     = 在这个字段输入远程主机的IP地址，比如：192.168.1.1.
webaccesslogmanager.help.requestMethodExp     = 下拉框允许用户根据on &quot;ANY&quot;, &quot;POST&quot; and &quot;GET&quot;方式来过滤。
webaccesslogmanager.help.requestedURIExp      = 可以根据在"请求的URI"字段中输入的URI来过滤，比如：http://localhost:8080/cviewer/jsp/viewclass.jsp 
webaccesslogmanager.help.title                = 这个portlet显示和过滤了Jetty的日志文件。Jetty日志文件包含HTTP连接信息和运行在Geronimo中的JSP和servlet应用的消息。默认情况下，这个portel显示当前日期的日志文件内容。用户可以设置过滤条件来只显示感兴趣的内容。用户可以对下面定义的字段，全部/全不/部分地输入信息。
webaccesslogmanager.view.container            = 容器
webaccesslogmanager.view.filterResults        = 过滤结果
webaccesslogmanager.view.foundMatches         = 日志文件中{0}匹配条件，（共查找{1}行）。
webaccesslogmanager.view.go                   = 查找
webaccesslogmanager.view.identity             = 身份
webaccesslogmanager.view.ignoreDates          = 忽略日期
webaccesslogmanager.view.maxResults           = 最大记录
webaccesslogmanager.view.noLogEntries         = 没有找到日志条目。
webaccesslogmanager.view.request              = 请求
webaccesslogmanager.view.resultSize           = 结果大小
webaccesslogmanager.view.searchResult         = 日志文件中{0}匹配条件，（共查找{1}行）
webaccesslogmanager.view.searchWebContainer   = 查找Web容器
webaccesslogmanager.view.searchWebLog         = 搜索web日志
webaccesslogmanager.view.startResult          = 开始结果
webaccesslogmanager.view.wrongDate            = 起始日期必须先于截止日期。

webmanager.common.HTTPSAlgorithm                         = HTTPS算法
webmanager.common.HTTPSProtocol                          = HTTPS协议
webmanager.common.SSLSettings                            = SSL设置
webmanager.common.acceptCount                            = 接受连接数
webmanager.common.acceptCountExp                         = 当所有可能的连接处理线程都在使用时,队列允许传入连接的最大长度.当队列已满时所有接收的连接都将被拒绝.默认值是10.
webmanager.common.all                                    = 所有
webmanager.common.allowTrace                             = 允许Trace
webmanager.common.bufferSize                             = 缓存大小
webmanager.common.bufferSizeExp                          = 为连接器创建的输入流提供的缓存大小(以字节为单位).默认提供2048字节的缓存.
webmanager.common.ciphers                                = 密码
webmanager.common.ciphersExp                             = 以逗号分隔的可能被使用的加密密码列表.如果未指定,如果未指定,则可能使用任何可用密码.
webmanager.common.clientAuthRequired                     = 需要验证客户
webmanager.common.compressableMimeType                   = 可压缩的Mime类型
webmanager.common.compressableMimeTypeExp                = 这个值是一个以逗号分隔的可以使用HTTP压缩的MIME类型的列表.默认值是text/html,text/xml,text/plain.
webmanager.common.compression                            = 压缩
webmanager.common.compressionExp                         = 连接器可以使用 HTTP/1.1 GZIP 压缩以试图节省服务器带宽. 可接受的参数值是 "关" (禁用压缩), "开" (允许压缩, 将致使文本数据被压缩), "强制" (强制在所有情况下使用压缩), 或者一个整数值 (等同于 "开", 但指定了输出被压缩前数据的最小量). 如果content-length未知且压缩设置为"开"或更激进,输出也将被压缩. 如果未指定, 参数值被设置为"关".
webmanager.common.confirmPassword                        = 确认密码
webmanager.common.connectionLinger                       = 连接延迟
webmanager.common.connectionLingerExp                    = 连接器使用的套接字关闭时延迟的毫秒数.默认值是-1(禁用套接字延迟).
webmanager.common.connectionTimeout                      = 连接超时
webmanager.common.connectionTimeoutExp                   = 连接器在接受连接后等待请求URI呈现的毫秒数.默认值是60000(亦即60秒)
webmanager.common.disableUploadTimeout                   = 禁用上传超时
webmanager.common.disableUploadTimeoutExp                = 这个标志允许servlet容器在执行servlet时使用不同的,长一些的连接超时,最终使得servlet有更长的时间来完成执行或允许在文件上传时有更长的超时.如果未指定,这个属性值设置为'是'.
webmanager.common.emptySessionPath                       = 空会话路径
webmanager.common.emptySessionPathExp                    = 如果选中,所有会话cookie路径设置为/.
webmanager.common.emptyText                              = 焦点所在字段不能为空。
webmanager.common.enableLookups                          = 允许查找
webmanager.common.enableLookupsExp                       = 如果你希望对request.getRemoteHost()的调用执行DNS查找以返回远程客户的实际主机名请选择该选项.默认启用DNS查找.
webmanager.common.fields                                 = 域
webmanager.common.host                                   = 主机
webmanager.common.hostExp                                = 绑定到的主机名或IP.正常值是<tt>0.0.0.0</tt> (所有接口) or <tt>localhost</tt> (仅本地连接)
webmanager.common.integer                                = 焦点所在字段必须为整数。
webmanager.common.keepAliveTimeout                       = 保持连接超时
webmanager.common.keepAliveTimeoutExp                    = 连接器关闭连接前等待后续请求的毫秒数.默认值是使用连接超时的设定值.
webmanager.common.keyStore                               = 密钥库
webmanager.common.keystoreFile                           = 密钥库文件
webmanager.common.keystorePassword                       = 密钥库密码
webmanager.common.keystoreType                           = 密钥库类型
webmanager.common.list                                   = 列表
webmanager.common.listConnectors                         = 列出连接器
webmanager.common.maxHttpHeaderSize                      = Http头最大长度
webmanager.common.maxHttpHeaderSizeExp                   = HTTP请求和响应头的最大大小,单位为字节.如果未指定,该属性值为4096(4KB).
webmanager.common.maxKeepAliveRequests                   = 最大保持连接请求数
webmanager.common.maxKeepAliveRequestsExp                = 可以放入管道直到服务器关闭连接的HTTP请求的最大数量.属性值设为1将禁用HTTP/1.0保持连接和HTTP/1.1保持连接及管道.属性值设为-1将不限制放入管道或保持连接的HTTP请求个数。.如果未指定,属性值为100.
webmanager.common.MaxParameterCount                      = MaxParameterCount
webmanager.common.MaxParameterCountExp                   = The maximum number of parameters (GET plus POST) which will be automatically parsed by the container. 10000 by default. A value of less than 0 means no limit.
webmanager.common.maxPostSize                            = POST最大大小
webmanager.common.maxPostSizeExp                         = 容器在表单URL参数解析时处理的POST的最大字节数.将属性值设为小等于0的值将解除限制.默认值是2097152(2MB).
webmanager.common.maxSavePostSize                        = 保存POST最大大小
webmanager.common.maxSavePostSizeExp                     = 容器在表单或客户证书验证时保存或缓存的POST的最大字节数.属性值设为-1将解除限制.属性值设为0将禁用验证时保存POST数据.，默认值是4096(4KB).
webmanager.common.maxSpareThreads                        = 最大空闲线程数量
webmanager.common.maxSpareThreadsExp                     = 线程池终止不必要线程前，最多允许存在的未使用的连接请求处理线程的数量.默认值是50.
webmanager.common.maxThreads                             = 线程最大数量
webmanager.common.maxThreadsExp                          = 用于处理接收请求的线程的最大数量
webmanager.common.minSpareThreads                        = 最小空闲线程数量
webmanager.common.minSpareThreadsExp                     = 当连接器初次启动时创建的请求处理线程数量.连接器也将确保有指定数量的可用空闲处理线程.这个属性设定值应小于最大线程数的设定值.默认值是4.
webmanager.common.minThreads                             = 线程最小数量
webmanager.common.minThreadsExp                          = 用于处理接收请求的线程的最小数量
webmanager.common.noCompressionUserAgents                = 不可压缩的UserAgent值
webmanager.common.noCompressionUserAgentsExp             = 这个值是不应使用压缩的HTTP客户的user-agent的正则表达式的列表，以逗号分隔,因为这些用户的实现不完整,尽管他们建议未来支持.默认值是空字符串(禁用正则表达式匹配).
webmanager.common.port                                   = 端口
webmanager.common.portExp                                = 要绑定到的网络端口
webmanager.common.protocol                               = 协议
webmanager.common.proxyName                              = 代理名称
webmanager.common.proxyNameExp                           = 如果连接器用于代理设定,用这个属性来指定调用request.getServerName()时返回的服务器名称。
webmanager.common.proxyPort                              = 代理端口
webmanager.common.proxyPortExp                           = 如果连接器用于代理设定,设置这个值以指定调用request.getServerPort()时返回的服务器端口号.
webmanager.common.redirectPort                           = 重定向端口
webmanager.common.redirectPortExp                        = 如果连接器支持非SSL请求,且接收到一个匹配到<security-constraint>的请求需要SSL的支持,Catalina将自动将请求重定向到这里指定的端口号.
webmanager.common.restrictedUserAgents                   = 限制的不压缩的UserAgent值
webmanager.common.restrictedUserAgentsExp                = 这个值是不应使用HTTP/1.1或HTTP/1.0保持连接的HTTP客户的user-agent的正则表达式的列表,由逗号分割，即使客户建议支持这些特性.默认值是空字符串(禁用正则表达式匹配).
webmanager.common.server                                 = 服务器
webmanager.common.serverExp                              = HTTP响应的服务器头.事实上你并不需要这个特性.
webmanager.common.show                                   = 显示所有
webmanager.common.showAllFieldsExp                       = 在这个框内打勾以显示和设定所有属性.反之隐藏属性,注意:隐藏并不会删除这些域的值.
webmanager.common.socketBuffer                           = 套接字缓存
webmanager.common.socketBufferExp                        = 套接字输出缓存所提供的缓存的最大大小(单位为字节).指定-1以禁用缓存.默认值是使用9000字节的缓存.
webmanager.common.strategy                               = 线程池策略
webmanager.common.strategyExp                            = 使用的线程池策略.默认的策略不使用主线程,但可以将属性值设为‘ms’以使用一个更约定俗成的使用主侦听线程的策略.设定线程优先级属性(仅适用于侦听服务器套接字的线程)将显著提高主策略性能.默认使用该策略.
webmanager.common.string                                 = 字符串
webmanager.common.tcpNoDelay                             = TCP无延迟
webmanager.common.tcpNoDelayExp                          = 如果勾选, 服务器套接字的TCP_NO_DELAY选项将被设定,这在大多数情况下将提高性能.
webmanager.common.threadPriority                         = 线程优先级
webmanager.common.threadPriorityExp                      = JVM中请求处理线程的优先级.默认值是java.lang.Thread#NORM_PRIORITY.查看JavaDoc中的 java.lang.Thread类以了解有关这个优先级的更多细节.
webmanager.common.traceExp                               = 勾选以启用TRACE HTTP方法
webmanager.common.trustStore                             = 信任库
webmanager.common.truststoreFile                         = 信任库文件
webmanager.common.truststorePassword                     = 信任库密码
webmanager.common.truststoreType                         = 信任库类型
webmanager.common.uniqueName                             = 唯一名称
webmanager.common.uniqueNameExp                          = 一个区别于服务器中任何其它web连接器的名称(名称中不要使用空格)
webmanager.common.uriEncoding                            = URI编码
webmanager.common.uriEncodingExp                         = 指定用于在解码了%xx的URL之后解码URI字节的字符编码. 默认是ISO-8859-1.
webmanager.common.useBodyEncodingForURI                  = 对URI使用体编码
webmanager.common.useBodyEncodingForURIExp               = 打勾以使用contentType中指定的编码用于URI请求参数,而不是使用URI编码.
webmanager.common.useIPVHosts                            = 使用IPVHost
webmanager.common.useIPVHostsExp                         = 打勾以使Tomcat使用接收到的请求的IP地址来决定将请求发送到哪个主机.
webmanager.common.xPoweredBy                             = XpoweredBy
webmanager.common.xPoweredByExp                          = 打勾以使Tomcat建议支持Servlet规范使用规范推荐的头.
webmanager.connector.editConnector.JettyManagerImpl.30   = 绑定到的主机名或IP。正常值是0.0.0.0(所有接口)或者localhost(仅本地连接)。
webmanager.connector.editConnector.JettyManagerImpl.32   = 要绑定到的网络端口。
webmanager.connector.editConnector.JettyManagerImpl.34   = 连接器用于处理到来请求所使用的线程的最大数量
webmanager.connector.editConnector.JettyManagerImpl.36   = 输入和输出缓存的大小(以字节为单位)。
webmanager.connector.editConnector.JettyManagerImpl.38   = 如果没有可用线程则加入队列的未被接收的连接的最大数量。
webmanager.connector.editConnector.JettyManagerImpl.40   = 连接器在关闭握手时拖延的最大秒数。
webmanager.connector.editConnector.JettyManagerImpl.42   = 保密连接重定向到的端口，如果不支持则为0.
webmanager.connector.editConnector.JettyManagerImpl.44   = 如果设定它，则连接经过该连接器的客户端必须提供一份有效的客户端证书。
webmanager.connector.editConnector.JettyManagerImpl.47   = 用于访问服务器私钥的密钥库。
webmanager.connector.editConnector.JettyManagerImpl.50   = 包含受信证书条目的密钥库，包括了CA证书。
webmanager.connector.editConnector.JettyManagerImpl.53   = 正常情况下设定为TLS。使用某些JVM(IBM)时只有将该值设定为SSL才能使通用的浏览器工作正常。
webmanager.connector.editConnector.JettyManagerImpl.56   = 正常情况下设定位匹配JVM厂商。
webmanager.connector.editConnector.JettyManagerImpl.57   = 头缓存的大小(以字节为单位)。
webmanager.connector.editConnector.TomcatManagerImpl.101 = 将属性值设为true以使Tomcat使用接收到的请求的IP地址来决定将请求发送到哪个主机。
webmanager.connector.editConnector.TomcatManagerImpl.103 = 将属性值设为true以使Tomcat宣传支持Servlet规范使用规范推荐的头。
webmanager.connector.editConnector.TomcatManagerImpl.105 = 当所有可能的连接处理线程都在使用时,接收传入连接请求的队列的最大长度.当队列已满时所有接收到的连接都将被拒绝。
webmanager.connector.editConnector.TomcatManagerImpl.108 = 绑定到的主机名或IP。正常值是0.0.0.0(所有接口)或者localhost(仅本地连接)。
webmanager.connector.editConnector.TomcatManagerImpl.11  = 与客户端通信的协议。
webmanager.connector.editConnector.TomcatManagerImpl.110 = 为连接器创建的输入流提供的缓存大小(以字节为单位)。
webmanager.connector.editConnector.TomcatManagerImpl.113 = 这个值是一个以逗号分隔的，可以使用HTTP压缩的MIME类型的列表。
webmanager.connector.editConnector.TomcatManagerImpl.116 = 连接器可以使用HTTP/1.1 GZIP压缩以试图节省服务器带宽。可接受的参数值是<i>关</i>(禁用压缩)，<i>开</i>(压缩文本数据)，<i>强制</i>(强制在所有情况下使用压缩)，或者一个整数值 (等同于<i>开</i>，但指定了输出被压缩前数据的最小量)。如果content-length未知且压缩设置为<i>开</i>或者更甚,则输出也将被压缩。
webmanager.connector.editConnector.TomcatManagerImpl.118 = 连接器使用的套接字关闭时拖延的毫秒数.默认值是-1(禁用套接字拖延)。
webmanager.connector.editConnector.TomcatManagerImpl.120 = 连接器在接收连接后等待请求URI行呈现的毫秒数。
webmanager.connector.editConnector.TomcatManagerImpl.122 = 引用到一个执行器元素的名称。如果启用这个属性且存在该命名的执行器，则连接器将使用该执行器并忽略其它一切有关线程的参数。
webmanager.connector.editConnector.TomcatManagerImpl.124 = 连接器关闭连接前等待后续请求的毫秒数。
webmanager.connector.editConnector.TomcatManagerImpl.126 = 这个标志位允许servlet容器在执行servlet时使用不同的,长一些的连接超时,最终这将使得servlet有更长的时间来完成任务的执行或允许在数据上传有更长的超时。
webmanager.connector.editConnector.TomcatManagerImpl.128 = HTTP请求和响应头的最大大小，单位为字节。
webmanager.connector.editConnector.TomcatManagerImpl.130 = 服务器关闭连接前可以放入管道的HTTP请求的最大数量.将属性设为1将禁用HTTP/1.0 keep-alive以及HTTP/1.1 keep-alive和管道.将属性设为-1将不限制放入管道或keep-alive的HTTP请求数。
webmanager.connector.editConnector.TomcatManagerImpl.132 = 连接器创建的请求处理线程的最大数量，它因此决定了可以同时处理的请求的最大数量。如果未指定，该属性将被设为40.如果该连接器关联到了一个执行器，则该属性将被忽略，因为连接器将使用执行器执行任务而不是内部的线程池。
webmanager.connector.editConnector.TomcatManagerImpl.134 = 空闲线程的最小数量
webmanager.connector.editConnector.TomcatManagerImpl.136 = 空闲线程的最大数量
webmanager.connector.editConnector.TomcatManagerImpl.139 = 这个值表示用于匹配不应使用压缩的HTTP客户端的user-agent的正则表达式的列表，以逗号分隔,因为这些客户端的实现不完整,尽管他们号称支持该特性。
webmanager.connector.editConnector.TomcatManagerImpl.14  = 与客户端通信所使用的密码。
webmanager.connector.editConnector.TomcatManagerImpl.141 = 连接器将在其上创建服务器套接字并等待到来的连接的TCP端口号。你的操作系统只允许一个服务器应用程序侦听一个特定IP地址上的一个特定的端口号。
webmanager.connector.editConnector.TomcatManagerImpl.144 = 这个值表示用于匹配不应使用HTTP/1.1或HTTP/1.0 keep alive的HTTP客户端的user-agent的正则表达式的列表，以逗号分割，尽管这些客户端号称支持这些特性。
webmanager.connector.editConnector.TomcatManagerImpl.147 = HTTP响应的服务器头。
webmanager.connector.editConnector.TomcatManagerImpl.149 = 为套接字输出缓存所提供的缓存的最大大小(单位为字节).指定-1将禁用缓存。
webmanager.connector.editConnector.TomcatManagerImpl.151 = 如果设为true, 服务器套接字的TCP_NO_DELAY选项将被设定,这在大多数情况下将提高性能。
webmanager.connector.editConnector.TomcatManagerImpl.153 = 请求处理线程在JVM中的优先级。
webmanager.connector.editConnector.TomcatManagerImpl.155 = 使用的证书编码算法。
webmanager.connector.editConnector.TomcatManagerImpl.157 = 如果你想在接收一个连接前令SSL栈向客户端索要一份有效的证书链，将该值设为true。如果你想令SSL栈索要客户端证书但即使没有出示证书也通过，将该值设为want。默认值false将不会索要证书链，除非客户端请求了受security constraint(使用CLIENT-CERT验证)保护的资源。
webmanager.connector.editConnector.TomcatManagerImpl.160 = 密钥库文件所在位置(相对Geronimo安装路径)
webmanager.connector.editConnector.TomcatManagerImpl.162 = 设定用于访问密钥库文件的密码。这同样是用于访问密钥库中服务器私钥的密码(因此该密码必须与密钥库密码匹配)。
webmanager.connector.editConnector.TomcatManagerImpl.165 = 设定密钥库类型。正常情况下总是选择默认值JKS。
webmanager.connector.editConnector.TomcatManagerImpl.168 = 设定HTTPS协议。正常情况下设定为TLS。使用某些JVM(IBM)时只有将该值设定为SSL才能使通用的浏览器工作正常。
webmanager.connector.editConnector.TomcatManagerImpl.17  = 包含服务器证书的文件名。文件格式为PEM编码。
webmanager.connector.editConnector.TomcatManagerImpl.171 = 以逗号分隔的可能使用的加密密码列表.如果未指定,如果未指定,则可能使用任何可用密码。
webmanager.connector.editConnector.TomcatManagerImpl.173 = 密钥库中服务器证书的别名。如果未指定，将使用密钥库中读取到的第一个密钥。
webmanager.connector.editConnector.TomcatManagerImpl.175 = 用于验证客户端证书的信任库文件。
webmanager.connector.editConnector.TomcatManagerImpl.177 = 访问信任库的密码。
webmanager.connector.editConnector.TomcatManagerImpl.179 = 设定信任库类型。正常情况下总是选择默认值JKS。
webmanager.connector.editConnector.TomcatManagerImpl.181 = 使用该属性来启用或禁用sendfile的能力。
webmanager.connector.editConnector.TomcatManagerImpl.183 = 设为true以使用NIO线程池执行器。默认值是true.如果设为false,它执行任务时使用的是基于栈的线程池。通常，使用基于FIFIO队列的执行器将带来细微的性能损失但是在高负荷环境下处理连接时公平性上更好些。
webmanager.connector.editConnector.TomcatManagerImpl.185 = 用于接收连接的线程数。你可能在多CPU的机器上增加该值，一般你不会需要该值大于2。另外，如果有很多的非keep-alive连接，你也可能想要增加该值。
webmanager.connector.editConnector.TomcatManagerImpl.187 = 用于轮询事件的线程数。
webmanager.connector.editConnector.TomcatManagerImpl.189 = 轮询线程的优先级。
webmanager.connector.editConnector.TomcatManagerImpl.19  = 包含服务器私钥的文件。
webmanager.connector.editConnector.TomcatManagerImpl.191 = 接收器线程(用于接收新的连接的线程)的优先级。
webmanager.connector.editConnector.TomcatManagerImpl.193 = 轮询器在select()方法上的超时值(毫秒为单位)。这个值很重要，因为同一个线程还要负责连接清理工作，所以不要把这个值设的很高。
webmanager.connector.editConnector.TomcatManagerImpl.195 = 是否允许comet servlet。
webmanager.connector.editConnector.TomcatManagerImpl.197 = 协议处理器缓存Http11NioProcessor对象以加速性能。这个设定指定了缓存多少这样的对象。-1代表无限制，默认值是200。请使该设定值接近于maxThreads。
webmanager.connector.editConnector.TomcatManagerImpl.199 = 是否使用直接字节缓存，还是使用java映射的字节缓存。默认是false。当你使用直接缓存时，请确保你分配了合适数量的内存给直接内存空间。对于Sun的JDK而言类似于-XX:MaxDirectMemorySize=256m
webmanager.connector.editConnector.TomcatManagerImpl.201 = 以字节为单位的套接字接收缓存SO_RCVBUF。
webmanager.connector.editConnector.TomcatManagerImpl.203 = 以字节为单位的套接字发送缓存SO_SNDBUF。
webmanager.connector.editConnector.TomcatManagerImpl.205 = Tomcat中打开的每一个连接都关联着一个读字节缓存和一个写字节缓存，这个属性控制着这些缓存的大小。默认的读缓存大小为8192字节，如果并发程度较低，可以增加该值以缓存更多数据，如果keep-alive连接的数量非常大，减小这个值或者增大你的堆的大小。
webmanager.connector.editConnector.TomcatManagerImpl.207 = Tomcat中打开的每一个连接都关联着一个读字节缓存和一个写字节缓存，这个属性控制着这些缓存的大小。默认的写缓存大小为8192字节，如果并发程度较低，可以增加该值以缓存更多数据，如果keep-alive连接的数量非常大，减小这个值或者增大你的堆的大小。
webmanager.connector.editConnector.TomcatManagerImpl.209 = Nio连接器使用一个叫做NioChannel的类来持有链接到套接字的元素。为了减少垃圾收集，Nio连接器缓存了这些channel对象，这个值指定了缓存的大小，默认值是500，表示缓存500个NioChannel对象。其它值有-1(缓存无限)和0(不缓存).
webmanager.connector.editConnector.TomcatManagerImpl.21  = 加密私钥的密码短语。
webmanager.connector.editConnector.TomcatManagerImpl.211 = NioChannel池也可以基于大小而不是基于对象个数，大小是这样计算的：<br>NioChannel缓存大小 = 读缓存大小 + 写缓存大小 <br>SecureNioChannel缓存大小 = 应用读缓存大小 + 应用写缓存大小 + 网络读缓存大小 + 网络写缓存大小
webmanager.connector.editConnector.TomcatManagerImpl.213 = Tomcat缓存SocketProcessor对象以减少垃圾收集，这个整数值指定了最多保留多少对象，默认值是500，其它值有-1(缓存无限)和0(不缓存).
webmanager.connector.editConnector.TomcatManagerImpl.215 = Tomcat缓存KeyAttachment对象以减少垃圾收集，这个整数值指定了最多保留多少对象，默认值是500，其它值有-1(缓存无限)和0(不缓存).
webmanager.connector.editConnector.TomcatManagerImpl.217 = Tomcat缓存PollerEvent对象以减少垃圾收集，这个整数值指定了最多保留多少对象，默认值是500，其它值有-1(缓存无限)和0(不缓存).
webmanager.connector.editConnector.TomcatManagerImpl.219 = 等同于标准设置tcpNoDelay。
webmanager.connector.editConnector.TomcatManagerImpl.221 = 对应套接字的keep-alive设定(SO_KEEPALIVE)的布尔值。
webmanager.connector.editConnector.TomcatManagerImpl.223 = 对应套接字的OOBINLINE设定的布尔值。
webmanager.connector.editConnector.TomcatManagerImpl.225 = 对应套接字的复用地址选项(SO_REUSEADDR)的布尔值。
webmanager.connector.editConnector.TomcatManagerImpl.227 = 对应套接字的SO_LINGER选项的布尔值。该选项与soLingerTime值是成对的。
webmanager.connector.editConnector.TomcatManagerImpl.229 = 对应套接字的SO_LINGER选项的秒数。该选项与soLingerOn值是成对的。
webmanager.connector.editConnector.TomcatManagerImpl.231 = 对应套接字的读超时(SO_TIMEOUT)的毫秒数。
webmanager.connector.editConnector.TomcatManagerImpl.233 = 对应套接字上的traffic类的取值，该值介于0到255之间。0x04 | 0x08 | 0x010
webmanager.connector.editConnector.TomcatManagerImpl.235 = 性能设定的第一个取值。
webmanager.connector.editConnector.TomcatManagerImpl.237 = 性能设定的第二个取值。
webmanager.connector.editConnector.TomcatManagerImpl.239 = 性能设定的第三个取值。
webmanager.connector.editConnector.TomcatManagerImpl.24  = 向客户端索要证书。
webmanager.connector.editConnector.TomcatManagerImpl.241 = 为了减少选择器间竞争，设置池中使用的选择器的最大数量。请在命令行org.apache.tomcat.util.net.NioSelectorShared的值设为false的情况下使用这个选项。
webmanager.connector.editConnector.TomcatManagerImpl.243 = 为了减少选择器间竞争，设置池中使用的空闲选择器的最大数量。当一个选择器返回池中时，系统可以决定保留它还是让它被垃圾回收。请在命令行org.apache.tomcat.util.net.NioSelectorShared的值设为false的情况下使用这个选项。
webmanager.connector.editConnector.TomcatManagerImpl.245 = 下列命令行选项对NIO连接器可用：<br><i>-Dorg.apache.tomcat.util.net.NioSelectorShared=true|false</i>. 如果你想让每个线程使用一个选择器，请将该值设为false。如果你将该属性设为false，你可以通过使用selectorPool.maxSelectors属性来控制选择器池的大小。
webmanager.connector.editConnector.TomcatManagerImpl.247 = NIO连接器实现了一种叫做降落伞的OutOfMemoryError策略。它持有一个数据块(字节数组)，一旦内存不足，该数据块将被释放并报错。这将给虚拟机以足够的空间完成清理工作。oomParachute代表降落伞(字节数组)的大小(以字节为单位)。默认值是1024*1024(1MB)。请注意，这只对Java堆空间的内存不足的错误有效，它绝对不保证你肯定可以恢复。如果内存不足发生在Java堆之外，这个降落伞技巧不奏效。
webmanager.connector.editConnector.TomcatManagerImpl.249 = 轮询调用的持续时间。在一些情况下，降低这个值会稍稍减小keep-alive连接的延迟，但是由于产生了更多的轮询调用而使用更多的CPU。
webmanager.connector.editConnector.TomcatManagerImpl.251 = 负责轮询keep-alive连接的轮询器在特定时间可以持有的套接字的数量。多余的连接将立即被关闭。
webmanager.connector.editConnector.TomcatManagerImpl.253 = 针对特定的静态文件使用内核级别的sendfile。
webmanager.connector.editConnector.TomcatManagerImpl.255 = 负责异步发送静态文件的轮询器在特定时间可以持有的套接字的数量。多余的连接将立即被关闭，不会发送任何数据(结果是客户端得到长度为0的文件)。请注意在大多数情况下，sendfile调用将立即返回(内核同步处理)且不会使用sendfile轮询器，所以可以并发发送的静态文件数量比指定的该数量要大得多。
webmanager.connector.editConnector.TomcatManagerImpl.26  = 客户端证书的最大验证深度。
webmanager.connector.editConnector.TomcatManagerImpl.28  = 串联的PEM编码的用于客户端验证的CA证书文件。
webmanager.connector.editConnector.TomcatManagerImpl.30  = PEM编码的用于客户端验证的CA证书目录。
webmanager.connector.editConnector.TomcatManagerImpl.32  = PEM编码的服务器CA证书文件。
webmanager.connector.editConnector.TomcatManagerImpl.34  = 串联的PEM编码的用于客户端验证的CA CRL文件。
webmanager.connector.editConnector.TomcatManagerImpl.36  = PEM编码的用于客户端验证的CA CRL目录。
webmanager.connector.editConnector.TomcatManagerImpl.40  = 绑定到的主机名或IP。正常值是0.0.0.0(所有接口)或者localhost(仅本地连接)。
webmanager.connector.editConnector.TomcatManagerImpl.42  = 要绑定到的网络端口。
webmanager.connector.editConnector.TomcatManagerImpl.44  = 当所有可能的连接处理线程都在使用时,队列允许传入连接的最大长度.
webmanager.connector.editConnector.TomcatManagerImpl.46  = 缓存大小
webmanager.connector.editConnector.TomcatManagerImpl.48  = 以毫秒为单位的连接超时。
webmanager.connector.editConnector.TomcatManagerImpl.50  = 以毫秒为单位的keep-alive超时。
webmanager.connector.editConnector.TomcatManagerImpl.52  = 连接器用于处理到来请求所使用的线程的最大数量
webmanager.connector.editConnector.TomcatManagerImpl.54  = 空闲线程的最小数量
webmanager.connector.editConnector.TomcatManagerImpl.56  = 空闲线程的最大数量
webmanager.connector.editConnector.TomcatManagerImpl.58  = 如果设为true, 服务器套接字上的TCP_NO_DELAY选项将被设定,这在大多数情况下将提高性能.
webmanager.connector.editConnector.TomcatManagerImpl.60  = 如果设为true，验证将在Geronimo中进行，否则，Web服务器本地验证过的主体将传播到Geronimo中使用。
webmanager.connector.editConnector.TomcatManagerImpl.80  = 一个布尔值，用于启用或禁用TRACE HTTP方法。
webmanager.connector.editConnector.TomcatManagerImpl.82  = 如果设为true,所有会话cookie的路径将被设置为/.这对portlet规范的实现有用，但如果一个给定的服务器中的应用被很多客户端访问的话将极大的影响性能。
webmanager.connector.editConnector.TomcatManagerImpl.84  = 如果你希望对request.getRemoteHost()的调用执行DNS查找以返回远程客户的实际主机名的话请设为true.设为false将略过DNS查找并返回字符串形式的IP地址(因此将提高性能)。
webmanager.connector.editConnector.TomcatManagerImpl.85  = The maximum number of parameters (GET plus POST) which will be automatically parsed by the container. 10000 by default. A value of less than 0 means no limit.
webmanager.connector.editConnector.TomcatManagerImpl.86  = 容器的FORM URL参数解析所处理的POST的最大字节数.将属性值设为小于或等于0的值可以不加限制.
webmanager.connector.editConnector.TomcatManagerImpl.88  = 容器在FORM或CLIENT-CERT验证过程中保存或缓存的POST的最大字节数.对于两种类型的验证，在用户被验证前POST将被保存或缓存。对于CLIENT-CERT验证，POST在SSL握手过程中被缓存并在请求被处理后清空。对于FORM验证，POST在用户被重定向到登录表单时被保存并保留到成功验证用户或者与验证请求关联的会话过期。将属性值设为-1可以不加限制.将属性值设为0则验证时不保存POST数据。
webmanager.connector.editConnector.TomcatManagerImpl.90  = 如果连接器用在代理设置中,设置这个属性来指定调用request.getServerName()时返回的服务器名称。
webmanager.connector.editConnector.TomcatManagerImpl.92  = 如果连接器用在代理设置中,设置这个值以指定调用request.getServerPort()时返回的服务器端口号.
webmanager.connector.editConnector.TomcatManagerImpl.94  = 如果连接器正在支持非SSL请求，而收到一个请求，与其匹配的<security-constraint>需要SSL传输，Catalina将自动重定向请求到这里指定的端口号。
webmanager.connector.editConnector.TomcatManagerImpl.97  = 这里指定了在使用%xx解码URL后，用于解码URI字节的字符编码. 
webmanager.connector.editConnector.TomcatManagerImpl.99  = 这里指定了是否应该将contentType中指定的编码用于URI查询参数,而不使用URIEncoding。存在这个设定是为了兼容Tomcat 4.1.x，对于它而言，在contentType中指定或者使用Request.setCharacterEncoding方法显式设定的编码将同样被用于来自URL的参数。
webmanager.connector.editConnector.addNew                = 添加新的
webmanager.connector.editConnector.attribute             = 属性
webmanager.connector.editConnector.desc                  = 描述
webmanager.connector.editConnector.editConnector         = 编辑连接器
webmanager.connector.editConnector.requiredAttribute     = （加<strong>*</strong>号的为必填属性）
webmanager.connector.editConnector.type                  = 类型
webmanager.connector.editConnector.value                 = 值
webmanager.connector.editHTTP.addNewListener             = 为{1}添加监听器{0}
webmanager.connector.help.content                        = 连接管理器显示了所有类型的链接，并且能够修改这个Web服务器的连接。=
webmanager.connector.normal.addNew                       = 添加
webmanager.connector.normal.addNewNote                   = <p>Notes:</p><ul><li>To enable APR connectors creation, you need to install APR native library firstly.</li></ul>
webmanager.connector.normal.addNewListener               = 为{1}添加新的{0}监听器=
webmanager.connector.normal.connectorsFor                = {0}的连接器=
webmanager.connector.normal.consoleNavailable            = 停用{0}将使控制台应用无法启动.停用{1}?
webmanager.connector.normal.noConnectorsDefined          = {0}没有预定义的连接器=
webmanager.connector.normal.noWebContainers              = 不存在预定义的Web容器=
webmanager.connector.normal.reallyDelete                 = 你真的要删除{0}么？=
webmanager.help.disable                                  = 关闭
webmanager.help.disableExplanation                       = 关闭收集统计信息的功能，并返回到主页面。
webmanager.help.refreshExplanation                       = 使用最近的统计信息来更新显示。
webmanager.help.resetExplanation                         = 重置所有的总计，平均等数值为0，并再次启动统计功能。
webmanager.help.title                                    = Geronimo控制台会收集关于Geronimo控制台接收到的请求数目，和到Geronimo服务器的连接数这些统计信息。点击"enable"链接来监视Geronimo服务器的性能。
webmanager.normal.activeRequestCount                     = 活动请求数
webmanager.normal.avgTime                                = 平均时间 (ms)
webmanager.normal.connectionDuration                     = 连接持续时间=
webmanager.normal.connectionRequestCount                 = 请求连接数=
webmanager.normal.count                                  = 数量
webmanager.normal.current                                = 当前
webmanager.normal.elapsedTime                            = 开始收集后经历的时间 (hh:mm:ss:SSS)
webmanager.normal.high                                   = 最高
webmanager.normal.low                                    = 最低
webmanager.normal.maxTime                                = 最大时间(ms)
webmanager.normal.minTime                                = 最短时间 (ms)
webmanager.normal.requestDuration                        = 请求持续时间
webmanager.normal.statistic                              = 统计
webmanager.normal.statsMessage                           = 当前web容器不支持web统计
webmanager.normal.total1xxResp                           = 总共1xx个响应
webmanager.normal.total2xxResp                           = 总共2xx个响应
webmanager.normal.total3xxResp                           = 总共3xx个响应
webmanager.normal.total4xxResp                           = 总共4xx个响应
webmanager.normal.total5xxResp                           = 总共5xx个响应
webmanager.normal.totalConnectionCount                   = 总共连接数=
webmanager.normal.totalErrorCount                        = 总共出错数
webmanager.normal.totalRequestCount                      = 总共请求数
webmanager.normal.totalTime                              = 总共时间

welcome.welcomeMaximized.fragment1   = 用户登录管理控制台后将首先看到此页。在此页面有此管理控制台的一个简单介绍。
welcome.welcomeMaximized.fragment2   = 要返回欢迎页面，请单击此小窗口标题栏中的“view”。
welcome.welcomeMaximized.title       = 欢迎来到Geronimo&#8482;管理控制台!
welcome.welcomeNormal.about1         = 管理控制台提供了一种方便的、友好的方式来管理Geronimo服务器的很多方面。它现在正在完善之中，将会提供更多的功能。可以通过左边的导航栏来进行各项操作。
welcome.welcomeNormal.about2         = 真正的工作在这里的主工作区域进行.每个视图包含一个或多个portlet(自包含的视图片段),portlet的头部通常包含了一个帮助链接.查看并尝试这个portlet头部的例子.
welcome.welcomeNormal.about3         = 你可以通过右边提供的参考了解Apache Geronimo,它的功能和未来的发行版中可能增加的新内容.
welcome.welcomeNormal.about4         = 可以使用邮件列表来参与Apache Geronimo的开发并向社区提问:
welcome.welcomeNormal.about5         = 和我们分享你的经验，让我们知道如何使Geronimo更好。
welcome.welcomeNormal.addiDoc        = 其它文档
welcome.welcomeNormal.archive        = 归档
welcome.welcomeNormal.commonActions  = 控制台操作
welcome.welcomeNormal.deployNew      = 部署新应用程序
welcome.welcomeNormal.devMaillist    = 开发人员邮件列表存档
welcome.welcomeNormal.doc            = Geronimo文档
welcome.welcomeNormal.faq            = FAQ
welcome.welcomeNormal.forDevelopers  = 对于Geronimo开发人员
welcome.welcomeNormal.forUsers       = 对于配置或使用Geronimo的问题
welcome.welcomeNormal.homePage       = Geronimo主页
welcome.welcomeNormal.irc            = Geronimo IRC 聊天
welcome.welcomeNormal.online         = Geronimo 在线
welcome.welcomeNormal.problemTracker = Bug报告
welcome.welcomeNormal.serverInfo     = 服务器信息
welcome.welcomeNormal.thanks         = 感谢使用Geronimo!
welcome.welcomeNormal.userMaillist   = 用户邮件列表存档
welcome.welcomeNormal.webServerPorts = Web Server端口
welcome.welcomeNormal.wiki           = Wiki

artifact.normal.title                = 名称-别名
artifact.normal.name                 = 名称
artifact.normal.aliases              = 别名
artifact.normal.actions              = 操作
artifact.actions.cancel              = 取消
artifact.actions.edit                = 编辑
artifact.actions.save                = 保存
artifact.actions.remove              = 移除
artifact.msg.emptyText               = 空文本框
