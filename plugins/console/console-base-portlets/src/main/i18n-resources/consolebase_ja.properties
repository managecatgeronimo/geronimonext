#=====================================================================
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#=====================================================================
# $Rev$ $Date$

apache.javaSysNormal.etc                     = その他
apache.javaSysNormal.os                      = オペレーティング・システム
apache.javaSysNormal.usr                     = ユーザー
apache.javaSysNormal.vm                      = 仮想マシン
apache.jk.ajpPort.networkPort                = AJP のネットワークポート
apache.jk.ajpPort.networkPortExplanation     = <tt>mod_jk</tt> は、Geronimo の Web コンテナーと AJP というプロトコルで通信します。現在、Web コンテナに AJP プロトコル・リスナーを構成していません。ここでポートを選択すれば、AJP プロトコル・リスナーが追加されます。
apache.jk.ajpPort.title                      = <b>Apache mod_jk</b> -- AJP のポート
apache.jk.config.logFileLocation             = <tt>mod_jk</tt> ログファイルの場所
apache.jk.config.logFileLoctionExplanation   = <tt>mod_jk</tt> は、選択された場所にログ・ファイルを書き込みます。ログ・ファイルの場所は、Apache の構成に設定する必要があります。<tt>mod_jk</tt> ログ・ファイルが書き込まれる場所を、選択してください。
apache.jk.config.operatingSystem             = オペレーティング・システム
apache.jk.config.operatingSystemExplanation  = <tt>mod_jk</tt> をインストールする手順は、OS によって異なります。ガイダンスが提供されているものもあれば、自分自身で <tt>mod_jk</tt> をインストールしなければならないものもあります。
apache.jk.config.pathToProperties            = <tt>workers.properties</tt> のパス
apache.jk.config.pathToPropertiesExplanation = <tt>mod_jk</tt> を使用するには、どのようなアプリケーション・サーバーに、どのポートで接続するかといった情報を、<tt>workers.properties</tt> ファイルに設定する必要があります。このツールは、<tt>workers.properties</tt>  ファイルの本体を生成しますが、そのファイルの場所を Apache の構成データの中に指定する必要がありますので、そのファイルの配置場所を入力してしてください。
apache.jk.config.title                       = <b>Apache mod_jk</b> -- 基本構成
apache.jk.index.frag1                        = ここでは <tt>mod_jk</tt> を使って Apache 2 HTTP サーバー経由で Geronimo へのアクセスを構成することができます。それには、以下の手順が必要です。
apache.jk.index.frag2                        = いくつかの質問に答えることで、詳細なガイドと構成情報を得ることができます。
apache.jk.index.getStarted                   = 開始する
apache.jk.index.notes                        = </li></ul><p>注意:</p><ul><li>Geronimo は、以前にこのツールを使用して行った設定を記憶していません。よって、毎回すべてのデータを再入力するか、現在の構成ファイルに新しい情報を貼り付ける必要があります。</li>  <li>Apache 経由で公開する Web アプリケーションは、このツールを使用する際に、実行中となっている必要があります。</li></ul>
apache.jk.index.severalSteps                 = <ol><li> Geronimo の Web コンテナー を AJP プロトコルをサポートするように構成します</li><li><tt>mod_jk.so</tt> Apache モジュールをインストールします (必要であればコンパイルする)</li><li><tt>workers.properties</tt> ファイルを作成し、Apache が Geronimo AJP コネクターと接続できるようにします</li><li>Apache の構成ファイルに、どの URLへの要求を Geronimo に送るかと、Apache が静的コンテンツを扱うかどうか (つまり、動的コンテンツへの要求のみを Geronimo に送るかどうか) を追加します</li></ol>
apache.jk.results.alreadyHasAJPListener      = Geronimo は、既に {0} ポートで AJP リスナーが実行されるように構成されています。ここで追加する必要はありません。
apache.jk.results.anAJPLisstnerAdded         = AJP リスナーは、{0} ポートに追加されました。 ここで追加する必要はありません。
apache.jk.results.canActivateIt              = <tt>mod_jk</tt> RPM をインストールしたら、次にそれを有効にします。
apache.jk.results.followingInfoToConfig      = 以下の情報を、Apache の構成に追加する必要があります。
apache.jk.results.howToActivateOthers        = 以下の行を <tt>/etc/httpd/conf/httpd.conf</tt> に追加します :</p><pre>LoadModule jk_module modules/mod_jk.so</pre> <p> その後、<tt>service httpd start</tt> (または、<tt>service httpd restart</tt>) で Apache を始動します。
apache.jk.results.howToActivateifOsSuSE      = <tt>/etc/sysconfig/apache2</tt> の <tt>APACHE_MODULES</tt> に <tt>jk</tt> を追加し、<tt>SuSEconfig</tt> を root で実行します。その後、<tt>rcapache2 start</tt> (または <tt>rcapache2 restart</tt>) を実行します。
apache.jk.results.noInstructionsToInstall    = </p><p>選択されたオペレーティング・システムについては、<tt>mod_jk</tt> の特定のインストール手順はありません。バイナリー・リリースを <a href="http://www.apache.org/dist/tomcat/tomcat-connectors/jk/binaries/"> http://www.apache.org/dist/tomcat/tomcat-connectors/jk/binaries/</a> から入手することができます。バイナリーが入手できない場合は、ソースファイルからビルドする必要があります。</p><p><tt>mod_jk</tt> を Apache で有効にするには、通常は <tt>.so</tt> ファイル (Linux/UNIX/Mac OS X)  または <tt>.dll</tt> ファイル (Windows) をインストールし、<tt>httpd.conf</tt> ファイルに次のような行を追加する必要があります。:</p> <pre> LoadModule jk_module modules/mod_jk.so</pre> <p>最後に、Apache を始動または再始動します。</p>
apache.jk.results.saveFollowingToFile        = <tt>workers.properties</tt> ファイルは、先ほど指定した <tt> {0} </tt> に保管します。以下の内容を記述してください。
apache.jk.results.saveWhereIfSuSE            = SuSE の場合、Apache の conf.d ディレクトリ配下の構成ファイルに記述します。例えば、 <tt>/etc/apache2/conf.d/geronimo-jk.conf</tt> です。
apache.jk.results.saveWhereOthwise           = Apache の構成ファイルに追加する情報。通常は <tt>/etc/httpd/conf/httpd.conf</tt> にあります。
apache.jk.results.step1                      = Step 1: AJP を使用するための Geronimo を構成
apache.jk.results.step2                      = Step 2: <tt>mod_jk</tt> のインストール
apache.jk.results.step2_installUsingRPM      = {0} の場合、<tt>mod_jk</tt> は RPM でインストールすることができます。ただし、ファイルが適切な場所に配置されるだけで、有効にはなりません。有効化するには、インストールメディアから次の RPM を探索して、次のようなコマンドを実行する必要があります。
apache.jk.results.step3                      = Step 3: <tt>workers.properties</tt> ファイルの作成
apache.jk.results.step4                      = Step 4: Apache の構成<h2>
apache.jk.results.step5                      = Step 5: Apache の再始動
apache.jk.results.step5Content               = これらの手順が完了したら、Apache の準備はできました。Geronimo を始動し、Apache を再始動して、Gerinomo 上の Web アプリケーションに Apache の URL 経由でアクセスしてください。問題が発生したら、Apache のエラー・ログと mod_jk のエラー・ログ (<tt>{0}</tt>) をチェックしてください。
apache.jk.results.summary                    = <tt>mod_jk</tt> を有効にし、Geronimo と通信するように設定するには、以下の手順を実行する必要があります。
apache.jk.results.title                      = <b>Apache mod_jk</b> -- 構成結果
apache.jk.webApps.dynamicPaths               = 動的パス
apache.jk.webApps.select                     = <p>Geronimo で <i>実行中の</i> 各 Web アプリケーションに対して、以下より選択:</p><dl>  <dt><b>Apache 経由</b></dt>  <dd>Web アプリケーションに Apache 経由で接続するかどうか</dd>  <dt><b>静的コンテンツ</b></dt>  <dd>Apache が静的コンテンツを扱うかどうか (すべてのコンテンツを Geronimo で扱う代わりに)</dd>  <dt><b>動的パス</b></dt> <dd>Apache が静的コンテンツを扱う場合、どの URL への要求を Geronimo に送るか (例えば <tt>/servlet/*</tt> や <tt>*.jsp</tt> など)</dd></dl>
apache.jk.webApps.staticContent              = 静的コンテンツ
apache.jk.webApps.throughApache              = Apache 経由
apache.jk.webApps.title                      = <b>Apache mod_jk</b> -- Web アプリケーションの選択
apache.jk.webApps.webApplication             = Web アプリケーション

artifact.actions.cancel = キャンセル
artifact.actions.edit   = 編集
artifact.actions.remove = 削除
artifact.actions.save   = 保管
artifact.msg.emptyText  = ありません
artifact.normal.actions = 操作
artifact.normal.aliases = アーティファクト-別名
artifact.normal.name    = 名前
artifact.normal.title   = 名前 & アーティファクト-別名

ca.caDetails.summary                                = この画面では、認証局の証明書と鍵ペアの詳細を表示します。<i>シリアル番号の最大値</i>は、この認証局で発行された証明書のシリアル番号の最大値を表します。<i>証明書のテキスト</i>は、認証局の証明書の Base64 エンコード形式を表します。この文字列は、この認証局をソフトウェア内で信頼する認証局として指定するための証明書要求に使用されます。
ca.caDetails.title                                  = 認証局の詳細
ca.certReqDetails.summary                           = この画面では、証明書署名要求 (CSR) の詳細を表示し、発行する証明書の有効期限と署名アルゴリズムを入力します。証明書のシリアル番号は、最後に発行された証明書のシリアル番号から自動的にインクリメントされます。次の画面で、これらの詳細を確認し、証明書を発行します。
ca.certReqDetails.title                             = <b>新規証明書の発行</b> - Step 2: 要求の確認と証明書の詳細を入力
ca.common.CSRText                                   = 証明書署名要求のテキスト
ca.common.Division_BusinessUnit                     = 部署/事業部
ca.common.aliasForCAKeypair                         = 認証局の鍵ペアの別名
ca.common.backToCAHome                              = 認証局のホームへ戻る
ca.common.base64EncodedCertText                     = Base64 エンコードされた証明書のテキスト
ca.common.certAuthorityIdentity                     = 認証局の ID
ca.common.certRequestorDetails                      = 証明書要求者の詳細
ca.common.certRequests                              = 証明書要求
ca.common.certSerialNo                              = 証明書のシリアル番号
ca.common.certSerialNumber                          = 証明書のシリアル番号
ca.common.certificateDetails                        = 証明書の詳細
ca.common.city_Locality                             = 市/地域
ca.common.commonName                                = 一般名
ca.common.company_Organization                      = 会社/組織
ca.common.countryCode                               = 国コード
ca.common.criticalExt                               = クリティカルな拡張
ca.common.detailsOfCert                             = 発行する証明書の詳細
ca.common.emptyText                                 = フォーカスされている項目は空欄にできません。
ca.common.fingerPrints                              = 指紋
ca.common.highestSerialNumber                       = シリアル番号の最大値
ca.common.integer                                   = フォーカスされている項目は数値である必要があります。
ca.common.issueNewCert                              = 新規証明書を発行
ca.common.issuer                                    = 発行者
ca.common.keyAlgorithm                              = 鍵アルゴリズム
ca.common.keyDetails                                = 鍵の詳細
ca.common.keySize                                   = 鍵サイズ
ca.common.lockCA                                    = 認証局をロック
ca.common.mmddyyyy                                  = フォーカスされている項目は MM/DD/YYYY 形式の日付である必要があります。
ca.common.noRequests                                = 要求はありません
ca.common.nonCriticalExt                            = クリティカルでない拡張
ca.common.passwordMismatch                          = パスワードが一致していません。
ca.common.processCSR                                = 証明書署名要求の処理
ca.common.publicKey                                 = 公開鍵
ca.common.publicKeyAlg                              = 公開鍵アルゴリズム
ca.common.reviewCADetails                           = 認証局の詳細を確認
ca.common.reviewClientCertDetails                   = クライアント証明書の詳細を確認
ca.common.serialNumber                              = シリアル番号
ca.common.setupCertAuthority                        = 認証局のセットアップ
ca.common.signatureAlg                              = 署名アルゴリズム
ca.common.signatureAlgorithm                        = 署名アルゴリズム
ca.common.state_Province                            = 州/地方
ca.common.subject                                   = サブジェクト
ca.common.title                                     = 証明書の表示
ca.common.unlockCA                                  = 認証局のロック解除
ca.common.unlockCertAuthority                       = 認証局のロック解除
ca.common.validFrom                                 = 有効期間開始日
ca.common.validFromDate                             = 有効期間開始日
ca.common.validTo                                   = 有効期間終了日
ca.common.validToDate                               = 有効期間終了日
ca.common.viewCADetails                             = 認証局の詳細を表示
ca.common.viewIssuedCert                            = 発行された証明書の表示
ca.common.wrongDate                                 = 終了日は開始日より後の日付である必要があります。
ca.confirmCA.summary                                = この画面では、前の画面で入力した認証局の詳細について確認することができます。修正する場合は、前の画面に戻って下さい。 <i>認証局のセットアップ</i> ボタンを押下すると、鍵ペアと自己証明証明書が生成され、鍵ストアに格納されます。認証局の証明書のシリアル番号はテキスト・ファイルに保管され、証明書署名要求が処理される毎に加算されます。
ca.confirmCA.title                                  = <b>認証局のセットアップ</b> - Step 2: 認証局の詳細を確認
ca.confirmCertReq.approveCSR                        = 証明書署名要求を承認
ca.confirmCertReq.confirmCertRequest                = 証明書要求の確認
ca.confirmCertReq.rejectCSR                         = 証明書署名要求を拒否
ca.confirmCertReq.summary                           = この画面では証明書署名要求 (CSR) 詳細を表示し、要求を受け入れます。一旦要求が受け入れられたら、証明書は発行されたとみなされます。
ca.confirmClientCert.issueCert                      = 証明書の発行
ca.confirmClientCert.summary                        = この画面では、証明書署名要求と全画面で入力された証明書の詳細を表示します。<i>証明書の発行</i>ボタンをクリックすることで、証明書は発行されて保管されます。次の画面では、発行された証明書の詳細が表示されます。
ca.confirmClientCert.title                          = <b>新規証明書の発行</b> - Step 3: 証明書の確認と発行
ca.index.CAFunctionsAccessed                        = 認証局の機能は、以下のリンクを使用してアクセスできます。
ca.index.CAInitialized                              = 認証局は初期化されました。
ca.index.CALocked                                   = 認証局はロックされています。認証局の機能を使用するにはロックを解除して下さい。
ca.index.CANotInitialized                           = 認証局は実行されていないか、初期化されていません。以下のリンクを使用して、認証局を初期化してください。
ca.index.publishCACert                              = 認証局の証明書を発行
ca.index.requestsToBeFulfilled                      = 要求の処理
ca.index.requestsToBeVerified                       = 要求の確認
ca.index.title                                      = このポートレットでは、認証局 (CA) をセットアップし、証明書署名要求 (CSR) に基づいて、証明書を発行することができます。 <i>認証局のセットアップ</i>では、認証局の詳細や鍵ペアのアルゴリズムのパラメーター、自己署名証明書や認証局の秘密鍵を保護するためのパスワードを設定することができます。このパスワードは、認証局の機能にアクセスするための認証局のロック解除に使用されます。一旦、認証局が初期化されると、<i>新規証明書を発行</i>から証明書署名要求を処理することができます。過去に発行した証明書は、<i>発行済み証明書の表示</i>から参照できます。
ca.listRequestsIssue.CertRequestsAwaiting           = 発行待ち状態の証明書要求
ca.listRequestsIssue.CertRequestsAwaitingExp        = この画面では、発行待ち状態の証明書要求を表示します。
ca.listRequestsVerify.certRequestsAwaitingVerify    = 確認待ち状態の証明書要求
ca.listRequestsVerify.certRequestsAwaitingVerifyExp = この画面では、確認待ち状態の証明書要求を表示します。
ca.processCSR.pastePkcs10here                       = ...pkcs10 でエンコードされた証明書要求をここに貼り付けてください...
ca.processCSR.summary                               = この画面では、証明書署名要求 (CSR) を処理し、要求者の詳細を確認することができます。要求者から受け取った証明書署名要求のテキストファイルを貼り付けて、<i>証明書署名要求の処理<i> をクリックしてください。次の画面で要求者の詳細を確認し、証明書を発行するのに必要な情報を入力することができます。
ca.processCSR.title                                 = <b>新規証明書の発行</b> - Step 1: 証明書署名要求 (CSR) の処理\r\n
ca.setupCA.summary                                  = この画面では、認証局 (CA) の詳細、認証局の鍵ペアのアルゴリズムや自己証明書のアルゴリズム、認証局の秘密鍵を保護するためのパスワードなどを入力することができます。認証局の鍵ペアと自己証明書を生成する前に、次の画面で入力した情報を確認します。
ca.setupCA.title                                    = <b>認証局のセットアップ</b> - Step 1: 認証局の詳細を入力
ca.unlockCA.enterCAPrivateKeyPassword               = 認証局の秘密鍵のパスワードを入力
ca.unlockCA.summary                                 = この画面では、認証局の秘密鍵を守るためのパスワードを入力して、認証局をロック解除することができます。一旦、ロックを解除すると、認証局の機能を使用することができるようになります。
ca.viewCertificate.backToRequest                    = 要求の処理に戻る
ca.viewCertificate.enterSerialNumber                = 表示する証明書のシリアル番号を入力し、<i>証明書の表示</i> ボタンを押してください。
ca.viewCertificate.screenShows                      = この画面では、認証局で発行された証明書の詳細を表示します。Base64 エンコードされた証明書のテキストは、証明書署名要求 (CSR) の応答として返信されます。

configmanager.help.stopStart            = 停止/始動
configmanager.help.stopStartExp         = 停止/始動のトグルをクリックすると、アプリケーションの停止、始動できます。もしトグルが&quot;停止&quot;\r\nであれば、アプリケーションは実行中であり、クリックするとアプリケーションを停止できます。逆に、トグルが&quot;始動&quot;であれば、アプリケーションは停止中であり、クリックするとアプリケーションを始動できます。
configmanager.help.title                = このページでは、サーバーにインストール済みのアプリケーションの一覧とそれらの始動状態を確認できます。一覧には 4 つの列があり、2 つはアプリケーションの情報を表示し、残りの 2 つはユーザーが可能な操作を表示しています。最初の列は、アプリケーションの状態を、&quot;停止&quot;または&quot;実行中&quot;として表します。4 番目の列は、アプリケーションの configID を表します。残りの 2 つの列は以下のとおりです:
configmanager.help.uninstallExp         = アンインストールのリンクは、Geronimo からアプリケーションをアンデプロイ/除去します。
configmanager.normal.cancel             = &nbsp;キャンセル&nbsp;
configmanager.normal.childComponents    = 子コンポーネント
configmanager.normal.componentName      = コンポーネント名
configmanager.normal.confirmMsg01       = \ は Apache Geronimo のサービスです。コンポーネントの停止は、サーバーもしくは管理コンソールを正しく機能させることを妨げます。すべての依存コンポーネントとそれ以降の依存コンポーネントも停止します。直接影響を受けるコンポーネントについては画面上の "子コンポーネント" を参照してください。この操作を続行しますか?
configmanager.normal.confirmMsg02       = \ は現在表示している管理コンソールのインタフェースを提供しています。停止するとインタフェースは使用できなくなり、機能の復旧には手動の操作が要求されます。この操作を続行しますか?
configmanager.normal.confirmMsg03       = 　は Apache Geronimo によって提供され、他のモジュール (画面上に一覧表示されている "子コンポーネント" を参照) が必要です。すべての依存コンポーネントおよびそれ以降の依存コンポーネントも停止します。この操作を続行しますか?
configmanager.normal.confirmMsg04       = \ は Apache Geronimo のサービスです。このコンポーネントを再始動するとサーバーもしくは管理コンソールを正しく機能させることを妨げます。停止する操作の一部として、すべての依存コンポーネントおよびそれ以降の依存コンポーネントも停止します。このコンポーネントのみを再始動します。直接影響を受けるコンポーネントについては画面上の "子コンポーネント" を参照してください。この操作を続行しますか?
configmanager.normal.confirmMsg05       = \ は現在表示している管理コンソールのインタフェースを提供しています。再始動するとインタフェースは使用できなくなり、機能の復旧に手動の操作が要求されます。この操作を続行しますか?
configmanager.normal.confirmMsg06       = 　は Apache Geronimo によって提供され、他のモジュール (画面上に一覧表示されている "子コンポーネント" を参照) が必要です。停止する操作の一部として、すべての依存コンポーネントおよびそれ以降の依存コンポーネントも停止します。この操作を続行しますか?
configmanager.normal.confirmMsg07       = \ は Apache Geronimo のサービスです。このコンポーネントをアンインストールすると管理コンソールの表示やサーバー自身を不安定にさせたりするような予期せぬ結果になるかもしれません。直接影響を受けるコンポーネントについては画面上の "子コンポーネント" を参照してください。このアンインストールの操作を続行しますか?
configmanager.normal.confirmMsg08       = \ は現在表示している管理コンソールのインタフェースを提供しています。アンインストールするとインタフェースは使用できなくなり、機能の復旧に手動の操作が要求されます。このアンインストール操作を続行しますか?
configmanager.normal.confirmMsg09       = 　は Apache Geronimo によって提供され、他のモジュール (画面上に一覧表示されている "子コンポーネント" を参照) が必要です。このアンインストール操作を続行しますか?
configmanager.normal.confirmMsg10       = アンインストールしてもよろしいですか
configmanager.normal.confirmMsg11       = Are you certain you wish to refresh
configmanager.normal.displayName        = 表示名
configmanager.normal.expertMode         = 上級者向け (Geronimo コンポーネントへのすべての操作を許可する)
configmanager.normal.ok                 = &nbsp;&nbsp;&nbsp;OK&nbsp;&nbsp;&nbsp;
configmanager.normal.parentComponents   = 親コンポーネント
configmanager.normal.showDependencyMode = 親コンポーネントと子コンポーネントを表示

consolebase.common.JVMVersions     = JVM バージョン
consolebase.common.actions         = 操作
consolebase.common.alias           = 別名
consolebase.common.back            = 戻る
consolebase.common.cancel          = キャンセル
consolebase.common.commands        = コマンド
consolebase.common.confirmPassword = パスワード確認
consolebase.common.date            = 日付
consolebase.common.delete          = 除去
consolebase.common.department      = 部署
consolebase.common.deployedAs      = デプロイ
consolebase.common.description     = 説明
consolebase.common.done            = 完了
consolebase.common.edit            = 編集
consolebase.common.email           = Eメール
consolebase.common.enable          = 有効化
consolebase.common.familyName      = 姓
consolebase.common.file            = ファイル
consolebase.common.filterCriteria  = フィルター条件
consolebase.common.finish          = 完了
consolebase.common.givenName       = 名
consolebase.common.group           = グループ
consolebase.common.groupName       = グループ名
consolebase.common.install         = インストール
consolebase.common.item            = 項目
consolebase.common.monitor         = モニター
consolebase.common.name            = 名前
consolebase.common.next            = 次へ
consolebase.common.password        = パスワード
consolebase.common.refresh         = 更新
consolebase.common.reset           = リセット
consolebase.common.restart         = 再始動
consolebase.common.return          = 戻る
consolebase.common.save            = 保管
consolebase.common.size            = サイズ
consolebase.common.start           = 始動
consolebase.common.state           = 状態
consolebase.common.stop            = 停止
consolebase.common.type            = タイプ
consolebase.common.uninstall       = アンインストール
consolebase.common.update          = 更新
consolebase.common.usage           = 使用方法
consolebase.common.user            = ユーザー
consolebase.common.userID          = ユーザー ID
consolebase.common.userName        = ユーザー名
consolebase.common.users           = ユーザー
consolebase.common.value           = 値
consolebase.common.version         = バージョン
consolebase.common.view            = ビュー

infomanager.javaSysHelp.body                   = このページでは、サーバー・プロセスで使用可能なシステム・プロパティーの値を表示します。
infomanager.javaSysNormal.etc                  = その他
infomanager.javaSysNormal.operatingSystem      = オペレーティング・システム
infomanager.javaSysNormal.user                 = ユーザー
infomanager.javaSysNormal.virtualMachine       = 仮想マシン
infomanager.svrInfoHelp.body                   = このページでは、サーバーの稼働時間と JVM が使用しているリソースを表示します。
infomanager.svrInfoNormal.architecture         = アーキテクチャー
infomanager.svrInfoNormal.availableProcessors  = 使用可能なプロセッサー数
infomanager.svrInfoNormal.build                = ビルド
infomanager.svrInfoNormal.cookiesMustBenabled  = エラー : Cookie を有効にしてください
infomanager.svrInfoNormal.currentMemoryUsed    = 現在のメモリー使用量
infomanager.svrInfoNormal.java                 = Java
infomanager.svrInfoNormal.javaVendor           = Java ベンダー
infomanager.svrInfoNormal.javaVersion          = Java バージョン
infomanager.svrInfoNormal.jvm                  = JVM
infomanager.svrInfoNormal.locale               = ロケール
infomanager.svrInfoNormal.mostMemoryUsed       = 最大メモリー使用量
infomanager.svrInfoNormal.node                 = ノード
infomanager.svrInfoNormal.notAvailable         = 使用できません
infomanager.svrInfoNormal.operatingSystem      = オペレーティング・システム
infomanager.svrInfoNormal.os                   = オペレーティング・システム
infomanager.svrInfoNormal.os.arch              = アーキテクチャー
infomanager.svrInfoNormal.os.locale            = ロケール
infomanager.svrInfoNormal.os.name              = 名前
infomanager.svrInfoNormal.os.patchlevel        = パッチ・レベル
infomanager.svrInfoNormal.os.version           = バージョン
infomanager.svrInfoNormal.patchLevel           = パッチ・レベル
infomanager.svrInfoNormal.server               = サーバー
infomanager.svrInfoNormal.startTime            = 始動時刻
infomanager.svrInfoNormal.totalMemoryAllocated = 総メモリー割り当て
infomanager.svrInfoNormal.upTime               = 稼働時間
infomanager.svrInfoNormal.vendorInfo           = ベンダー情報
infomanager.svrInfoNormal.version              = バージョン

keystore.certificateDetails.backToKeystore     = 鍵ストアに戻る
keystore.certificateDetails.certificateInfo    = 認証情報
keystore.certificateDetails.changeKeyPwd       = 鍵のパスワードを変更
keystore.certificateDetails.criticalExt        = クリティカルな拡張
keystore.certificateDetails.deleteEntry        = エントリーの削除
keystore.certificateDetails.generateCSR        = 証明書署名要求の生成
keystore.certificateDetails.importCAReply      = 認証局の応答をインポート
keystore.certificateDetails.nonCriticalExt     = クリティカルでない拡張
keystore.certificateDetails.publicKeyAlg       = 公開鍵アルゴリズム
keystore.certificateDetails.reallyDelete       = {0} を除去しますか?
keystore.certificateDetails.signatureAlg       = 署名アルゴリズム
keystore.certificateDetails.validFrom          = 有効開始
keystore.certificateDetails.validTo            = 有効終了
keystore.changePassword.changePassword         = パスワードの変更
keystore.changePassword.changePwdForKeystore   = 鍵ストアのパスワードを変更
keystore.changePassword.changePwdForPriKey     = 秘密鍵のパスワードを変更
keystore.changePassword.confirmPassword        = 新規パスワードの確認
keystore.changePassword.newPassword            = 新規パスワード
keystore.changePassword.oldPassword            = 旧パスワード
keystore.common.alias                          = 別名
keystore.common.emptyText                      = フォーカスされている項目は空欄にできません。
keystore.common.identity                       = ID
keystore.common.integer                        = フォーカスされている項目は数値である必要があります。
keystore.common.issuer                         = 発行者
keystore.common.keyType                        = 鍵タイプ
keystore.common.keystore                       = 鍵ストア
keystore.common.passwordMismatch               = パスワードが一致していません。
keystore.common.serialNumber                   = シリアル番号
keystore.common.subject                        = サブジェクト
keystore.common.trustedCertificate             = 信頼された証明書
keystore.common.unlockKeystore                 = 鍵ストアのロックを解除
keystore.common.unlockPrivateKey               = 秘密鍵のロックを解除
keystore.common.validity                       = 正当性
keystore.common.version                        = バージョン
keystore.configureKey.algorithm                = アルゴリズム
keystore.configureKey.aliasForKey              = 新しい鍵の別名
keystore.configureKey.certificateIdentity      = 証明書 ID
keystore.configureKey.city_Locality            = 都市/地域
keystore.configureKey.company_Org              = 会社/組織
keystore.configureKey.country_Code             = 国コード
keystore.configureKey.division_BusinessUnit    = 部門/事業部
keystore.configureKey.keySize                  = 鍵サイズ
keystore.configureKey.passwordForKey           = 新規の鍵のパスワード
keystore.configureKey.reviewKeyData            = 鍵情報の確認
keystore.configureKey.serverHostname           = サーバー名
keystore.configureKey.state_Province           = 州/地域
keystore.configureKey.title                    = この画面では、新規の秘密鍵を生成するための設定を構成できます。次の画面で入力した情報を確認した後、秘密鍵と証明書が生成されます。
keystore.configureKey.validFor                 = 有効期間 (日)
keystore.confirmCertificate.certificateDetails = 証明書の詳細
keystore.confirmCertificate.fingerprint        = 指紋
keystore.confirmCertificate.importCertificate  = 証明書のインポート
keystore.confirmCertificate.title              = インポートする証明書が正しいかを確認してください:
keystore.confirmKey.generateKey                = 鍵の生成
keystore.confirmKey.title                      = 生成する鍵の情報が正しいかどうかを確認してください:
keystore.createKeystore.createKeystore         = 鍵ストアの作成
keystore.createKeystore.keystoreFileName       = 鍵ストアのファイル名
keystore.createKeystore.passwordForKeystore    = 新規の鍵ストアのパスワード
keystore.createKeystore.type                   = 鍵ストアの種類
keystore.generateCSR.PKCS10CertificatioRequest = PKCS10 証明書要求
keystore.importCAReply.PKCS7CertificateReply   = PKCS7 証明書応答
keystore.importCAReply.pasteHere               = ...エンコードされた pkcs7 証明書応答をここに貼り付けてください...
keystore.index.available                       = 使用可能
keystore.index.contents                        = コンテンツ
keystore.index.continueLocking                 = この鍵ストアは使用中です。この鍵ストアをロックすると、サーバーが始動しなくなる可能性があります。続けますか?
keystore.index.editable                        = 編集可能
keystore.index.explanation                     = 鍵ストアの設定は、開いた時点ではロックされていて編集できません、また、サーバー上の他のコンポーネントから使用することも出来ません。<b>編集可能</b>フラグは、鍵ストアが (パスワードを入力後) 編集可能になっているかどうかを表します。編集可能になっていれば、その状態は現在のログイン・セッション中は維持されます。<b>使用可能</b>フラグは、鍵ストアをサーバー上の他のコンポーネントから使用できるようにパスワードが保存されているかを表します。
keystore.index.keystoreFile                    = 鍵ストア・ファイル
keystore.index.keystoreLocked                  = 鍵ストアはロック中です
keystore.index.locked                          = ロック中
keystore.index.newKeystore                     = 新規の鍵ストア
keystore.index.noKeystores                     = 鍵ストアは存在しません
keystore.index.title                           = ここでは、(Web コンテナーなどの) SSL コネクターで使用するための鍵ストアを構成することができます。
keystore.index.type                            = タイプ
keystore.index.unlocked                        = ロック解除
keystore.unlockKey.title                       = 鍵ストアはロック解除されました。しかし、SSL を正しく動作させるには、鍵ストア内の秘密鍵もロックを解除する必要があります。鍵ストアにある秘密鍵のパスワードを入力してください。
keystore.unlockKey.unlockPrivateKey            = 秘密鍵のロック解除
keystore.unlockKeystore.enterKeystorePassword  = 鍵ストアのパスワードを入力してください
keystore.uploadCertificate.aliasForCertificate = 証明書の別名
keystore.uploadCertificate.pasteHere           = ...信頼する証明書のテキストをここに貼り付けてください...
keystore.uploadCertificate.reviewCertificate   = 証明書の確認
keystore.uploadCertificate.title               = この画面では、証明書を鍵ストアにインポートすることができます。証明書ファイルの内容をテキストエリアに貼り付けて、証明書の別名を入力してください。次の画面で、入力した内容を確認してください。
keystore.viewKeystore.addtrustCertificate      = 信頼する証明書の追加
keystore.viewKeystore.certificateFingerprint   = 証明書の指紋
keystore.viewKeystore.changePassword           = 鍵ストアのパスワードを変更
keystore.viewKeystore.createprivateKey         = 秘密鍵の作成
keystore.viewKeystore.privateKey               = 秘密鍵
keystore.viewKeystore.returnToKeystoreList     = 鍵ストアの一覧へ戻る
keystore.viewKeystore.title                    = この画面では、鍵ストアの内容を表示します。

logmanager.common.configFile                      = 構成ファイル
logmanager.common.emptyText                       = フォーカスされている項目は空欄にできません。
logmanager.common.filterCriteria                  = フィルター条件
logmanager.common.integer                         = フォーカスされている項目は数値である必要があります。
logmanager.common.logLevel                        = ログ・レベル<i>
logmanager.common.refreshPeriod                   = 更新間隔
logmanager.common.refreshPeriodTooShort           = リフレッシュの間隔は 5 秒以上である必要があります。
logmanager.common.title                           = <b>注意:</b> 更新された値は現在実行中のサーバーでのみ有効で、一旦サーバーが停止するとデフォルトの値に戻ります。構成ファイルの値は、<i>org.apache.geronimo.log4jservice.configuration</i>  システム・プロパティにより上書きされます。
logmanager.help.configFileExplanation             = 構成ファイル欄にファイル名を入力すると、別の構成ファイルを使用することができます。
logmanager.help.introduction                      = <p>このポートレットでは、一時的にログ構成ファイルを選択し、ログ・レベルや更新間隔を変更することができます。デフォルトの &quot;構成ファイル&quot; は、標準的な log4j の形式で、ログを記録する場所を定義します。また、構成ファイルは、ログ・レベルや最大ログ・ファイルサイズ、その他の属性を定義します。<br> <br>   管理コンソールでは、Geronimo ログファイルの内容を次のサーバー・ログ・ビューアーのポートレットに表示することができます。</p>
logmanager.help.logLevelExplanation               = ドロップダウン・リストからログ・レベルを指定することができます。
logmanager.help.refreshPeriodExplanation          = デフォルトでは Geronimo はデフォルトでは構成ファイルの変更を 60 秒毎に確認します。更新間隔は変更することもできます。
logmanager.help.resetExplanation                  = &quot;構成ファイル&quot; 、&quot; 更新間隔&quot; 、&quot;ログ・レベル&quot; を最後の&quot;更新&quot; 時の値にリセットします。Geronimo サーバーのデフォルト値に戻る訳ではありません。
logmanager.help.updateExplanation                 = 変更を次の再始動までの間、有効にします。
logmanager.search.containingText                  = 検索文字列
logmanager.search.fileterLog                      = フィルター
logmanager.search.go                              = 実行
logmanager.search.level                           = レベル
logmanager.search.lines                           = 行
logmanager.search.maxResults                      = 最大表示数
logmanager.search.messagesMatched                 = ログ・ファイルの総メッセージ数 {0} 件のうち、{1} 件が条件に一致しました。
logmanager.search.noLogs                          = 該当するログが見つかりませんでした。
logmanager.search.numberOfResultsCapped           = 結果の表示件数には上限があります
logmanager.search.to                              = から
logmanager.search.withExceptions                  = 例外も表示
logmanager.viewhelp.filterResults                 = フィルター表示
logmanager.viewhelp.filterResultsExplanationFrag1 = ログのフィルタリング条件を設定することができます。それにより、ログの最初から最後までの中で、任意の行を表示できます。ただし、ブラウザーの制限により、すべてを一度に表示できないことがあります。
logmanager.viewhelp.filterResultsExplanationFrag2 = 表示するログ・レベルを指定することができます。
logmanager.viewhelp.filterResultsExplanationFrag3 = また、文字列を指定して検索することもできます。
logmanager.viewhelp.introduction                  = このポートレットでは、Geronimo サーバーのログを表示でき、管理コンソールやデプロイされたアプリケーションのデバッグに役立ちます。
logmanager.viewhelp.refreshExplanation            = 管理コンソールのデフォルトの設定をリセットし、ログ・ファイルの最新の 11 行を表示します。

repository.help.addDependencyElement       = アプリケーション内でアーティファクトを使用するには、デプロイメント・プランに dependency 要素を追加してください。例えば、Castor XML を使用するには、プランに以下の XML を追加してください。
repository.help.browseExplanation          = 追加するアーティファクトを選択するには、参照 (Browse) ボタンをクリックしてください。
repository.help.installExplanation         = アーティファクトをインストールするには、このボタンをクリックしてください。
repository.help.title                      = このページでは、サーバーのリポジトリーにインストールされているアーティファクトを表示します。リポジトリーのレイアウトは、Apache Maven で使われているものと同じなので、簡単にファイルをコピーしてくることができます。Geronimo のコンソールは、アーティファクトを追加する方法を提供します。
repository.normal.addArchiveToRepository   = アーカイブをリポジトリーに追加
repository.normal.artifact                 = アーティファクト
repository.normal.currentRepositoryEntries = 現在のリポジトリー・エントリー
repository.normal.emptyText                = フォーカスされている項目は空欄にできません。
repository.normal.invalidChar              = フォーカスされている項目に無効な文字が含まれています。
repository.normal.replacedName             = 置換コンポーネント名
repository.normal.replacedNameDescription  = 実行中に置換する既存のコンポーネント名を指定してください。コンポーネント名は、グループ ID/アーティファクト ID/バージョン/タイプのように指定します。特に不要であれば、フィールドを空欄のままにしてください。
repository.normal.title                    = アーカイブをリポジトリーに追加
repository.normal.toViewUsage              = 使用方法を表示するには、エントリーをクリックしてください。
repository.usage.content                   = <b>{0}</b> をアプリケーションやモジュール内で使用するには、以下のようにデプロイメント・プランの dependencies 要素配下に dependency 要素を追加してください。
repository.usage.title                     = {0} の使用方法

securityrealmmanager.common.add                            = 追加
securityrealmmanager.common.emptyText                      = フォーカスされている項目は空欄にできません。
securityrealmmanager.common.groupNameExp                   = グループ名
securityrealmmanager.common.passwordMismatch               = パスワードが一致していません。
securityrealmmanager.common.remove                         = 削除
securityrealmmanager.common.update                         = 更新
securityrealmmanager.derby.groups.addmaximized.addGroup    = グループの追加
securityrealmmanager.derby.groups.addmaximized.noUsers     = 使用可能なユーザーは存在しません。
securityrealmmanager.derby.groups.addmaximized.updateGroup = グループの更新
securityrealmmanager.derby.groups.help.addNewGroupBtnExp   = このボタンをクリックすると、新規グループが作成されます。新規グループにユーザーを配置する場合、&quot;追加&quot; をクリックすると、選択されたユーザーとともに新規グループが追加されます。
securityrealmmanager.derby.groups.help.cancelUserBtnExp    = 新規グループの作成をキャンセルして前のページに戻りますか。
securityrealmmanager.derby.groups.help.descriptionExp      = グループの説明。
securityrealmmanager.derby.groups.help.title               = このポートレットは、すべてのコンソール・レルム・グループを表示し、追加、修正、除去することができます。新規グループを追加するには、&quot;新規グループの作成&quot; をクリックして、必要な項目を入力してください。既に存在するグループを修正するには、そのグループのリンクをクリックして、必要な項目を修正してください。グループを除去するには、&quot;除去&quot; リンクをクリックください。<br>  <br>&quot;新規グループの作成&quot; リンクをクリックして、必要な項目を入力し、&quot;追加&quot; ボタンをクリックすると、新規グループを作成することができます。
securityrealmmanager.derby.groups.help.usersExp            = 左側のボックスには、現在のすべてのユーザーが一覧表示されます。ユーザーを選択し、&quot;追加&gt;&gt;&quot; ボタンをクリックすると、ユーザーをグループに追加できます。右側のボックスからユーザーを選択し、&quot;追加&gt;&gt;&quot; ボタンをクリックすると、ユーザーをグループから除去することができます。
securityrealmmanager.derby.groups.maximized.createNewGroup = 新規グループの作成
securityrealmmanager.derby.users.addmaximized.addUser      = ユーザーの追加
securityrealmmanager.derby.users.addmaximized.updateUser   = ユーザーの更新
securityrealmmanager.derby.users.help.addUserBtnExp        = 新規ユーザーを追加するには、&quot;追加&quot; ボタンをクリックしてください。
securityrealmmanager.derby.users.help.cancelUserBtnExp     = 新規ユーザーの追加をキャンセルするには、&quot;追加&quot; ボタンをクリックする前にこのボタンをクリックしてください。
securityrealmmanager.derby.users.help.confirmPasswordExp   = 新規ユーザーのパスワードを再入力
securityrealmmanager.derby.users.help.createUserBtnExp     = このボタンをクリックすると、新規ユーザーが作成され、&quot;コンソール・レルム・ユーザー&quot;ページに戻ります。そこに新規ユーザーが一覧表示されます。
securityrealmmanager.derby.users.help.departmentExp        = ユーザーの部署
securityrealmmanager.derby.users.help.emailExp             = ユーザーのEメールアドレス
securityrealmmanager.derby.users.help.familyNameExp        = ユーザーの姓
securityrealmmanager.derby.users.help.givenNameExp         = ユーザーの名
securityrealmmanager.derby.users.help.passwordExp          = 新規ユーザーのパスワード
securityrealmmanager.derby.users.help.title                = このページは、すべてのアプリケーション・レルム・ユーザーを表示し、追加、修正、除去することができます。新規ユーザーを追加するには、&quot;新規ユーザーの作成&quot; をクリックして、必要な項目を入力してください。既に存在するユーザーを修正するには、そのユーザーのリンクをクリックして、必要な項目を修正してください。ユーザーを除去するには、&quot;除去&quot; リンクをクリックしてください。<br>  <br>&quot;新規ユーザーの作成&quot; リンクをクリックして、必要な項目を入力し、&quot;追加&quot; ボタンをクリックすると、新規ユーザーを追加することができます。各項目の意味は、以下の通りです:
securityrealmmanager.derby.users.help.usernameExp          = ユーザー名
securityrealmmanager.derby.users.maximized.createNewUser   = 新規ユーザーの作成
securityrealmmanager.se.groups.addmaximized.addGroup       = グループの追加
securityrealmmanager.se.groups.addmaximized.updateGroup    = グループの更新
securityrealmmanager.se.groups.help.addNewGroupBtnExp      = このボタンをクリックすると、新規グループが作成されます。新規グループにユーザーを配置する場合、&quot;追加&quot; をクリックすると、選択されたユーザーとともに新規グループが追加されます。
securityrealmmanager.se.groups.help.cancelNewGroupBtnExp   = 現在の操作をキャンセル。
securityrealmmanager.se.groups.help.title                  = このポートレットは、すべてのコンソール・レルム・グループを表示し、追加、修正、除去することができます。新規グループを追加するには、&quot;新規グループの作成&quot; をクリックして、必要な項目を入力してください。既に存在するグループを修正するには、そのグループのリンクをクリックして、必要な項目を修正してください。グループを除去するには、&quot;除去&quot; リンクをクリックしてください。<br>  <br>&quot;新規グループの作成&quot; リンクをクリックすると、新規グループを作成することができます。各項目の意味は、以下の通りです:
securityrealmmanager.se.groups.help.usersExp               = 左側のボックスには、現在のすべてのユーザーが一覧表示されます。ユーザーを選択し、&quot;追加&gt;&gt;&quot; ボタンをクリックすると、ユーザーをグループに追加できます。右側のボックスからユーザーを選択し、&quot;除去&gt;&gt;&quot; ボタンをクリックすると、ユーザーをグループから除去することができます。
securityrealmmanager.se.groups.maximized.createNewGroup    = 新規グループの作成
securityrealmmanager.se.groups.maximized.createNewUser     = 新規ユーザーの作成
securityrealmmanager.se.groups.maximized.noUsers           = 使用可能なユーザーは存在しません。
securityrealmmanager.se.groups.maximized.updateGroup       = グループの更新
securityrealmmanager.se.users.addmaximized.addGroup        = グループの追加
securityrealmmanager.se.users.addmaximized.addUser         = ユーザーの追加
securityrealmmanager.se.users.addmaximized.updateUser      = ユーザーの更新
securityrealmmanager.se.users.help.cancelUserBtnExp        = 現在の操作をキャンセル。
securityrealmmanager.se.users.help.confirmPasswordExp      = 新規ユーザーのパスワードを再入力
securityrealmmanager.se.users.help.createUserBtnExp        = このボタンをクリックすると、新規ユーザーが作成され、&quot;コンソール・レルム・ユーザー&quot;ページに戻ります。そこに新規ユーザーが一覧表示されます。
securityrealmmanager.se.users.help.passwordExp             = 新規ユーザーのパスワード
securityrealmmanager.se.users.help.title                   = このポートレットは、すべてのコンソール・レルム・ユーザーを表示し、追加、修正、削除することができます。新規ユーザーを追加するには、&quot;新規ユーザーの作成&quot; をクリックして、必要な項目を入力してください。既に存在するユーザーを修正するには、そのユーザー名のリンクをクリックして、必要な項目を修正してください。ユーザーを除去するには、&quot;除去&quot; リンクをクリックして下さい。<br>  <br>&quot;新規ユーザーの作成&quot; リンクをクリックすると、新規ユーザーを作成することができます。各項目の意味は、以下の通りです:
securityrealmmanager.se.users.help.usernameExp             = ユーザー名。
securityrealmmanager.se.users.maximized.createNewUser      = 新規ユーザーの作成

servermanager.help.shutdownHelpBody   = <p>管理者はこのポートレットから Geronimo サーバを遠隔操作でシャットダウンすることができます。</p><p>これにより、サーバーはシャットダウンされ、JVM は停止します。管理コンソールを使用し続けるには、再度 Geronimo サーバーを始動する必要があります。</p>
servermanager.normal.cancel           = &nbsp;キャンセル&nbsp;
servermanager.normal.comfirmMsg01     = サーバーをシャットダウンしますか (最終確認) ?
servermanager.normal.ok               = &nbsp;&nbsp;&nbsp;OK&nbsp;&nbsp;&nbsp;
servermanager.normal.proceedOnlyIf    = サーバーを強制終了する場合のみ続行してください。
servermanager.normal.shutdown         = シャットダウン
servermanager.normal.warning          = 警告: サーバーをシャットダウンすると、管理コンソールは使えなくなります!
servermanager.shutdown.shutdownIssued = サーバーのシャットダウン要求が実行されました。

threads.list.title                        = このページには、Geronimo サーバーに定義されているスレッド・プールが一覧表示されます。<br>\r<i>注意: 現在は、Geronimo で使用されているすべてのスレッドが、これらのスレッド・プールに含まれるわけではありません。現在、我々は Geronimo の別のコンポーネットをこれらのスレッド・プール向けに移行作業中です。</i>
threads.monitor.currentConsumersOfThreads = このプール内にあるスレッドの使用者
threads.monitor.description               = 説明
threads.monitor.highestRecorded           = 最高記録
threads.monitor.lowestRecorded            = 最低記録
threads.monitor.ofThreads                 = スレッド番号
threads.monitor.poolMax                   = プールの最大値
threads.monitor.threadsInUse              = 使用中のスレッド数
threads.monitor.title                     = {0} スレッドプールの統計:

webaccesslogmanager.common.authenticatedUser  = 認証ユーザー
webaccesslogmanager.common.filterLog          = ログのフィルター
webaccesslogmanager.common.from               = 開始 (MM/DD/YYYY)
webaccesslogmanager.common.ignoreDates        = 日付の指定を無視する
webaccesslogmanager.common.mmddyyyy           = フォーカスされている項目は MM/DD/YYYY 形式の日付である必要があります。
webaccesslogmanager.common.remoteAddress      = リモート・アドレス
webaccesslogmanager.common.request            = リクエスト
webaccesslogmanager.common.requestMethod      = リクエスト・メソッド
webaccesslogmanager.common.requestedURI       = リクエスト URI
webaccesslogmanager.common.to                 = 終了 (MM/DD/YYYY)
webaccesslogmanager.help.authenticatedUserExp = ユーザー名、例えば &quot;system.&quot;。
webaccesslogmanager.help.fromTo               = 開始/終了
webaccesslogmanager.help.fromToExp            = 指定された期間のログを表示します。\r\n
webaccesslogmanager.help.ignoreDatesExp       = このチェックボックスをチェックすると、日付によるフィルターを行いません。すべてのログは、その他のフィルター条件に基づいて表示されます。\r\n
webaccesslogmanager.help.refreshExp           = 指定したフィルター条件のまま、ログの表示を更新する\r\n
webaccesslogmanager.help.remoteAddressExp     = IP アドレスによって、リモート・ホストを指定することができます。例： 192.168.1.1\r\n
webaccesslogmanager.help.requestMethodExp     = 表示するメソッド (&quot;ANY&quot;、&quot;POST&quot;、&quot;GET&quot;) をドロップダウン・リストで指定することができます。\r\n
webaccesslogmanager.help.requestedURIExp      = 特定の URI のみ表示するように指定できます、例： http://localhost:8080/cviewer/jsp/viewclass.jsp\r\n
webaccesslogmanager.help.title                = このポートレッドでは、Jetty のログファイルを指定した条件で表示することができます。Jetty のログファイルには、HTTP アクセスと Geronimo 上の JSP やサーブレットからのメッセージが含まれています。デフォルトでは、現在日付のログを表示します。フィルター条件を指定することで、特定の日付のログを表示することもでき、以下の条件から任意のものを組み合わせて指定することもできます。
webaccesslogmanager.view.container            = コンテナー
webaccesslogmanager.view.filterResults        = フィルター結果
webaccesslogmanager.view.foundMatches         = ログ・ファイル内で一致した {0} 行 ({1} 行中)。
webaccesslogmanager.view.go                   = 実行
webaccesslogmanager.view.identity             = ID
webaccesslogmanager.view.ignoreDates          = 日付を無視
webaccesslogmanager.view.maxResults           = 最大結果数
webaccesslogmanager.view.noLogEntries         = ログは見つかりませんでした。
webaccesslogmanager.view.request              = リクエスト
webaccesslogmanager.view.resultSize           = リクエスト・サイズ
webaccesslogmanager.view.searchResult         = ログ・ファイル内で一致した {0} 行 ({1} 行中)。
webaccesslogmanager.view.searchWebContainer   = Web コンテナーを検索
webaccesslogmanager.view.searchWebLog         = Web ログを検索
webaccesslogmanager.view.startResult          = 検索開始位置
webaccesslogmanager.view.wrongDate            = 終了日は開始日より後の日付である必要があります。

webmanager.common.HTTPSAlgorithm                         = HTTPS Algorithm
webmanager.common.HTTPSProtocol                          = HTTPS Protocol
webmanager.common.SSLSettings                            = SSL Settings
webmanager.common.acceptCount                            = AcceptCount
webmanager.common.acceptCountExp                         = The maximum queue length for incoming connection requests when all possible request processing threads are in use. Any requests received when the queue is full will be refused. The default value is 10.
webmanager.common.all                                    = all
webmanager.common.allowTrace                             = AllowTrace
webmanager.common.bufferSize                             = BufferSize
webmanager.common.bufferSizeExp                          = The size (in bytes) of the buffer to be provided for input streams created by this connector. By default, buffers of 2048 bytes will be provided.
webmanager.common.ciphers                                = Ciphers
webmanager.common.ciphersExp                             = A comma separated list of the encryption ciphers that may be used. If not specified, then any available cipher may be used.
webmanager.common.clientAuthRequired                     = Client Auth Required
webmanager.common.compressableMimeType                   = CompressableMimeType
webmanager.common.compressableMimeTypeExp                = The value is a comma separated list of MIME types for which HTTP compression may be used. The default value is text/html,text/xml,text/plain.
webmanager.common.compression                            = Compression
webmanager.common.compressionExp                         = The Connector may use HTTP/1.1 GZIP compression in an attempt to save server bandwidth. The acceptable values for the parameter is "off" (disable compression), "on" (allow compression, which causes text data to be compressed), "force" (forces compression in all cases), or a numerical integer value (which is equivalent to "on", but specifies the minimum amount of data before the output is compressed). If the content-length is not known and compression is set to "on" or more aggressive, the output will also be compressed. If not specified, this attribute is set to "off".
webmanager.common.confirmPassword                        = Confirm Password
webmanager.common.connectionLinger                       = ConnectionLinger
webmanager.common.connectionLingerExp                    = The number of milliseconds during which the sockets used by this Connector will linger when they are closed. The default value is -1 (socket linger is disabled).
webmanager.common.connectionTimeout                      = ConnectionTimeout
webmanager.common.connectionTimeoutExp                   = The number of milliseconds this Connector will wait, after accepting a connection, for the request URI line to be presented. The default value is 60000 (i.e. 60 seconds).
webmanager.common.disableUploadTimeout                   = DisableUploadTimeout
webmanager.common.disableUploadTimeoutExp                = This flag allows the servlet container to use a different, longer connection timeout while a servlet is being executed, which in the end allows either the servlet a longer amount of time to complete its execution, or a longer timeout during data upload. If not specified, this attribute is set to "true".
webmanager.common.emptySessionPath                       = EmptySessionPath
webmanager.common.emptySessionPathExp                    = If checked, all paths for session cookies will be set to /.\r\n
webmanager.common.emptyText                              = フォーカスされている項目は空欄にできません。
webmanager.common.enableLookups                          = EnableLookups
webmanager.common.enableLookupsExp                       = Check if you want calls to request.getRemoteHost() to perform DNS lookups in order to return the actual host name of the remote client.  By default, DNS lookups are enabled.
webmanager.common.fields                                 = fields
webmanager.common.host                                   = Host
webmanager.common.hostExp                                = The host name or IP to bind to. The normal values are <tt>0.0.0.0</tt> (all interfaces) or <tt>localhost</tt> (local connections only)
webmanager.common.integer                                = フォーカスされている項目は数値である必要があります。
webmanager.common.keepAliveTimeout                       = KeepAliveTimeout
webmanager.common.keepAliveTimeoutExp                    = The number of milliseconds this Connector will wait, subsequent request before closing the connection. The default value is to use the value that has been set for the connectionTimeout.
webmanager.common.keyStore                               = Key Store
webmanager.common.keystoreFile                           = Keystore File
webmanager.common.keystorePassword                       = Keystore Password
webmanager.common.keystoreType                           = Keystore Type
webmanager.common.list                                   = list
webmanager.common.listConnectors                         = コネクターの一覧
webmanager.common.maxHttpHeaderSize                      = MaxHttpHeaderSize
webmanager.common.maxHttpHeaderSizeExp                   = The maximum size of the request and response HTTP header, specified in bytes. If not specified, this attribute is set to 4096 (4 KB).
webmanager.common.maxKeepAliveRequests                   = MaxKeepAliveRequests
webmanager.common.maxKeepAliveRequestsExp                = The maximum number of HTTP requests which can be pipelined until the connection is closed by the server. Setting this attribute to 1 will disable HTTP/1.0 keep-alive, as well as HTTP/1.1 keep-alive and pipelining. Setting this to -1 will allow an unlimited amount of pipelined or keep-alive HTTP requests. If not specified, this attribute is set to 100.
webmanager.common.MaxParameterCount                      = MaxParameterCount
webmanager.common.MaxParameterCountExp                   = The maximum number of parameters (GET plus POST) which will be automatically parsed by the container. 10000 by default. A value of less than 0 means no limit.
webmanager.common.maxPostSize                            = MaxPostSize
webmanager.common.maxPostSizeExp                         = The maximum size in bytes of the POST which will be handled by the container FORM URL parameter parsing. The limit can be disabled by setting this attribute to a value less than or equal to 0. Default value is 2097152 (2 megabytes)
webmanager.common.maxSavePostSize                        = MaxSavePostSize
webmanager.common.maxSavePostSizeExp                     = The maximum size in bytes of the POST which will be saved/buffered by the container during FORM or CLIENT-CERT authentication. The limit can be disabled by setting this attribute to -1. Setting the attribute to zero will disable the saving of POST data during authentication . Default value is 4096 (4 kilobytes).
webmanager.common.maxSpareThreads                        = MaxSpareThreads
webmanager.common.maxSpareThreadsExp                     = The maximum number of unused request processing threads that will be allowed to exist until the thread pool starts stopping the unnecessary threads. The default value is 50.
webmanager.common.maxThreads                             = Max Threads
webmanager.common.maxThreadsExp                          = The maximum number of threads this connector should use to handle incoming requests
webmanager.common.minSpareThreads                        = MinSpareThreads
webmanager.common.minSpareThreadsExp                     = The number of request processing threads that will be created when this Connector is first started. The connector will also make sure it has the specified number of idle processing threads available. This attribute should be set to a value smaller than that set for maxThreads. The default value is 4.
webmanager.common.minThreads                             = Min Threads
webmanager.common.minThreadsExp                          = The minimum number of threads this connector should use to handle incoming requests
webmanager.common.noCompressionUserAgents                = NoCompressionUserAgents
webmanager.common.noCompressionUserAgentsExp             = The value is a comma separated list of regular expressions matching user-agents of HTTP clients for which compression should not be used, because these clients, although they do advertise support for the feature, have a broken implementation. The default value is an empty String (regexp matching disabled).
webmanager.common.port                                   = ポート
webmanager.common.portExp                                = The network port to bind to.
webmanager.common.protocol                               = プロトコル
webmanager.common.proxyName                              = ProxyName
webmanager.common.proxyNameExp                           = If this Connector is being used in a proxy configuration, configure this attribute to specify the server name to be returned for calls to request.getServerName().
webmanager.common.proxyPort                              = ProxyPort
webmanager.common.proxyPortExp                           = If this Connector is being used in a proxy configuration, configure this attribute to specify the server port to be returned for calls to request.getServerPort().
webmanager.common.redirectPort                           = RedirectPort
webmanager.common.redirectPortExp                        = If this Connector is supporting non-SSL requests, and a request is received for which a matching <security-constraint> requires SSL transport, Catalina will automatically redirect the request to the port number specified here.
webmanager.common.restrictedUserAgents                   = RestrictedUserAgents
webmanager.common.restrictedUserAgentsExp                = The value is a comma separated list of regular expressions matching user-agents of HTTP clients for which HTTP/1.1 or HTTP/1.0 keep alive should not be used, even if the clients advertise support for these features. The default value is an empty String (regexp matching disabled).
webmanager.common.server                                 = Server
webmanager.common.serverExp                              = The Server header for the http response. Unless your paranoid, you won't need this feature. (No offense.  The description is taken from Tomcat documentation.)
webmanager.common.show                                   = Show
webmanager.common.showAllFieldsExp                       = Check this box to view and configure all attributes.  Uncheck to hide. Note: Hiding will not remove the field values.\r\n\r\n
webmanager.common.socketBuffer                           = SocketBuffer
webmanager.common.socketBufferExp                        = The size (in bytes) of the buffer to be provided for socket output buffering. -1 can be specified to disable the use of a buffer. By default, a buffers of 9000 bytes will be used.
webmanager.common.strategy                               = Strategy
webmanager.common.strategyExp                            = The thread pooling strategy which will be used. The default strategy does not use a master thread, but a more conventional strategy using a master listener thread can be used by setting "ms" as this attribute's value. The master strategy will work significantly better using the threadPriority attribute, which will apply only to the thread which listens on the server socket. This is set to lf by default.
webmanager.common.string                                 = String
webmanager.common.tcpNoDelay                             = TcpNoDelay
webmanager.common.tcpNoDelayExp                          = If checked, the TCP_NO_DELAY option will be set on the server socket, which improves performance under most circumstances.
webmanager.common.threadPriority                         = ThreadPriority
webmanager.common.threadPriorityExp                      = The priority of the request processing threads within the JVM. The default value is java.lang.Thread#NORM_PRIORITY. See the JavaDoc for the java.lang.Thread class for more details on what this priority means.
webmanager.common.traceExp                               = Check to enable the TRACE HTTP method.
webmanager.common.trustStore                             = Trust Store
webmanager.common.truststoreFile                         = Truststore File
webmanager.common.truststorePassword                     = Truststore Password
webmanager.common.truststoreType                         = Truststore Type
webmanager.common.uniqueName                             = Unique Name
webmanager.common.uniqueNameExp                          = サーバ上の他のコネクタと異なる一意の名前 (空白は含めないこと)
webmanager.common.uriEncoding                            = URIEncoding
webmanager.common.uriEncodingExp                         = This specifies the character encoding used to decode the URI bytes, after %xx decoding the URL. Default is ISO-8859-1.
webmanager.common.useBodyEncodingForURI                  = UseBodyEncodingForURI
webmanager.common.useBodyEncodingForURIExp               = Check this if the encoding specified in contentType should be used for URI query parameters, instead of using the URIEncoding.
webmanager.common.useIPVHosts                            = UseIPVHosts
webmanager.common.useIPVHostsExp                         = Check this to cause Tomcat to use the IP address that the request was recieved on to determine the Host to send the request to.
webmanager.common.xPoweredBy                             = XpoweredBy
webmanager.common.xPoweredByExp                          = Check this to cause Tomcat to advertise support for the Servlet specification using the header recommended in the specification.
webmanager.connector.editConnector.JettyManagerImpl.30   = バインドするホスト名または IP。通常の値は 0.0.0.0 (すべてのインタフェース) もしくはローカルホスト (ローカル接続のみ) です
webmanager.connector.editConnector.JettyManagerImpl.32   = バインドするネットワーク・ポート。
webmanager.connector.editConnector.JettyManagerImpl.34   = 受信するリクエストをハンドルするためにこのコネクターが使用するスレッドの最大数
webmanager.connector.editConnector.JettyManagerImpl.36   = 入出力バッファーのバイト・サイズ。
webmanager.connector.editConnector.JettyManagerImpl.38   = 使用可能なスレッドがない場合にキューに対して受け入れできない最大接続数。
webmanager.connector.editConnector.JettyManagerImpl.40   = ハンドシェイクのクローズ中に接続が待機する最大秒数。
webmanager.connector.editConnector.JettyManagerImpl.42   = 安全な接続に対してリダイレクトするポート。対応しないときは 0 を指定します。
webmanager.connector.editConnector.JettyManagerImpl.44   = ここを設定すると、このコネクターを通したクライアント接続は有効なクライアント証明書を提供する必要があります。
webmanager.connector.editConnector.JettyManagerImpl.47   = サーバーの秘密鍵へアクセスするために使用する鍵ストア
webmanager.connector.editConnector.JettyManagerImpl.50   = 認証局 (CA) の証明書を含め、信頼された証明書を保管している鍵ストア
webmanager.connector.editConnector.JettyManagerImpl.53   = SSL に変更しない限り一部のJVM (IBM) ではポピュラーなブラウザーでは正常に動作しませんが、ここは通常 TLS を設定します。
webmanager.connector.editConnector.JettyManagerImpl.56   = 通常は JVM ベンダーと一致するように設定します。
webmanager.connector.editConnector.JettyManagerImpl.57   = ヘッダー・バッファーのバイト・サイズ。
webmanager.connector.editConnector.TomcatManagerImpl.101 = この属性に true を設定すると、Tomcat はリクエストを送信するホストを決定するためにリクエストが受信した IP アドレスを使用します。
webmanager.connector.editConnector.TomcatManagerImpl.103 = 仕様で推奨されているヘッダーを使用している Servlet 仕様のサポートを Tomcat に通知するには、この属性に true を設定します。
webmanager.connector.editConnector.TomcatManagerImpl.105 = スレッドを処理可能なすべてのリクエストが使用中である時に入ってくる接続のリクエストのキューの最大長。キューが満杯であるときに受信したリクエストは拒否されます。
webmanager.connector.editConnector.TomcatManagerImpl.108 = バインドするホスト名または IP。通常の値は 0.0.0.0 (すべてのインタフェース) もしくはローカルホスト (ローカル接続のみ) です。
webmanager.connector.editConnector.TomcatManagerImpl.11  = クライアントと通信するのに使用するプロトコル。
webmanager.connector.editConnector.TomcatManagerImpl.110 = コネクターによって生成された入力ストリーム用のバッファー・サイズ (バイト単位)。
webmanager.connector.editConnector.TomcatManagerImpl.113 = HTTP 圧縮を使用する MIME タイプのカンマ区切りリストの値。
webmanager.connector.editConnector.TomcatManagerImpl.116 = コネクターがサーバーの帯域をセーブするのを試みる HTTP/1.1 GZIP 圧縮を使用します。パラメーターに指定可能な値は <i>off</i> (圧縮を無効)、<i>on</i> (圧縮を有効化し、テキスト・データを圧縮します)、<i>force</i> (すべてのケースで強制圧縮)、もしくは、整数値 (<i>on</i> と同等だが、出力値を圧縮する前にデータの最小数を指定します)。コンテンツ・レングスがわからなかったり、圧縮を <i>on</i> に設定したり、さらに強力な場合、出力も圧縮されます。
webmanager.connector.editConnector.TomcatManagerImpl.118 = このコネクターで使用するソケットがクローズした時に待機するミリ秒数。デフォルト値は -1 (ソケットの待機は無効) です。
webmanager.connector.editConnector.TomcatManagerImpl.120 = 接続を受け入れた後、このコネクターが URI 行を表現しているリクエストのために待機するミリ秒数。
webmanager.connector.editConnector.TomcatManagerImpl.122 = Executor 要素の名前に対する参照。この属性を有効化すると、名前の付けられた Executor が存在し、コネクターは Executor を使用し、その他のスレッドの属性は無視されます。
webmanager.connector.editConnector.TomcatManagerImpl.124 = コネクターが接続をクローズする前に他の HTTP リクエストを待機するミリ秒数。
webmanager.connector.editConnector.TomcatManagerImpl.126 = このフラグによって、サーブレットの実行中、サーブレット・コンテナーに異なるかつ長い接続タイムアウトの使用でき、最終的に実行完了までに非常に長い時間を要するサーブレットも、データのアップロード中の長いタイムアウトを許可します。
webmanager.connector.editConnector.TomcatManagerImpl.128 = リクエストとレスポンスの HTTP ヘッダーの最大サイズで、バイト単位の値を指定します。
webmanager.connector.editConnector.TomcatManagerImpl.130 = コネクションがサーバーによってクローズされるまでパイプライン化可能な HTTP リクエストの最大数。この属性に 1 を設定すると、HTTP/1.1 キープアライブとパイプラインと同様に、HTTP/1.0 キープアライブを無効化します。ここに -1 を設定すると、無制限のパイプライン数やキープアライブ HTTP リクエストを許可します。
webmanager.connector.editConnector.TomcatManagerImpl.132 = このコネクターで作成されたリクエストを処理するスレッドの最大数で、ハンドル可能な同時リクエストの最大数を決定します。指定しない場合、この属性には 40 が設定されます。Executor がコネクターと関連付けられている場合、この属性は内部スレッド・プールではなく Executor を使ってタスクを実行するコネクターとして無視されます。
webmanager.connector.editConnector.TomcatManagerImpl.134 = 最小スペアー・スレッド数
webmanager.connector.editConnector.TomcatManagerImpl.136 = 最大スペアー・スレッド数
webmanager.connector.editConnector.TomcatManagerImpl.139 = 圧縮を使用しない HTTP クライアントのユーザー・エージェントに一致する正規表現のカンマ区切りリストの値で、これらのクライアントは、たとえ機能のサポートを通知していても、破損された実装を持っているためです。
webmanager.connector.editConnector.TomcatManagerImpl.14  = クライアントと通信するのに使用する Cipher。
webmanager.connector.editConnector.TomcatManagerImpl.141 = サーバー・ソケットを作成し、入ってくる接続を待つコネクターの TCP ポート番号。オペレーティング・システムは、1 つのサーバー・アプリケーションのみに対して、特定の IP アドレスに特定のポート番号を受け入れてくれます。
webmanager.connector.editConnector.TomcatManagerImpl.144 = クライアントがサポートを通知しているにもかかわらず、HTTP/1.1、または、HTTP/1.0 のキープアライブを使用しない HTTP クライアントのユーザー・エージェントに一致する正規表現のカンマ区切りリストです。
webmanager.connector.editConnector.TomcatManagerImpl.147 = HTTP レスポンスのサーバー・ヘッダー。
webmanager.connector.editConnector.TomcatManagerImpl.149 = ソケットの出力バッファリングを提供するためのバッファー・サイズ (バイト単位)。-1 を指定すると、バッファーの使用を無効化します。
webmanager.connector.editConnector.TomcatManagerImpl.151 = true を設定すると、TCP_NO_DELAY オプションがサーバー・ソケットに設定され、大抵の環境でパフォーマンスを改善します。
webmanager.connector.editConnector.TomcatManagerImpl.153 = JVM 内でリクエストを処理するスレッドの優先度
webmanager.connector.editConnector.TomcatManagerImpl.155 = 使用する証明書のエンコーディング・アルゴリズム。
webmanager.connector.editConnector.TomcatManagerImpl.157 = 接続を受け入れる前にクライアントから有効な証明パスを必要とする SSL スタックを求める場合 true を設定します。クライアント証明書を要求する SSL スタックを求める場合もそうしてほしいですが、1 つもない場合は失敗しません。(デフォルトの) false 値は、クライアントがクライアント認証を使用するセキュリティー制約で保護されているリソースをリクエストしない限り、証明パスを必要としません。
webmanager.connector.editConnector.TomcatManagerImpl.160 = (Geronimo_Home/var/catalina ディレクトリー配下にある) 鍵ストアの保管ファイル
webmanager.connector.editConnector.TomcatManagerImpl.162 = 鍵ストアのファイルへのアクセスで使用するパスワードを設定します。またこれは鍵ストア内部にあるサーバーの秘密鍵へアクセスするためのパスワードです (したがって、2 つのパスワードは鍵ストア上で同一値を設定しなければいけません)。
webmanager.connector.editConnector.TomcatManagerImpl.165 = 鍵ストアのタイプを設定します。特に理由がない限り、通常はデフォルト・タイプ (JKS) を使用しません。
webmanager.connector.editConnector.TomcatManagerImpl.167 = この属性を使用すると、コネクターの SSL トラフィックを有効化します。
webmanager.connector.editConnector.TomcatManagerImpl.168 = HTTPS プロトコルを設定します。一部の (IBM) JVM が SSL に変更しない限りポピュラーなブラウザーで正常に動作しなくても、ここには通常 TLS を設定します。
webmanager.connector.editConnector.TomcatManagerImpl.169 = SSLEnabled 値を true に変更すると、正しい request.getScheme() をサーブレットに渡すためにスキーム属性も同様に設定したくなります
webmanager.connector.editConnector.TomcatManagerImpl.17  = サーバー証明書を含むファイル名。フォーマットは PEM エンコードです。
webmanager.connector.editConnector.TomcatManagerImpl.170 = SSLEnabled 値を true に変更すると、正しい request.isSecure() の値をサーブレットに渡すためにセキュアー属性も同様に設定したくなります
webmanager.connector.editConnector.TomcatManagerImpl.171 = 使用する暗号化の cipher のカンマ区切りリスト。指定しない場合、使用可能な cipher を使用します。
webmanager.connector.editConnector.TomcatManagerImpl.173 = 鍵ストアにあるサーバー証明書で使用する別名。指定しない場合、鍵ストアで読み込まれた最初の鍵を使用します。
webmanager.connector.editConnector.TomcatManagerImpl.175 = クライアント証明書を検証するために使用する TrustStore ファイル。
webmanager.connector.editConnector.TomcatManagerImpl.177 = TrustStore にアクセスするためのパスワード。
webmanager.connector.editConnector.TomcatManagerImpl.179 = TrustStore のタイプを設定します。特に理由がない限り、通常はデフォルト (JKS) を使用しません。
webmanager.connector.editConnector.TomcatManagerImpl.181 = 送信ファイル機能を有効化、もしくは、無効化するにはこの属性を使用します。
webmanager.connector.editConnector.TomcatManagerImpl.183 = true を設定すると、NIO スレッド・プール・コネクターを使用します。デフォルト値は true です。false を設定すると、実行時にスタック・ベースのスレッド・プールを使用します。一般的に、Executor の使用は少々のパフォーマンスを低下をもたらしますが、トラフィックが FIFO キュー経由でキューする際に、高いロード環境の中で処理する接続に対して非常に公平です。(デフォルトの) true を設定すると、最大のプール・サイズは maxThreads 属性であり、コア・プール・サイズは minSpareThreads です。この値は Executor 属性を設定されている場合は無視され、有効な共用スレッド・プールのことを示します。
webmanager.connector.editConnector.TomcatManagerImpl.185 = 受け入れ可能な接続を使用するスレッド数。実際に 2 以上必要としなくても、マルチ CPU マシンではこの値を増やしてください。また、非キープアライブの接続では、同様にこの値を増やしたくなるかもしれません。
webmanager.connector.editConnector.TomcatManagerImpl.187 = ポーリング・イベントの実行で使用されるスレッド数。
webmanager.connector.editConnector.TomcatManagerImpl.189 = ポーリングを行うスレッドの優先度。
webmanager.connector.editConnector.TomcatManagerImpl.19  = サーバーの秘密鍵を含むファイル名。
webmanager.connector.editConnector.TomcatManagerImpl.191 = アクセプター・スレッドの優先度。新規接続の受け入れるために使用するスレッドです。
webmanager.connector.editConnector.TomcatManagerImpl.193 = ポーリングの select() におけるタイムアウトの時間 (ミリ秒単位)。この値は重要であり、終了した接続が同一スレッド上で実行後、非常に高い値を設定しないでください。
webmanager.connector.editConnector.TomcatManagerImpl.195 = Comet サーブレットを許可するかどうかを決定します。
webmanager.connector.editConnector.TomcatManagerImpl.197 = プロトコル・ハンドラーは、パフォーマンスを向上させるために Http11NioProcessor オブジェクトをキャッシュします。この設定は当該オブジェクトをどれだけキャッシュさせるかを指定します。-1 は無制限を意味し、デフォルト値は 200 です。maxThreads の値に近いおおよその値を設定してください。
webmanager.connector.editConnector.TomcatManagerImpl.199 = ダイレクト ByteBuffer または Javaがマップした ByteBuffer のどちらを使用するかを設定します。ダイレクト・バッファーを使用するときは、ダイレクト・メモリー・スペースに適切なメモリー容量をアロケートしていることを確認してください。Sun の JDK では -XX:MaxDirectMemorySize=256m のようになります。
webmanager.connector.editConnector.TomcatManagerImpl.201 = ソケットの受信バッファー (SO_RCVBUF) のサイズ (バイト単位)。
webmanager.connector.editConnector.TomcatManagerImpl.203 = ソケットの送信バッファー (SO_SNDBUF) のサイズ (バイト単位)。
webmanager.connector.editConnector.TomcatManagerImpl.205 = Tomcat で開かれている各接続は、読込と書込の ByteBuffer と関連しています。この属性はこれらのバッファーのサイズを制御します。デフォルトでは、読込バッファーのサイズは 8192 バイトです。並行性をさらに低くさせるには、さらにデータをバッファリングする目的でこの値を増やすことができます。極端なキープアライブ接続数に対して、この数値を減らすか、ヒープ・サイズを増やしてください。
webmanager.connector.editConnector.TomcatManagerImpl.207 = Tomcat で開かれている各接続は、読込と書込の ByteBuffer と関連しています。この属性はこれらのバッファーのサイズを制御します。デフォルトでは、書込バッファーのサイズは 8192 バイトです。並行性をさらに低くさせるには、さらにデータをバッファリングする目的でこの値を増やすことができます。極端なキープアライブ接続数に対して、この数値を減らすか、ヒープ・サイズを増やしてください。
webmanager.connector.editConnector.TomcatManagerImpl.209 = Nio コネクターはソケットとリンクしている要素を保持する NioChannel と呼ばれるクラスを使用します。ガーベッジ・コレクションを減らすために、Nio コネクターはこれらのチャネル・オブジェクトをキャッシュします。この値にはキャッシュするサイズを指定します。デフォルト値は 500 で、キャッシュが 500個の NioChannel オブジェクトを保持することを示します。他には -1 があり、無制限にキャッシュします。0 だとキャッシュしません。
webmanager.connector.editConnector.TomcatManagerImpl.21  = 暗号化された秘密鍵のパス・フレーズ。
webmanager.connector.editConnector.TomcatManagerImpl.211 = NioChannel のプールはサイズ・ベースは可能ですが、オブジェクト・ベースは使用できません。サイズは次のように計算します:<br>NioChannel バッファー・サイズ = 読込バッファー・サイズ + 書込バッファー・サイズ<br>SecureNioChannel バッファー・サイズ = アプリケーションの読込バッファー・サイズ + アプリケーションの書込バッファー・サイズ + ネットワークの読込バッファー・サイズ + ネットワークの書込バッファー・サイズ
webmanager.connector.editConnector.TomcatManagerImpl.213 = Tomcat はガーベッジ・コレクションを減らすために SocketProcessor オブジェクトをキャッシュします。多くてどの程度の数のオブジェクトをキャッシュすればよいのかを数値で指定します。デフォルト値は 500 です。それ以外では、無制限にキャッシュする -1 があり、0 を指定するとキャッシュされません。
webmanager.connector.editConnector.TomcatManagerImpl.215 = Tomcat はガーベッジ・コレクションを減らすために KeyAttachment オブジェクトをキャッシュします。多くてどの程度の数のオブジェクトをキャッシュすればよいのかを数値で指定します。デフォルト値は 500 です。それ以外では、無制限にキャッシュする -1 があり、0 を指定するとキャッシュされません。
webmanager.connector.editConnector.TomcatManagerImpl.217 = Tomcat はガーベッジ・コレクションを減らすために PollerEvent オブジェクトをキャッシュします。多くてどの程度の数のオブジェクトをキャッシュすればよいのかを数値で指定します。デフォルト値は 500 です。それ以外では、無制限にキャッシュする -1 があり、0 を指定するとキャッシュされません。
webmanager.connector.editConnector.TomcatManagerImpl.219 = tcpNoDelay 標準設定と同じです。
webmanager.connector.editConnector.TomcatManagerImpl.221 = ソケットのキープアライブ (SO_KEEPALIVE) を設定するブーリアン値です。
webmanager.connector.editConnector.TomcatManagerImpl.223 = ソケットの OOBINLINE (TCP 緊急データ通信) を設定するブーリアン値です。
webmanager.connector.editConnector.TomcatManagerImpl.225 = ソケットを再使用するアドレス  (SO_REUSEADDR) のオプションのブーリアン値です。
webmanager.connector.editConnector.TomcatManagerImpl.227 = ソケットのリンガー・オプション (SO_LINGER) のブーリアン値です。このオプションは、soLingerTime の値とペアで指定します。
webmanager.connector.editConnector.TomcatManagerImpl.229 = ソケットのリンガー・オプション (SO_LINGER) の数値 (秒単位) です。このオプションは、soLingerOn の値とペアで指定します。
webmanager.connector.editConnector.TomcatManagerImpl.231 = ソケットの読み取りタイムアウト (SO_TIMEOUT) のミリ秒単位の値です。
webmanager.connector.editConnector.TomcatManagerImpl.233 = ソケットのトラフィック・クラスの 0 ～ 255 の値を示し、0x04 | 0x08 | 0x010 があります
webmanager.connector.editConnector.TomcatManagerImpl.235 = パフォーマンス設定の 1 番目の値です。
webmanager.connector.editConnector.TomcatManagerImpl.237 = パフォーマンス設定の 2 番目の値です。
webmanager.connector.editConnector.TomcatManagerImpl.239 = パフォーマンス設定の 3 番目の値です。
webmanager.connector.editConnector.TomcatManagerImpl.24  = 証明書についてクライアントに問い合わせします。
webmanager.connector.editConnector.TomcatManagerImpl.241 = セレクターの不和を減らすために、プールで使用するセレクターの最大数です。コマンド・ライン org.apache.tomcat.util.net.NioSelectorShared 値を false に設定するときにこのオプションを使用してください。
webmanager.connector.editConnector.TomcatManagerImpl.243 = セレクターの不和を減らすために、プールで使用するスペアー・セレクターの最大数です。セレクターがプールに対して返されるとき、システムは、それを維持するか GC:ed するかを決定可能です。コマンド・ライン org.apache.tomcat.util.net.NioSelectorShared 値を false に設定するときにこのオプションを使用してください。
webmanager.connector.editConnector.TomcatManagerImpl.245 = 以下のコマンド・ライン・オプションは NIO コネクターで使用可能です: <br><i>-Dorg.apache.tomcat.util.net.NioSelectorShared=true|false</i>。各スレッドでセレクターを使用したい場合には false を設定します。false を設定すると、selectorPool.maxSelectors 属性を使ってセレクターのプール・サイズを制御することができます。
webmanager.connector.editConnector.TomcatManagerImpl.247 = NIO コネクターはパラシュートという OutOfMemoryError 対策を実装しています。バイト列としてデータのチャンクを保持しています。OOM のケースでは、データのチャンクは解放されてエラーがレポートされます。これは VM にクリーン・アップする十分な部屋を与えています。oomParachute はパラシュート (バイト列) のバイト・サイズを示しています。デフォルト値は 1024*1024 (1MB) です。これだけは Java ヒープ領域にしたがって OOM エラーを実行し、絶対に回復可能な保証が少しもないことを注意してください。もし Java ヒープの外側で OOM があると、このパラシュートのトリックでは助からないでしょう。
webmanager.connector.editConnector.TomcatManagerImpl.249 = ポーリングを呼び出す持続時間です。この値を減らすと一部のケースでキープアライブしている接続の待ち時間をわずかに減りますが、ポーリングの呼び出しが作られていればいるほど、CPU をさらに使用します。
webmanager.connector.editConnector.TomcatManagerImpl.251 = ポーリングが指定された時間に維持可能なキープアライブ接続のポーリングに責任を負うソケット数。余分な接続はすぐにクローズされます。
webmanager.connector.editConnector.TomcatManagerImpl.253 = 明らかな静的ファイルのカーネル・レベルの送信ファイルを使用します。
webmanager.connector.editConnector.TomcatManagerImpl.255 = 非同期に静的ファイルを送信するポーリングの役割が指定時間に保持するソケット数。外部の接続は送信データなしで即座にクローズします (クライアント側で長さ 0 の結果)。大抵のケースでは、送信ファイルはすぐに返す (カーネルで同期的に注意している) 呼び出しであり、送信ファイルのポーリングは使用されないことに注意し、それゆえ同時に送信可能な静的ファイル数は指定した数以上にかなり大きいです。
webmanager.connector.editConnector.TomcatManagerImpl.26  = クライアント証明書に対する連鎖の最大の深さ
webmanager.connector.editConnector.TomcatManagerImpl.28  = クライアント認証向けに PEM エンコードされた認証局の証明書を連結したファイル。
webmanager.connector.editConnector.TomcatManagerImpl.30  = クライアント認証向けに PEM エンコードされた認証局の証明書のディレクトリー。
webmanager.connector.editConnector.TomcatManagerImpl.32  = PEM エンコードされたサーバー認証局の証明書のファイル。
webmanager.connector.editConnector.TomcatManagerImpl.34  = クライアント認証向けに PEM エンコードされた認証局の証明書失効リストを連結したファイル。
webmanager.connector.editConnector.TomcatManagerImpl.36  = クライアント認証向けに PEM エンコードされた認証局の証明書失効リストのディレクトリー。
webmanager.connector.editConnector.TomcatManagerImpl.40  = バインドするホスト名または IP。通常の値は 0.0.0.0 (すべてのインタフェース) もしくはローカルホスト (ローカル接続のみ) です
webmanager.connector.editConnector.TomcatManagerImpl.42  = バインドするネットワーク・ポート。
webmanager.connector.editConnector.TomcatManagerImpl.44  = スレッドを処理可能なすべてのリクエストが使用中であるときに受信するリクエストのキューの最大数。
webmanager.connector.editConnector.TomcatManagerImpl.46  = バッファー・サイズ
webmanager.connector.editConnector.TomcatManagerImpl.48  = 接続タイムアウト (ミリ秒)
webmanager.connector.editConnector.TomcatManagerImpl.50  = キープアライブ・タイムアウト (ミリ秒)
webmanager.connector.editConnector.TomcatManagerImpl.52  = 受信するリクエストをハンドルするためにこのコネクターが使用するスレッドの最大数
webmanager.connector.editConnector.TomcatManagerImpl.54  = スペアーする最小スレッド数
webmanager.connector.editConnector.TomcatManagerImpl.56  = スペアーする最大スレッド数
webmanager.connector.editConnector.TomcatManagerImpl.58  = true を設定すると、TCP_NO_DELAY オプションがサーバー・ソケットに設定され、大抵の環境ではパフォーマンスを改善します。
webmanager.connector.editConnector.TomcatManagerImpl.60  = true を設定すると、Geronimo 内で認証が実行されます。そうでなければ、認証するプリンシパルはネイティブ Web サーバーから伝えられ、Geronimo での認証で使用されます。
webmanager.connector.editConnector.TomcatManagerImpl.80  = TRACE HTTP メソッドを有効にするか無効にするかどうかを指定するブーリアン値。
webmanager.connector.editConnector.TomcatManagerImpl.82  = true を設定すると、セッション・クッキーのすべてのパスに / が設定されます。これはポートレットの実装に有用可能ですが、クライアントから指定されたサーバー上にある多くのアプリケーションへアクセスされると、パフォーマンスに大きく影響するでしょう。
webmanager.connector.editConnector.TomcatManagerImpl.84  = リモート・ホストの実際のホスト名を返すための DNS 参照を実行する request.getRemoteHost() を呼び出したい場合に true を設定します。DNS 参照をスキップするには false を設定し、その替わりに String 形式の IP アドレスを返します (これによりパフォーマンスを改善します)。
webmanager.connector.editConnector.TomcatManagerImpl.85  = The maximum number of parameters (GET plus POST) which will be automatically parsed by the container. 10000 by default. A value of less than 0 means no limit.
webmanager.connector.editConnector.TomcatManagerImpl.86  = コンテナーの FORM URL パラメーターの解析によってハンドルする POST データの最大バイト・サイズ。この属性に 0 以下の値を設定するとこの制限を無効化できます。
webmanager.connector.editConnector.TomcatManagerImpl.88  = フォームまたはクライアント証明書の認証でコンテナーが保存/バッファリングする POST の最大バイト・サイズ。これら両方の認証形式では、ユーザーを認証する直前で POST データを保存バッファリングします。クライアント証明書の認証では、リクエストを処理するときに SSL ハンドシェイクおよび空いたバッファーを保持するために POST データをバッファリングします。フォーム認証では、ユーザーがログイン・フォームへリダイレクトする間に POST データを保存し、ユーザーが正常に認証するか、セッションが認証のリクエスト期限を関連付けるまで保持します。この属性に -1 を設定すると、制限を無効化できます。属性に 0 を設定すると、認証中に POST データの保存を無効化します。
webmanager.connector.editConnector.TomcatManagerImpl.90  = このコネクターがプロキシー構成を使用する場合、この属性に request.getServerName() の呼び出し時に返されるサーバー名を指定してください。
webmanager.connector.editConnector.TomcatManagerImpl.92  = このコネクターがプロキシー構成を使用する場合、この属性に request.getServerPort() の呼び出し時に返されるサーバー・ポートを指定してください。
webmanager.connector.editConnector.TomcatManagerImpl.94  = このコネクターが非 SSL リクエストをサポートし、リクエストが SSL トランスポートを要求する <security-constraint> と一致するリクエストを受信した場合、Catalina はここに指定したポート番号のリクエストへ自動的にリダイレクトします。
webmanager.connector.editConnector.TomcatManagerImpl.97  = URL を %xx にデコードした後、URI バイト列をデコードするために使用する文字エンコーディングを指定します。
webmanager.connector.editConnector.TomcatManagerImpl.99  = URIEncoding を使用する替わりに、コンテンツ・タイプに指定したエンコーディングをURI クエリー・パラメーターを使用するには、これを指定します。この設定は Tomcat 4.1.x 互換のために用意されたもので、コンテンツ・タイプに指定したエンコーディング、または、明示的に使用する Request.setCharacterEncoding メソッドでも URL からパラメーターを取り出すために使用されます。
webmanager.connector.editConnector.addNew                = 追加する新規コネクター
webmanager.connector.editConnector.attribute             = 属性
webmanager.connector.editConnector.desc                  = 説明
webmanager.connector.editConnector.editConnector         = 編集中のコネクター
webmanager.connector.editConnector.requiredAttribute     = (<strong>*</strong> は必須属性です)
webmanager.connector.editConnector.type                  = タイプ
webmanager.connector.editConnector.value                 = 値
webmanager.connector.editHTTP.addNewListener             = {1} に対して新規 {0} リスナーを追加
webmanager.connector.help.content                        = コネクター・マネージャーは、この Web サーバーの全タイプの接続を表示し、接続を変更する機能を提供します。
webmanager.connector.normal.addNew                       = 新規追加
webmanager.connector.normal.addNewListener               = {1} に対して新規 {0} リスナーを追加
webmanager.connector.normal.addNewNote                   = <p>注意:</p><ul><li>APR コネクターを作成できるようにするには、最初に APR のネイティブ・ライブリーをインストールする必要があります。</li></ul>
webmanager.connector.normal.connectorsFor                = {0} のコネクター
webmanager.connector.normal.consoleNavailable            = もし {0} が停止すると、コンソール・アプリケーションは使用できなくなります。{1} を停止しますか?
webmanager.connector.normal.noConnectorsDefined          = {0} のコネクターは存在しません
webmanager.connector.normal.noWebContainers              = Web コンテナーは定義されていません
webmanager.connector.normal.reallyDelete                 = {0} を除去しますか?
webmanager.help.disable                                  = 無効
webmanager.help.disableExplanation                       = 統計情報の収集を停止し、メインページへ戻る
webmanager.help.refreshExplanation                       = 最新の情報に更新する
webmanager.help.resetExplanation                         = すべてのカウンタを 0 にして、最初から統計情報を取り直す
webmanager.help.title                                    = 管理コンソールにおいて、Geronimo サーバへのリクエスト数や接続数の統計情報を収集することができます。Geronimo サーバーの性能情報をモニターするには、有効ボタンを押して下さい。
webmanager.normal.activeRequestCount                     = アクティブ・リクエスト数
webmanager.normal.avgTime                                = 平均時間 (ms)
webmanager.normal.connectionDuration                     = 接続時間
webmanager.normal.connectionRequestCount                 = 接続要求数
webmanager.normal.count                                  = 総数
webmanager.normal.current                                = 現在
webmanager.normal.elapsedTime                            = 収集開始からの経過時間 (hh:mm:ss:SSS)
webmanager.normal.high                                   = 最高値
webmanager.normal.low                                    = 最小値
webmanager.normal.maxTime                                = 最大時間 (ms)
webmanager.normal.minTime                                = 最小時間 (ms)
webmanager.normal.requestDuration                        = リクエスト間隔
webmanager.normal.statistic                              = 統計
webmanager.normal.statsMessage                           = 現在の Web コンテナーでは Web 統計情報をサポートしていません。
webmanager.normal.total1xxResp                           = 1xx レスポンス合計
webmanager.normal.total2xxResp                           = 2xx レスポンス合計
webmanager.normal.total3xxResp                           = 3xx レスポンス合計
webmanager.normal.total4xxResp                           = 4xx レスポンス合計
webmanager.normal.total5xxResp                           = 5xx レスポンス合計
webmanager.normal.totalConnectionCount                   = 接続総数
webmanager.normal.totalErrorCount                        = エラー総数
webmanager.normal.totalRequestCount                      = リクエスト総数
webmanager.normal.totalTime                              = 全体時間

welcome.welcomeMaximized.fragment1   = Welcome ポートレットは、ユーザーが管理コンソールにログインした際に最初に目にするページです。このページには管理コンソールを紹介する情報が含まれています。\r\n
welcome.welcomeMaximized.fragment2   = メインの Welcome パネルに戻るには、ヘッダーの "view" リンクをクリックしてください。\n\r\n
welcome.welcomeMaximized.title       = Geronimo&#8482 コンソールへようこそ
welcome.welcomeNormal.about1         = 管理コンソールを使うことで、 Geronimo サーバーの様々な機能を簡単に管理することができます。管理コンソールは現在進化の過程であり、これからも進化し続けていきます。左のナビゲーション・パネルから、管理コンソールの個々の機能に簡単にアクセスすることができます。
welcome.welcomeNormal.about2         = 中央は、実際に作業を行うスペースです。それぞれのビューは、一つ以上の (それ自身がいくつかのビューから成る) ポートレットを含んでおり、それらはヘッダーにヘルプへのリンクを持ちます。例えばこのポートレットのトップにもありますので、試してみてください。
welcome.welcomeNormal.about3         = 右側のリファレンスは、Apache Geronimo やその機能、将来のリリースについてより深く理解するのに、参考になります。
welcome.welcomeNormal.about4         = 以下のメーリングリストを利用すると、Apache Geronimo の開発に参加したり、コミュニティーへ質問することができます:
welcome.welcomeNormal.about5         = そして、あなたの体験を我々と共有し、Geronimo をより良くするためのフィードバックをお願いします。
welcome.welcomeNormal.addiDoc        = 追加ドキュメント
welcome.welcomeNormal.archive        = アーカイブ
welcome.welcomeNormal.commonActions  = 日常的な作業
welcome.welcomeNormal.deployNew      = 新規アプリケーションのデプロイ
welcome.welcomeNormal.devMaillist    = 開発者メーリングリストのアーカイブ
welcome.welcomeNormal.doc            = Geronimo ドキュメント
welcome.welcomeNormal.faq            = FAQ
welcome.welcomeNormal.forDevelopers  = Geronimo 開発者向け
welcome.welcomeNormal.forUsers       = Geronimo ユーザー向け
welcome.welcomeNormal.homePage       = Geronimo ホームページ
welcome.welcomeNormal.irc            = Geronimo IRC チャット
welcome.welcomeNormal.online         = Geronimo オンライン
welcome.welcomeNormal.problemTracker = 問題追跡データベース
welcome.welcomeNormal.serverInfo     = サーバー情報
welcome.welcomeNormal.thanks         = Geronimo をご利用いただきありがとうございます!
welcome.welcomeNormal.userMaillist   = ユーザー・メーリングリストのアーカイブ
welcome.welcomeNormal.webServerPorts = Web サーバー・ポート
welcome.welcomeNormal.wiki           = Wiki
