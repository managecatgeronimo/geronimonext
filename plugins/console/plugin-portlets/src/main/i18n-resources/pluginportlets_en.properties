#Generated by ResourceBundle Editor (http://eclipse-rbe.sourceforge.net)
#=====================================================================
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#=====================================================================

ajax.progressbar.processing = Processing...

car.addRepository.currentlyPluginRepositories = The currently available plugin repositories are
car.addRepository.downloadRunningCongfig      = You can also download running configurations from another Geronimo server just as if you're browsing and installing third-party plugins. If you want to point to a remote Geronimo server, enter a URL such as <tt>http://geronimo-server:8080/plugin/maven-repo/</tt>
car.addRepository.howToAddPluginRepositories  = To add a new plugin repository to this list, enter the URL to the repository. The repository must have a <tt>geronimo-plugins.xml</tt> file in the root directory listing the available plugins in the repository.
car.addRepository.title                       = Add plugin repository
car.assemblyConfirm.description               = Description
car.assemblyConfirm.moduleId                  = Module ID
car.assemblyConfirm.plugin                    = Plugin
car.assemblyConfirm.successful                = Server Assembly Successful
car.common.addRepository                      = Add repository
car.common.assemble                           = Assemble
car.common.author                             = Author
car.common.category                           = Category
car.common.createGeronimoPlugin               = Create Geronimo plugin
car.common.dependencies                       = Dependencies
car.common.downloadRepositories               = Download repositories
car.common.exportPlugin                       = Export plugin
car.common.geronimoVersions                   = Geronimo Versions
car.common.group                              = Group
car.common.license                            = License
car.common.moduleID                           = Module ID
car.common.newRepository                      = New repository
car.common.obsoletes                          = Obsoletes
car.common.openSource                         = Open Source
car.common.pluginURL                          = Plugin URL
car.common.prereq1Description                 = Prereq 1 Description
car.common.prereq2Description                 = Prereq 2 Description
car.common.prereq3Description                 = Prereq 3 Description
car.common.prerequisite1ID                    = Prerequisite 1 ID
car.common.prerequisite1Type                  = Prerequisite 1 Type
car.common.prerequisite2ID                    = Prerequisite 2 ID
car.common.prerequisite2Type                  = Prerequisite 2 Type
car.common.prerequisite3ID                    = Prerequisite 3 ID
car.common.prerequisite3Type                  = Prerequisite 3 Type
car.common.prerequisites                      = Prerequisites
car.common.proprietary                        = Proprietary
car.common.removePlugins                      = Remove Geronimo plugins
car.common.repository                         = Repository
car.common.savePluginData                     = Save plugin Data
car.common.searchForPlugins                   = Show plugins in selected repository
car.common.uniqueID                           = Unique ID
car.common.viewDetails                        = View Details
car.common.webSite                            = Web Site
car.confirmExport.title                       = <b>Export plugin</b> -- Save to Disk
car.confirmExport.useBtnBelow                 = Use the button below to save the plugin "{0}" to disk.
car.download.foundDependencies                = Found the following dependencies for this plugin.  Any missing dependencies will be installed for you automatically if you proceed.
car.download.processing                       = Processing {0}...
car.downloadStatus.processing                 = Current file being operated on...
car.help.return                               = To return to the main Plugin panel, select the "view" link from the header of this portlet.
car.index.assembleServer                      = Assemble a server
car.index.assembleServerLong                  = Assemble a server from plugins in this one
car.index.assemblyHelp.AppCentric.desp        = Choose the application plugins that suit your need and let your application plugins define the contents of your server.  Your server should be able to run your applications but may not be able to deploy anything.
car.index.assemblyHelp.AppCentric.title       = Application Centric
car.index.assemblyHelp.ExpertUser.desp        = Choose the application plugins and system plugins by configIds to construct your server.  Choose this mode only when you are an expert user of Apache Geronimo, because you could end up with a server that is not able to start or deploy anything.
car.index.assemblyHelp.ExpertUser.title       = Expert User
car.index.assemblyHelp.FuncCentric.desp       = Choose the functionalities that suit your needs, along with any deployed application plugins.
car.index.assemblyHelp.FuncCentric.title      = Function Centric
car.index.assemblyHelp.desp                   = Assemble a server from geronimo plugins in the current server.  Choose from one of the following 3 modes:
car.index.assemblyHelp.note                   = <p>Note this portlet only works with geronimo plugins.  If your application is not a geronimo plugin, you have the following options:</p><p>- Use the "Create Plugin" portlet from console to convert your application into a geronimo plugin<br/>- Use car-maven-plugin to convert your application into a geronimo plugin<br/>- Deploy your application after your server is assembled<br/></p>
car.index.assemblyMode                        = Custom Assembly Mode: 
car.index.createGeronimoPluginExp             = Choose a configuration in the current Geronimo server to export as a Geronimo plugin.  The configuration will be saved as a CAR file to your local filesystem. <i>Note: at present, you must manually add a <tt>META-INF/geronimo-plugin.xml</tt> file to the CAR  after you export it in order for it to be a valid plugin.</i>
car.index.createPluginHelp.desp               = <p>Choose a configuration in the current Geronimo server to export as Geronimo plugin.   Fill out the plugin metadata information and save the plugin as a car file to your local file system.  The console will generate the <tt>geronimo-plugin.xml</tt> file that stores the plugin metadata information for your project and package it into a car file.   You can configure many plugin metadata via admin console, however, you will not be able to configure some of the advanced configuration, for example the <tt>config-xml-ceontent</tt> or <tt>config-substitution</tt> properties.</p><p>If you like to generate a geronimo plugin from command line, you can use the car-maven-plugin to generate a <tt>geronimo-plugin.xml</tt> file for your project, package your project as a car file, and add your project onto the geronimo plugin catalog (<tt>geronimo-plugins.xml</tt> file) automatically.</p>
car.index.createPluginHelp.title              = Create geronimo plugins
car.index.installPluginHelp.desp              = <p>Install geronimo plugins from a local or remote repository into the current Geronimo server.</p> <p>Click the "Update Repository List" link to update the repository list to the latest recommended by the server.</p> <p>If you don't see your desired repository, click the "Add Repository" link to add additional repository of your choice.  The repository must have a <tt>geronimo-plugins.xml</tt> file in the root directory listing the available plugins in the repository. </p>
car.index.installPluginHelp.title             = Install geronimo plugins
car.index.optionalAuthentication              = Optional Authentication
car.index.removePluginsExp                    = To remove a plugin, use the categories under <b>Applications</b> to locate the plugin module and uninstall it.
car.index.summary                             = <h2>Install Geronimo Plugins</h2> <p>This portlet lets you install Geronimo plugins. This can be used to install new features into a Geronimo server at runtime.</p> <p>Choose a local or remote repository to inspect for available Geronimo plugins.  The repository must have a <tt>geronimo-plugins.xml</tt> file in the root directory listing the available plugins in the repository.</p> <p>You can also download running configurations from another Geronimo server  just as if you're browsing and installing third-party plugins. If you want to point to a remote Geronimo server,  enter a URL such as <tt>http://geronimo-server:8080/plugin/maven-repo/</tt> and then enter the administrator username and password in the optional authentication fields.</p>
car.index.updateRepositoryList                = Update Repository List
car.index.validateConfig                      = Please select a configuration to export.
car.list.PluginGroup                          = Plugin Groups in local server: 
car.list.applicationPlugin                    = Application plugins in local server:
car.list.assemblyArtifactId                   = Assembly artifactId:
car.list.assemblyFormat                       = Assembly format:
car.list.assemblyGroupId                      = Assembly groupId:
car.list.assemblyPath                         = Assembly target path:
car.list.assemblyVersion                      = Assembly version:
car.list.expertUser                           = Expert User (view all system plugins)
car.list.filterByCategoryAndName              = Filter by category and name: 
car.list.nameServer                           = Name the server to be assembled: 
car.list.noPlugins                            = No plugins are listed at this repository.
car.list.nothing                              = You must choose at least one plugin to install.
car.list.pluginRepo                           = Plugins listed at
car.list.requireArtifactId                    = You must provide an Artifact Id Name.
car.list.requiredPlugin                       = Required plugin in local server:
car.list.selectPlugin                         = Select from plugins in current server:
car.list.systemPlugin                         = System plugins in local server:
car.pluginParams.JVMVersionsExp               = An optional list of JVM version prefixes supported by this plugin.  If no values are listed, the plugin can be installed in Geronimo running in any version of the JVM.  Otherwise, list one acceptable JVM version prefix per line, like "1.4.2&nbsp;&nbsp;1.5&nbsp;&nbsp;..." (ideally, of course, this means you've actually tested the plugin with Geronimo on each JVM version listed here).
car.pluginParams.authorExp                    = The author of the plug, which may be a person, company, open source project, etc.
car.pluginParams.categoryExp                  = The category this plugin falls into.  Plugins in the same category will be listed together. If this plugin is intended to be listed on geronimoplugins.com then you should use one of the category names there if any of them fit.  Otherwise, you can select this freely, or according to the categories acceptable to the repository where you plan to post this.
car.pluginParams.dependenciesExp              = A list of JARs or other module IDs that this plugin depends on.  These will be downloaded automatically when this plugin is installed.  Normally you shouldn't change this list.  However, you can move entries from the dependency list to the <b>prerequisite</b> list if the user must install the dependency manually before installing the plugin  (e.g. for a database pool where a plugin wouldn't know what server to connect to).<br /><br />  Each entry in this list should use the Unique ID format like is used for this plugin above. You may remove the version number if you'd like to work with any version of the dependency, though that may be risky. Each value should be on a separate line.
car.pluginParams.descriptionExp               = A description of this plugin.  You should use plain text only, with blank lines to separate paragraphs.
car.pluginParams.downloadRepositoriesExp      = A list of repositories to check for any dependencies that need to be downloaded. This should be a list of one URL per line, with values such as <tt>http://geronimoplugins.com/repository/</tt> and <tt>http://www.ibiblio.org/maven2/</tt>. Note that the repository this plugin is deployed to should typically be the first one listed.
car.pluginParams.geronimoVersionsExp          = An optional list of Geronimo versions supported by this plugin.  If no values are listed, the plugin can be installed in any version of Geronimo. Otherwise, list one acceptable Geronimo version per line, like "1.1&nbsp;&nbsp;1.1.1&nbsp;&nbsp;1.1.2&nbsp;&nbsp;..." (ideally, of course, this means you've actually tested the plugin with each Geronimo version listed here).
car.pluginParams.humanReadableName            = Human Readable Name
car.pluginParams.humanReadableNameExp         = A human-readable name that will be displayed for this plugin.
car.pluginParams.licenseExp                   = The name of the license that this plugin is covered by.  Ideally, it would be prefixed by the class of license, like "BSD -- (name)" or "GPL -- (name)".
car.pluginParams.obsoletesExp                 = A list of module IDs that this plugin replaces.  Those plugins or modules will be removed when this one is installed. That may include previous versions of this plugin if you want installing it to "upgrade" rather than just offering an additional alternative.  This should be a list with one module ID per line.
car.pluginParams.openSourceExp                = Check this box if the license is an OSI-approved open source license (see <a href="http://www.opensource.org/licenses/index.php">http://www.opensource.org/licenses/index.php</a>).
car.pluginParams.pluginURLExp                 = A URL to get more information about the plugin (e.g. the plugin home page).
car.pluginParams.prereqDescriptionExp         = A longer description of what the user needs to do to comply with this prerequisite (for example, instructions to set up a database pool listing the supported database products and telling the user where to find a script to initialize the database).  This should be plain text with empty lines to separate paragraphs.
car.pluginParams.prerequisiteIDExp            = The module ID of a prerequisite for this plugin.  This is a module that must be present in the server before the plugin can be installed.  It may be something like a specific web container for a web application (<tt>geronimo/jetty/*/car</tt>) or something like a database pool or security realm that the user must install  because the plugin author can't create a value that will be valid in the destination server.  You may want to leave out as many segments of the module ID as possible in order to accommodate more users ( for example, <tt>*/mypool/*/*</tt> rather than <tt>myapp/mypool/1.2/car</tt>).
car.pluginParams.prerequisiteTypeExp          = A brief description of the type of prerequisite this is (for the benefit of the user).  Examples could include <tt>Database Pool</tt> or <tt>Web Container</tt>.
car.pluginParams.title                        = <b>Export Plugin</b> -- Configure Plugin Data
car.pluginParams.uniqueIDExp                  = The globally unique ID for this plugin.  This is determined from the installation in the server you're exporting.  This defines the version number for the plugin, so make sure it's correct.
car.results.filesProcessed                    = Files Processed
car.results.titles                            = The following plugin(s) have been installed
car.viewForDownload.author                    = Author
car.viewForDownload.category                  = Category
car.viewForDownload.dependencies              = Dependencies
car.viewForDownload.description               = Description
car.viewForDownload.geronimoVersions          = Geronimo-Versions
car.viewForDownload.installable               = Installable
car.viewForDownload.jvmVersions               = JVM Versions
car.viewForDownload.license                   = License
car.viewForDownload.moduleId                  = Module ID
car.viewForDownload.obsoletes                 = Obsoletes
car.viewForDownload.prerequisites             = Prerequisites
car.viewForDownload.website                   = Web Site

configmanager.common.archive                     = Archive
configmanager.common.plan                        = Plan(optional)
configmanager.common.startAppAfterInstall        = Start application after installation
configmanager.common.redeployapplication = Redeploy application
configmanager.deploy.migratedPlan                = Migrated plan
configmanager.deploy.migratedPlanSummary         = The deployment plan you provided appears to be for a previous version of the application server. A migrated version of your plan is provided below for your convenience.  Not all deployment plans can be fully migrated so some manual editing may be required before the migrated plan can be deployed.
configmanager.deploy.originalPlan                = Original plan
configmanager.deploy.redeployApplication         = Redeploy application
configmanager.deploy.saveLocally                 = Save this plan locally
configmanager.deploy.showDetail                  = Show full details
configmanager.deploy.showMigratedPlan            = Show Migrated plan
configmanager.deploy.showOriginalPlan            = Show original plan
configmanager.deployHelp.archiveExp              = Browse to select the Java EE archive file in the Archive box.
configmanager.deployHelp.installApplication      = Install the application in the Geronimo server.
configmanager.deployHelp.planExp                 = If the deployment plan is separate from the archive file, then browse to select it.  If the deployment plan is packaged within the archive file, then leave this field blank.
configmanager.deployHelp.startAppAfterInstallExp = Check this to automatically start the application when it is installed. Otherwise, the user can start the application by clicking on the associated &quot;Start&quot; toggle in the&quot;Installed Applications&quot; window. By default this checkbox is checked and newly installed applications will automatically be started.
configmanager.deployHelp.redeployapplication = Check this to redeploy the application. Geronimo server will try to identify the module from the repository and replace it with the new one.
configmanager.deployHelp.title                   = This portlet allows the user to deploy or redeploy applications on Geronimo. For example, web applications require deployment plans, which are either packaged within the war file or kept in a separate file which is typically called geronimo-web.xml. A deployment plan can also be a stand-alone xml file when a RAR is being used or for providing environment specific settings.

consolebase.common.JVMVersions     = JVM Versions
consolebase.common.actions         = Actions
consolebase.common.cancel          = Cancel
consolebase.common.commands        = Commands
consolebase.common.confirmPassword = Confirm Password
consolebase.common.delete          = Delete
consolebase.common.deployedAs      = Deployed As
consolebase.common.description     = Description
consolebase.common.done            = Done
consolebase.common.edit            = Edit
consolebase.common.install         = Install
consolebase.common.name            = Name
consolebase.common.next            = Next
consolebase.common.password        = Password
consolebase.common.restart         = Restart
consolebase.common.return          = Return
consolebase.common.returnToList    = Return to List
consolebase.common.save            = Save
consolebase.common.start           = Start
consolebase.common.state           = State
consolebase.common.stop            = Stop
consolebase.common.uninstall       = Uninstall
consolebase.common.usage           = usage
consolebase.common.user            = User
consolebase.common.userName        = Username

realmwizard._sql.JDBCDriverClassExp                          = The fully-qualified JDBC driver class name.  This driver must be located in the JAR specified in the next field.
realmwizard._sql.JDBCPasswordExp                             = The password used to connect to the database
realmwizard._sql.JDBCUrlExp                                  = The JDBC URL that specifies the details of the database to connect to.  This has a different form for each JDBC driver.
realmwizard._sql.JDBCUsernameExp                             = The username used to connect to the database
realmwizard._sql.databasePoolExp                             = A database pool that the login module will use to connect to the database.  If this is specified, none of the rest of the settings after this are necessary.
realmwizard._sql.digestAlgorithmExp                          = Message Digest algorithm (for example, MD5, SHA1 and so on) used on the passwords.  Leave this field empty if no digest algorithm is used.
realmwizard._sql.digestEncodingExp                           = Encoding to use for digests (for example, hex, base64).  This is used only if a Message Digest algorithm is specified.If no encoding is specified, hex will be used.
realmwizard._sql.driverJARExp                                = The JAR holding the selected JDBC driver.  Should be installed under GERONIMO/repository/ to appear in this list.
realmwizard._sql.eitherPoolOrJDBC                            = A SQL security realm must either have a database pool or JDBC connectivity settings to  connect to the database.  Please select EITHER the database pool, OR the rest of the JDBC settings.
realmwizard._sql.groupSelectSQLExp                           = A SQL statement to load group information for a user.  It should return 2 columns, the first holding a username and the second holding a group name.  The statement may use the PreparedStatement syntax of ? for a parameter,  in which case the username will be set for every parameter.  A typical setting would be  <tt>SELECT username, group_name FROM user_groups WHERE username=?</tt> or  for a more normalized schema,   <tt>SELECT u.username, g.name FROM app_users u, groups g, user_groups ug WHERE ug.user_id=users.id AND ug.group_id=g.id AND u.username=?</tt>
realmwizard._sql.selectDatabasePool                          = A SQL security realm must either have a database pool or JDBC connectivity settings to  connect to the database.  Please select EITHER the database pool, OR the rest of the JDBC settings.
realmwizard._sql.userSelectSQLExp                            = A SQL statement to load user/password information.  It should return 2 columns, the first holding a username and the second holding a password.   The statement may use the PreparedStatement syntax of ? for a parameter,   in which case the username will be set for every parameter.    A typical setting would be <tt>SELECT username, password FROM app_users WHERE username=?</tt> 
realmwizard.advanced.AuditEnabledExp                         = If enabled, every login attempt will be recorded to the specified file.  The path should be relative to the Geronimo home directory (a typical value would be <tt>var/log/login-attempts.log</tt>).
realmwizard.advanced.credentialName                          = Credential Name
realmwizard.advanced.credentialNameExp                       = If enabled, the realm will store each username and password in a private credential in the Subject under a specified credential name.
realmwizard.advanced.failuresWithin                          = failures within
realmwizard.advanced.failuresWithinSeconds                   = seconds
realmwizard.advanced.global                                  = Global
realmwizard.advanced.global.description                      = If global, security realm name must be unique but is available to EJBs. If not global, name does not need to be unique. In any case, realm plugin must be a parent of a web app to be visible to that app.
realmwizard.advanced.keepAccountLockedFor                    = and keep the account locked for
realmwizard.advanced.keepAccountLockedForSeconds             = seconds
realmwizard.advanced.lockUserAfter                           = Lock a user after
realmwizard.advanced.lockoutEnabledExp                       = If enabled, a certain number of failed logins in a particular time frame will cause a user's account to be locked for a certain period of time.  This is a defence against brute force account cracking attacks.
realmwizard.advanced.namedCredential                         = Named Credential
realmwizard.advanced.storePasswordEnabledExp                 = If enabled, the realm will store each user's password in a private credential in the Subject. This will allow access to the password later after the login process has completed.  This is not normally required.
realmwizard.advanced.title                                   = <b>Create Security Realm</b> -- Step 3: Advanced Configuration
realmwizard.common.JDBCDriverClass                           = JDBC Driver Class
realmwizard.common.JDBCPassword                              = JDBC Password
realmwizard.common.JDBCUrl                                   = JDBC URL
realmwizard.common.JDBCUsername                              = JDBC Username
realmwizard.common.addSecurityRealm                          = Add new security realm
realmwizard.common.addToEAR                                  = Add to EAR
realmwizard.common.comfirmPwd                                = Confirm password
realmwizard.common.configurationOptions                      = Configuration Options
realmwizard.common.controlFlag                               = Control Flag
realmwizard.common.databasePool                              = Database Pool
realmwizard.common.deploy                                    = Deploy
realmwizard.common.deployCommand                             = Deploy Command
realmwizard.common.deployRealm                               = Deploy Realm
realmwizard.common.deploymentPlan                            = Deployment Plan
realmwizard.common.digestAlgorithm                           = Digest Algorithm
realmwizard.common.digestEncoding                            = Digest Encoding
realmwizard.common.driverJAR                                 = Driver JAR
realmwizard.common.editRealm                                 = Edit Realm
realmwizard.common.editSettings                              = Edit Settings
realmwizard.common.emptyText                                 = The focussed field must not be empty.
realmwizard.common.enableAuditing                            = Enable Auditing
realmwizard.common.enableLockout                             = Enable Lockout
realmwizard.common.groupSelectSQL                            = Group SELECT SQL
realmwizard.common.integer                                   = The focussed field must be an integer.
realmwizard.common.logFile                                   = Log File
realmwizard.common.loginDomainName                           = Login Domain Name
realmwizard.common.loginModule                               = Login Module
realmwizard.common.loginModuleClass                          = Login Module Class
realmwizard.common.nameOfSecurityRealm                       = Name of Security Realm
realmwizard.common.passwordMismatch                          = Password does not match.
realmwizard.common.principals                                = Principals
realmwizard.common.realmName                                 = Realm Name
realmwizard.common.realmType                                 = Realm Type
realmwizard.common.serverSide                                = Server-Side
realmwizard.common.serverWide                                = Server-wide
realmwizard.common.showPlan                                  = Show Plan
realmwizard.common.skipTestAndDeploy                         = Skip Test and Deploy
realmwizard.common.skipTestAndShowPlan                       = Skip Test and Show Plan
realmwizard.common.storePassword                             = Store Password
realmwizard.common.supportAdvancedMapping                    = Support Advanced Mapping
realmwizard.common.testAgain                                 = Test Again
realmwizard.common.testLogin                                 = Test a Login
realmwizard.common.userSelectSQL                             = User SELECT SQL
realmwizard.configure.certprops.groupsURI.description        = The location of a properties file (relative to the Geronimo home dir) holding group information.  The format of each line should be <tt>group=user,user,...</tt>.
realmwizard.configure.certprops.groupsURI.name               = Groups File URI
realmwizard.configure.certprops.usersURI.description         = The location of a properties file (relative to the Geronimo home dir) holding certificate to user mapping information.  The format of each line should be <tt>username=certificatename</tt> where certificate name is <tt>X509Certificate.getSubjectX500Principal().getName()</tt>
realmwizard.configure.certprops.usersURI.name                = Users File URI
realmwizard.configure.ldap.authentication.description        = The security level to use, which can be <tt>none</tt>, <tt>simple</tt>, or <tt>strong</tt> (the usual value is <tt>simple</tt>.  If this property is unspecified, the behaviour is determined by the service provider.
realmwizard.configure.ldap.authentication.name               = Authentication
realmwizard.configure.ldap.connectionPassword.description    = The password used to connect to the LDAP server.
realmwizard.configure.ldap.connectionPassword.name           = Connect Password
realmwizard.configure.ldap.connectionProtocol.description    = The connection protocol used to communicate with the LDAP server.  Normally left blank, though it can be set to <tt>ssl</tt> if the server supports it.
realmwizard.configure.ldap.connectionProtocol.name           = Connect Protocol
realmwizard.configure.ldap.connectionURL.description         = A URL that describes how to connect to the LDAP server.  Normally this would be <tt>ldap://ldap-server-hostname:389</tt> (or for the Apache directory server included with Geronimo, <tt>ldap://localhost:1389</tt>).
realmwizard.configure.ldap.connectionURL.name                = Connection URL
realmwizard.configure.ldap.connectionUsername.description    = The username used to connect to the LDAP server.  Should be an administrator or Directory manager that has access to examine other users' passwords.
realmwizard.configure.ldap.connectionUsername.name           = Connect Username
realmwizard.configure.ldap.initialContextFactory.description = The fully-qualified class name of the initial context factory.  If you don't know what to use here, you should use <tt>com.sun.jndi.ldap.LdapCtxFactory</tt>.
realmwizard.configure.ldap.initialContextFactory.name        = Initial Context Factory
realmwizard.configure.ldap.roleBase.description              = The base LDAP context (location) to search for roles.  The search may look in this location only, or there and all subcontexts, depending on the settings for "Role Search Subtree" below.
realmwizard.configure.ldap.roleBase.name                     = Role Base
realmwizard.configure.ldap.roleName.description              = The LDAP attribute type that corresponds to the the role name.  Often set to <tt>cn</tt>.
realmwizard.configure.ldap.roleName.name                     = Role Name
realmwizard.configure.ldap.roleSearchMatching.description    = The LDAP attribute search string used on a role to find the users who are members of the role.  This is used when the role has many attributes with the same name, but with different values (one per user).  Normally the parameter <tt>{0}</tt> is used to identify the username.  A typical value would be <tt>(member={0})</tt> or <tt>(memberUID={0})</tt>.
realmwizard.configure.ldap.roleSearchMatching.name           = Role User Search String
realmwizard.configure.ldap.roleSearchSubtree.description     = If set to <tt>true</tt>, then subtrees under the "Role Base" will be searched for roles too.  If set to <tt>false</tt>, then only the "Role Base" location itself will be searched.
realmwizard.configure.ldap.roleSearchSubtree.name            = Role Search Subtree
realmwizard.configure.ldap.userBase.description              = The base LDAP context (location) to search for users.  The search may look in this location only, or there and all subcontexts, depending on the settings for "User Search Subtree" below.
realmwizard.configure.ldap.userBase.name                     = User Base
realmwizard.configure.ldap.userRoleName.description          = If the role entry does not have an attribute for users, but instead the user entry has an attribute for roles, this should be used instead of the "Role User Search String".  It names the attribute on a user that lists a role that user is in.  A typical value would be <tt>(memberOf={0})</tt>.
realmwizard.configure.ldap.userRoleName.name                 = User Role Search String
realmwizard.configure.ldap.userSearchMatching.description    = The LDAP attribute search string used to find the user.  RFC 2254 filters are allowed, and normally the parameter <tt>{0}</tt> is used to identify the username.  A typical value would be <tt>(uid={0})</tt> or <tt>(cn={0})</tt>.
realmwizard.configure.ldap.userSearchMatching.name           = User Search Matching
realmwizard.configure.ldap.userSearchSubtree.description     = If set to <tt>true</tt>, then subtrees under the "User Base" will be searched for users too.  If set to <tt>false</tt>, then only the "User Base" location itself will be searched.
realmwizard.configure.ldap.userSearchSubtree.name            = User Search Subtree
realmwizard.configure.props.digest.description               = Message Digest algorithm (for example, MD5, SHA1 and so on) used on the passwords.  Leave this field empty if no digest algorithm is used.
realmwizard.configure.props.digest.name                      = Digest Algorithm
realmwizard.configure.props.encoding.description             = Encoding to use for digests (for example, hex, base64).  This is used only if a Message Digest algorithm is specified.  If no encoding is specified, hex will be used.
realmwizard.configure.props.encoding.name                    = Digest Encoding
realmwizard.configure.props.groupsURI.description            = The location of a properties file (relative to the Geronimo home dir) holding group information.  The format of each line should be <tt>group=user,user,...</tt>.
realmwizard.configure.props.groupsURI.name                   = Groups File URI
realmwizard.configure.props.usersURI.description             = The location of a properties file (relative to the Geronimo home dir) holding user/password information.  The format of each line should be <tt>username=password</tt>.
realmwizard.configure.props.usersURI.name                    = Users File URI
realmwizard.configure.title                                  = <b>Create Security Realm</b> -- Step 2: Configure Login Module
realmwizard.edit.configurationOptionsExp                     = Any configuration options necessary for the login module, in the standard Java properties format (one per line, <tt>name=value</tt>)
realmwizard.edit.controlFlagExp                              = The control flag for the login module, which controls what happens to the overall login processing if this login module succeeds or fails.  For more information see 
realmwizard.edit.ifLeaveBlank                                = If you don't need to use as many login modules as there are entries below,just leave the extra ones blank.
realmwizard.edit.loginDomainExp                              = The login domain for this login module, which must be unique among all modules in the security realm. This can be used to distinguish principals from two otherwise identical login modules (for example, from two LDAP login modules pointing to two different LDAP servers)
realmwizard.edit.loginModuleClassExp                         = The fully-qualified class name for the login module.
realmwizard.edit.loginModuleJAR                              = Login Module JAR
realmwizard.edit.loginModuleJARExp                           = The jar containing Login Module and Principal classes.
realmwizard.edit.realmNameExp                                = A name that is different than the name for any other security realms in the server (no spaces in the name please). Other components will use this name to refer to the security realm.
realmwizard.edit.serverSideExp                               = Server-side login modules are executed within the application server (this is normally correct).  Client-side login modules are executed in the client's environment, for example, in order to use single sign-on features of the client OS.
realmwizard.edit.summary                                     = <p>This page edits a new or existing security realm.</p><p>A security realm may have one or more login modules.  Many simple realms have only one login module.  Additional login modules may be used to access more underlying security information stores, or to add functionality such as auditing to a realm without affecting the authentication process for the realm.</p>
realmwizard.edit.supportAdvancedMappingExp                   = Normally Geronimo can't distinguish between two different principals that have the same name and same principal class but were produced by two different login modules.  If this option is enabled, Geronimo will "wrap" principals to track which login module and realm each principal came from. This lets you use the "realm-principal" and "login-domain-principal" elements in your security mapping in Geronimo deployment plans.
realmwizard.list.noSecurityRealms                            = There are no security realms defined
realmwizard.list.seeExamples                                 = For each realm listed, you can click the <b>usage</b> link to see examples of how to use the realm from your application.\r\n
realmwizard.list.title                                       = This page lists all the available security realms.  Server-wide security realms can be edited, while security realms deployed as part of a single application cannot (change the deployment plan in the application instead).
realmwizard.selectType.nameOfSecurityRealmExp                = A name that is different than the name for any other security realms in the server (no spaces in the name please). Other components will use this name to refer to the security realm.
realmwizard.selectType.realmTypeExp                          = The type of login module used as the master for this security realm. Select "Other" for manual configuration options including custom login modules and realms that use multiple login modules to populate user principals.
realmwizard.selectType.title                                 = <b>Create Security Realm</b> -- Step 1: Select Name and Type
realmwizard.showPlan.addToEARExp                             = Instead of deploying as a top-level security realm, you can deploy this realm as part of an EAR. To add a security realm to an EAR using this plan, create a <tt>META-INF/geronimo-application.xml</tt> file in your EAR that has the <tt>dependency</tt> elements (if any) and  <tt>gbean</tt> elements from the plan above.  It should look something like this:
realmwizard.showPlan.deployCommandExp                        = To deploy a security realm from the command line using this plan, copy and paste it to a file (say, <tt>security-realm.xml</tt>) and save it.  Then run a command like:
realmwizard.showPlan.title                                   = <b>Create Security Realm</b> -- Show Deployment Plan
realmwizard.testLogin.passwordExp                            = The password to use to log in to the realm.
realmwizard.testLogin.summary                                = From here you can enter a username and password for the main login module in the realm, and see if the login is successful and which Principals are generated for the user. This is meant to be an indication of whether the settings for the main login module are correct.  It does not invoke advanced features such as auditing or lockout.
realmwizard.testLogin.title                                  = <b>Create Security Realm</b> -- Step 4: Test Login
realmwizard.testLogin.usernameExp                            = The username to use to log in to the realm.
realmwizard.testResults.testResults                          = Test Results
realmwizard.testResults.title                                = <b>Create Security Realm</b> -- Step 5: Login Results
realmwizard.usage.applicationCode                            = Application Code
realmwizard.usage.applicationCodeExp                         = <p>No special application code is required to work with security roles.</p><p>If an application calls <tt>HttpServletRequest.getUserPrincipal()</tt>, Geronimo will return a principal where the principal class implements <tt>GeronimoCallerPrincipal</tt> -- normally a username (since <tt>GeronimoUserPrincipal</tt> implements <tt>GeronimoCallerPrincipal</tt>).  If you're using a custom login module and getting the wrong results for <tt>getUserPrincipal</tt>, try making your user principal class implement <tt>GeronimoCallerPrincipal</tt>.</p> <p>If an application calls <tt>HttpServletRequest.isUserInRole(role)</tt>, Geronimo will return true or false depending on whether any of the principals assigned to that user by the realm's login modules were listed in the role mapping above.</p>
realmwizard.usage.geronimoWebXmlLater                        = <p>This example indicated that {0} will be used to handle all logins to the web application.  Then it maps the <tt>admin</tt> role to a combination of one user (<tt>root</tt>) and one group (<tt>administrators</tt>), using a combination of the principal classes and principal names.  (Note that if {0} uses a custom login module, the principal classes may be different, but the ones listed above are used for users and groups by all the standard Geronimo login modules.)</p> <p>It's also possible to configure separate login modules to use separate login domain names,  and then use the login domain names in the role mapping (so a user "root" from login domain "Foo" is different from a user "root" from login domain "Bar"), but this is only important if you have multiple login modules assigning principals to the users.</p> <p> Finally, if the <tt>security</tt> section is declared in an EAR <tt>application.xml</tt> deployment descriptor, there's no need to repeat it in any of the modules inside the EAR -- they'll all share the same role mapping information.</p>
realmwizard.usage.geronimoWebXmlPreface                      = <p>To configure the security realm and the members of each role, the web application needs to have a <tt>geronimo-web.xml</tt> deployment plan. That may be packaged in the WAR in the <tt>WEB-INF</tt> directory, or it may be provided separately on the command line to the deploy tool.</p> <p>The <tt>geronimo-web.xml</tt> plan should have a <tt>security-realm-name</tt> element indicating which realm will be used to authenticate logins to the web application. It also needs to have a <tt>security</tt> element listing the users or groups who should be members of each <tt>security-role</tt> listed in <tt>web.xml</tt>.</p>
realmwizard.usage.title                                      = This page talks about how to use the security realm {0} from a J2EE application. The example here is a web application, but other application modules would work similarly.
realmwizard.usage.webXmlShouldHave                           = <p>The <tt>web.xml</tt> should have</p><ul>  <li>One or more <tt>security-constraint</tt> blocks designating the protected pages or URLs</li>  <li>A <tt>login-config</tt> section configuring the login style for the application</li>  <li>One or more <tt>security-role</tt> blocks listing the security roles used by the application</li></ul>
