#=====================================================================
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#=====================================================================
# $Rev$ $Date$

ajax.progressbar.processing = 処理中...

car.addRepository.currentlyPluginRepositories = 現在使用可能なプラグイン・リポジトリーは、以下のとおりです
car.addRepository.downloadRunningCongfig      = また、サード・パーティーのプラグインを閲覧したり、インストールする際、別の Geronimo サーバーから実行中の構成をダウンロードすることも可能です。リモート Geronimo サーバーを指定したい場合、<tt>http://geronimo-server:8080/plugin/maven-repo/</tt> といった URL を入力してください。
car.addRepository.howToAddPluginRepositories  = この一覧に新規プラグイン・リポジトリーを追加するには、リポジトリーに URL を入力してください。このリポジトリーには、リポジトリーから使用可能なプラグイン一覧を表示しているルート・ディレクトリー上に <tt>geronimo-plugins.xml</tt> ファイルを配置する必要があります。
car.addRepository.title                       = プラグイン・リポジトリーの追加
car.assemblyConfirm.description               = 記述
car.assemblyConfirm.moduleId                  = モジュール ID
car.assemblyConfirm.plugin                    = プラグイン
car.assemblyConfirm.successful                = サーバー・アセンブル成功
car.common.addRepository                      = リポジトリーの追加
car.common.assemble                           = アセンブル
car.common.author                             = 著作者
car.common.category                           = カテゴリー
car.common.createGeronimoPlugin               = Geronimo プラグインの作成
car.common.dependencies                       = 依存モジュール
car.common.downloadRepositories               = ダウンロード・リポジトリー
car.common.exportPlugin                       = プラグインのエクスポート
car.common.geronimoVersions                   = Geronimo バージョン
car.common.group                              = グループ
car.common.license                            = ライセンス
car.common.moduleID                           = モジュール ID
car.common.newRepository                      = 新規リポジトリー
car.common.obsoletes                          = 不用なモジュール
car.common.openSource                         = オープンソース
car.common.pluginURL                          = プラグイン URL
car.common.prereq1Description                 = 必要条件 1 記述
car.common.prereq2Description                 = 必要条件 2 記述
car.common.prereq3Description                 = 必要条件 3 記述
car.common.prerequisite1ID                    = 必要条件 1 ID
car.common.prerequisite1Type                  = 必要条件 1 タイプ
car.common.prerequisite2ID                    = 必要条件 2 ID
car.common.prerequisite2Type                  = 必要条件 2 タイプ
car.common.prerequisite3ID                    = 必要条件 3 ID
car.common.prerequisite3Type                  = 必要条件 3 タイプ
car.common.prerequisites                      = 必要条件
car.common.proprietary                        = 所有者
car.common.removePlugins                      = Geronimo プラグインの削除
car.common.repository                         = リポジトリー
car.common.savePluginData                     = プラグイン・データの保存
car.common.searchForPlugins                   = 選択されたリポジトリーのプラグインを表示
car.common.uniqueID                           = 一意的な ID
car.common.viewDetails                        = 詳細の表示
car.common.webSite                            = Web サイト
car.confirmExport.title                       = <b>プラグインのエクスポート</b> -- ディスクに保存
car.confirmExport.useBtnBelow                 = プラグイン "{0}" をディスクに保存するには、下のボタンを使用してください。
car.download.foundDependencies                = このプラグインに必要な以下の依存モジュールを見つけました。そのまま続行すると、不足している依存モジュールも自動的にインストールします。
car.download.processing                       = {0} を処理中...
car.downloadStatus.processing                 = 現在ファイルを操作中...
car.help.return                               = メインのプラグイン・パネルに戻るには、このポートレットのヘッダーにある "view" リンクを選択してください。
car.index.assembleServer                      = サーバーのアセンブル
car.index.assembleServerLong                  = このサーバーのプラグインよりアセンブル
car.index.assemblyHelp.AppCentric.desp        = 要件を満たすアプリケーションのプラグインを選択し、アプリケーションのプラグインをサーバーの中身に定義してください。サーバーはアプリケーションを実行できますが、デプロイできるとは限りません。
car.index.assemblyHelp.AppCentric.title       = アプリケーション中心
car.index.assemblyHelp.ExpertUser.desp        = コンフィグ ID をもとにアプリケーションのプラグインやシステムのプラグインを選択して、サーバーを構築してください。Apache Geronimo の上級ユーザーのみ、このモードを選択してください。始動またはデプロイできないサーバーを最終的に構築してしまうかもしれないからです。
car.index.assemblyHelp.ExpertUser.title       = 上級ユーザー
car.index.assemblyHelp.FuncCentric.desp       = デプロイされたアプリケーションのプラグインとともに、要件を満たす機能を選択してください。
car.index.assemblyHelp.FuncCentric.title      = 機能中心
car.index.assemblyHelp.desp                   = 現在のサーバー内にある Geronimo プラグインよりサーバーをアセンブルします。以下の 3 モードから 1 つ選択してください。
car.index.assemblyHelp.note                   = <p>このポートレットは Geronimo プラグインのみを扱っていることに注意してください。アプリケーションが Geronimo プラグインでない場合、次のオプションがあります:</p><p>- アプリケーションを Geronimo プラグインに変換するためにコンソールの "プラグインの作成" を使用する<br/>- アプリケーションを Geronimo プラグインに変換するために car-maven-plugin  を使用する<br/>- サーバーをアセンブルした後にアプリケーションをデプロイする<br/></p>
car.index.assemblyMode                        = カスタム・アセンブル・モード:
car.index.createGeronimoPluginExp             = Geronimo プラグインとしてエクスポートするには、現在の Geronimo サーバーにある構成を選択してください。構成は、ローカル・ファイルシステムに CAR ファイルとして保存されます。<i>注意: 現在、有効なプラグインに対して適切にエクスポートした後、CAR に対して <tt>META-INF/geronimo-plugin.xml</tt> ファイルを手動で追加しなければいけません。</i>
car.index.createPluginHelp.desp               = <p>Geronimo プラグインとしてエクスポートする Geronimo サーバーにある構成を選択します。プラグインのメタ・データ情報を埋め込んで、ローカル・ファイル・システムにプラグインを car ファイルとして保管します。コンソールは、プロジェクトのプラグインのメタ・データ情報をストアした <tt>geronimo-plugin.xml</tt> ファイルを生成し、car ファイルにそれをパッケージ化します。管理コンソール経由で多くのプラグインのメタ・データを構成可能ですが、一部の上級構成を構成させることはできません。例えば、<tt>config-xml-ceontent</tt> または <tt>config-substitution properties</tt> です。</p><p>コマンドラインから Geronimo プラグインを作成したい場合、car-maven-plugin を使ってプロジェクトの <tt>geronimo-plugin.xml</tt> ファイルを生成可能で、プロジェクトを car ファイルとしてパッケージ化します。さらに、プロジェクトを Geronimo プラグインのカタログ (<tt>geronimo-plugins.xml</tt> ファイル) へ自動的に追加します。</p>
car.index.createPluginHelp.title              = Geronimo プラグインの作成
car.index.installPluginHelp.desp              = <p>ローカルまたはリモートのリポジトリーから Geronimo サーバーへ Geronimo プラグインをインストールします。</p> <p>"リポジトリー一覧の更新" リンクをクリックして、サーバーが最も推奨しているリポジトリー一覧を更新します。</p> <p>ほしいリポジトリーが見つからない場合、"リポジトリーの追加" リンクをクリックして選択したい新規リポジトリーを追加します。リポジトリーには、使用可能なプラグインを一覧化している <tt>geronimo-plugins.xml</tt> ファイルをルート・ディレクトリーに配置していなければいけません。</p>
car.index.installPluginHelp.title             = Geronimo プラグインのインストール
car.index.optionalAuthentication              = オプション認証
car.index.removePluginsExp                    = プラグインを削除するには、プラグイン・モジュールを配置している<b>アプリケーション</b>のカテゴリーを使用し、アンインストールしてください。
car.index.summary                             = <h2>Geronimo プラグインのインストール</h2> <p>このポートレットによって、Geronimo プラグインをインストールします。ランタイム上の Geronimo サーバーに新規機能をインストールするために使用可能です。</p> <p>使用可能な Geronimo プラグインを調べるには、リモート・リポジトリーを選択してください。リポジトリーには、使用可能なプラグインをリスト化している <tt>geronimo-plugins.xml</tt> ファイルがルート・ディレクトリーにあります。</p> <p>サード・パーティーのプラグインの閲覧やインストールを行う場合、別の Geronimo サーバーから実行中の構成をダウンロードすることも可能です。リモートの Geronimo サーバーを指定したい場合、<tt>http://geronimo-server:8080/plugin/maven-repo/</tt> のような URL を入力し、管理者のユーザー名やパスワードをオプション認証の項目に入力してください。</p>
car.index.updateRepositoryList                = リポジトリー一覧の更新
car.index.validateConfig                      = エクスポートする構成を選択してください。
car.list.PluginGroup                          = ローカル・サーバーのプラグイン・グループ:
car.list.applicationPlugin                    = ローカル・サーバーのアプリケーション・プラグイン:
car.list.assemblyArtifactId                   = アセンブル・アーティファクト ID:
car.list.assemblyFormat                       = アセンブル形式:
car.list.assemblyGroupId                      = アセンブル・グループ ID:
car.list.assemblyPath                         = アセンブル・ターゲット・パス:
car.list.assemblyVersion                      = アセンブル・バージョン:
car.list.expertUser                           = 上級ユーザー (すべてのプラグインを表示します)
car.list.filterByCategoryAndName              = カテゴリーや名前で絞り込む:
car.list.nameServer                           = アセンブルするサーバー名:
car.list.noPlugins                            = このリポジトリーの一覧にプラグインがありません。
car.list.nothing                              = インストールするには少なくとも プラグインを　1 個選択してください。
car.list.pluginRepo                           = プラグイン一覧
car.list.requireArtifactId                    = アーティファクト ID の名前を指定してください。
car.list.requiredPlugin                       = ローカル・サーバーの必須プラグイン:
car.list.selectPlugin                         = サーバーのプラグインを選択:
car.list.systemPlugin                         = ローカル・サーバーのシステム・プラグイン:
car.pluginParams.JVMVersionsExp               = このプラグインをサポートしている JVM バージョンの接頭辞のオプション・リスト。一覧に指定されていない場合、プラグインは JVM のあらゆるバージョンで実行している Geronimo にインストール可能です。\r\nそうでなければ、対応している JVM バージョンを 1 行単位で一覧化してください。例えば、"1.4.2&nbsp;\r\n&nbsp;1.5&nbsp;\r\n&nbsp;..." (もちろん、原則として、このことはここに一覧化されている各 JVM バージョンで Geronimo とともにプラグインを実際にテストしていることを意味します)。
car.pluginParams.authorExp                    = 個人、企業、オープンソース・プロジェクト、等を示す、プラグインの著者。
car.pluginParams.categoryExp                  = プラグインを区分するカテゴリー。同一カテゴリーのプラグインはともにリスト化されます。このプラグインを geronimoplugins.com へ一覧化する場合、どれも適してるのであれば  1 つのカテゴリー名を使用すべきです。そうでなければ、自由に、もしくは、これを送付するリポジトリーに対応するカテゴリーにしたがって、選択することができます。
car.pluginParams.dependenciesExp              = このプラグインが依存している JAR や 他のモジュール ID のリスト。これらは、当該プラグインをダウンロードする際に自動的にダウンロードされます。通常、この一覧を変更してはいけません。しかしながら、ユーザーがプラグインをインストールする前に手動で依存モジュールをインストールしなければならない場合、依存関係の一覧から<b>必要条件</b>の一覧にエントリーを移動可能です (例. プラグインが接続先のサーバーを認識していないと思われるデータベース・プール)。<br /><br />このリストの各エントリーには、前述のとおり、このプラグインで使用される一意的な ID  の形式のような値を使用すべきです。危険かもしれませんが、どのバージョンの依存関係でも動作させたい場合、バージョン番号を削除することがあるかもしれません。各値は、行分割してください。
car.pluginParams.descriptionExp               = このプラグインの記述。パラグラフを分割する空行も含め、プレーン・テキストのみで表記してください。
car.pluginParams.downloadRepositoriesExp      = ダウンロードに必要な依存関係をチェックするリポジトリーの一覧。<tt>http://geronimoplugins.com/repository/</tt> や <tt>http://www.ibiblio.org/maven2/</tt> といった値を、1 行 1 URL で一覧化してください。このプラグインがデプロイされているリポジトリーは、通常リストの最初に記述すべきであることに注意してください。
car.pluginParams.geronimoVersionsExp          = このプラグインをサポートしている Geronimo のバージョンの一覧。リストに何も指定しない場合、プラグインはどのバージョンの Geronimo でもインストール可能です。そうでなければ、"1.1&nbsp;\r\n&nbsp;1.1.1&nbsp;\r\n&nbsp;1.1.2&nbsp;\r\n&nbsp;..." のように、Geronimo バージョンを 1 行に  1 個ずつ一覧で記述してください (もちろん、原則として、ここに一覧表示されている各 Geronimo のバージョンで実際にテストされたことを意味しています)。
car.pluginParams.humanReadableName            = 人が理解可能な名前
car.pluginParams.humanReadableNameExp         = このプラグインに表示される人が理解可能な名前。
car.pluginParams.licenseExp                   = このプラグインのライセンス名。原則として、"BSD -- (名前)" もしくは "GPL -- (名前)" のように、ライセンスの種類を前に付けます。
car.pluginParams.obsoletesExp                 = プラグインが置換するモジュール ID の一覧。それらのプラグインやモジュールはインストールすると削除されます。追加の代替手段を提供するよりむしろ "アップグレード" するためにインストールしたい場合、当該プラグインの前のバージョンも含まれます。1 行 に 1 個のモジュール ID を記述したリストにしてください。
car.pluginParams.openSourceExp                = OSI が承認しているオープンソース・ライセンスであれば、このボックスをチェックしてください (<a href="http://www.opensource.org/licenses/index.php">http://www.opensource.org/licenses/index.php</a>を参照してください)。
car.pluginParams.pluginURLExp                 = プラグインに関する情報を取得するための URL (例. プラグインのホームページ)。
car.pluginParams.prereqDescriptionExp         = ユーザーが必要条件 (例えば、サポートしているデータベース製品をリスト化したデータベース・プールのセットアップ手順やデータベースを初期化するスクリプトを探す場所をユーザーに提示する) を満たすためにすべき内容に関する詳細な記述。これは、パラグラフを分割する空行も含めたプレーン・テキストのみで表記してください。
car.pluginParams.prerequisiteIDExp            = このプラグインの必要条件となるモジュール ID。これは、プラグインをインストールする前にサーバーへ提供されていなければならないモジュールです。Web アプリケーションの専用 Web コンテナー (<tt>geronimo/jetty/*/car</tt>) のようなものであったり、ユーザーがインストールしなければならないデータベース・プールやセキュリティー・レルムのようなものです。というのも、プラグインの著者は送信先サーバーに有効な値を作成できないからです。より多くのユーザーに提供するため、できるだけ多様なモジュール ID のセグメントにしておきたいです (例. <tt>myapp/mypool/1.2/car</tt> よりむしろ <tt>*/mypool/*/*</tt>)。
car.pluginParams.prerequisiteTypeExp          = (ユーザーの助けとなる) 必要条件のタイプに関する簡単な記述。例えば、<tt>データベース・プール</tt>、または、<tt>Web コンテナー</tt>を含んでいます。
car.pluginParams.title                        = <b>プラグインのエクスポート</b> -- プラグイン・データの構成
car.pluginParams.uniqueIDExp                  = 全体的に一意的な プラグイン ID。これは、あなたがエクスポートしているサーバーのインストールより決定されます。プラグインのバージョン番号を定義していますので、正しい値であるかを確認してください。
car.results.filesProcessed                    = 処理済ファイル
car.results.titles                            = 以下のプラグインがインストールされました。
car.viewForDownload.author                    = 著者
car.viewForDownload.category                  = カテゴリー
car.viewForDownload.dependencies              = 依存モジュール
car.viewForDownload.description               = 記述
car.viewForDownload.geronimoVersions          = Geronimo バージョン
car.viewForDownload.installable               = インストール可能
car.viewForDownload.jvmVersions               = JVM バージョン
car.viewForDownload.license                   = ライセンス
car.viewForDownload.moduleId                  = モジュール ID
car.viewForDownload.obsoletes                 = 不用なモジュール
car.viewForDownload.prerequisites             = 必要条件
car.viewForDownload.website                   = Web サイト

configmanager.common.archive                     = アーカイブ
configmanager.common.plan                        = プラン
configmanager.common.startAppAfterInstall        = インストール後にアプリケーションを始動する
configmanager.deploy.migratedPlan                = 移行プラン
configmanager.deploy.migratedPlanSummary         = 提供されたデプロイメント・プランは、アプリケーション・サーバーの前のバージョンにあります。プランの移行バージョンは、あなたの都合にあわせて以下のように提供されます。デプロイメント・プランは完全に移行できるわけではないため、移行プランをデプロイできるようにする前に、手作業による編集が一部必要となる場合があります。
configmanager.deploy.originalPlan                = オリジナル・プラン
configmanager.deploy.redeployApplication         = アプリケーションの再デプロイ
configmanager.deploy.saveLocally                 = このプランをローカルに保存
configmanager.deploy.showDetail                  = 完全な詳細の表示
configmanager.deploy.showMigratedPlan            = 移行プランの表示
configmanager.deploy.showOriginalPlan            = オリジナル・プランの表示
configmanager.deployHelp.archiveExp              = アーカイブ欄に war ファイルを指定するには、参照... をクリックしてください。
configmanager.deployHelp.installApplication      = Geronimo サーバーにアプリケーションをインストールします。
configmanager.deployHelp.planExp                 = デプロイメント・プランが war ファイルから分割されていたら、参照... をクリックして指定してください。
configmanager.deployHelp.startAppAfterInstallExp = これをチェックすると、インストール時にアプリケーションを自動的に始動します。そうでなければ、&quot;インストール済みアプリケーション&quot; ウィンドウにある &quot;始動&quot; トグルをクリックすると始動することができます。デフォルトでは、このチェック・ボックスはチェック状態になっており、新規インストールのアプリケーションは自動的に始動されます。
configmanager.deployHelp.title                   = このポートレットを使って、ユーザーは新規アプリケーションを Geronimo にデプロイできます。Web アプリケーションにはデプロイメント・プランが必要で、war ファイルに同梱するか、geronimo-web.xml と呼ばれるファイルを分割してデプロイするかのどちらかになります。

consolebase.common.JVMVersions     = JVM バージョン
consolebase.common.actions         = アクション
consolebase.common.cancel          = キャンセル
consolebase.common.commands        = コマンド
consolebase.common.confirmPassword = 確認パスワード
consolebase.common.delete          = 削除
consolebase.common.deployedAs      = デプロイメント・スコープ
consolebase.common.description     = 記述
consolebase.common.done            = 完了
consolebase.common.edit            = 編集
consolebase.common.install         = インストール
consolebase.common.name            = 名前
consolebase.common.next            = 次へ
consolebase.common.password        = パスワード
consolebase.common.restart         = 再始動
consolebase.common.return          = 戻る
consolebase.common.returnToList    = 一覧に戻る
consolebase.common.save            = 保存
consolebase.common.start           = 始動
consolebase.common.state           = 状態
consolebase.common.stop            = 停止
consolebase.common.uninstall       = アンインストール
consolebase.common.usage           = 使用方法
consolebase.common.user            = ユーザー
consolebase.common.userName        = ユーザー名

realmwizard._sql.JDBCDriverClassExp                          = JDBC ドライバーの完全修飾クラス名。このドライバーは次のフィールドに指定される JAR に同梱されていなければなりません。
realmwizard._sql.JDBCPasswordExp                             = データベースとの接続で使用するパスワード
realmwizard._sql.JDBCUrlExp                                  = 接続先のデータベースの詳細を指定する JDBC URL。これは、各 JDBC ドライバーによって異なります。
realmwizard._sql.JDBCUsernameExp                             = データベースとの接続で使用するユーザー名
realmwizard._sql.databasePoolExp                             = データベースとの接続でログイン・モジュールが使用するデータベース・プール。これが指定されていると、残りの設定が一切不要になります。
realmwizard._sql.digestAlgorithmExp                          = パスワードで使用されるメッセージ・ダイジェストのアルゴリズム (例. MD5、SHA1、等)。ダイジェストのアルゴリズムを使用しない場合は、このフィールドを空欄のままにしてください。
realmwizard._sql.digestEncodingExp                           = ダイジェストで使用するエンコーディング (例. hex、base64)。メッセージ・ダイジェストのアルゴリズムを指定されている場合のみ使用されます。エンコーディングに何も指定しないと、hex が使用されます。
realmwizard._sql.driverJARExp                                = 選択した JDBC ドライバーを同梱している JAR。この一覧に表示させるには、GERONIMO/repository/ 配下にインストールされていないといけません。
realmwizard._sql.eitherPoolOrJDBC                            = SQL セキュリティー・レルムは、データベースへ接続するための、データベース・プール、もしくは、JDBC 接続設定のどちらかを持っている必要があります。データベース・プール、もしくは、残りの JDBC 設定のどちらかを選択してください。
realmwizard._sql.groupSelectSQLExp                           = ユーザーのグループ情報を読み込む SQL ステートメント。2 カラム返す必要があり、1 番目はユーザー名で、2 番目はグループ名です。ステートメントは、パラメーターに ? を含む PreparedStatement 構文を使用し、その場合ユーザー名はすべてのパラメーターに設定されます。典型的な設定は、通常のスキーマに対する、<tt>SELECT username, group_name FROM user_groups WHERE username=?</tt> または <tt>SELECT u.username, g.name FROM app_users u, groups g, user_groups ug WHERE ug.user_id=users.id AND ug.group_id=g.id AND u.username=?</tt> です。
realmwizard._sql.selectDatabasePool                          = データベースへ接続するための、データベース・プール もしくは JDBC 接続設定のどちらかを持っている SQL セキュリティー・レルム。データベース・プール、もしくは、これ以降の JDBC 設定のどちらかを選択してください。
realmwizard._sql.userSelectSQLExp                            = ユーザー/パスワード情報を読み込む SQL ステートメント。2 カラム返す必要があり、1 番目はユーザー名で、2 番目はパスワードです。ステートメントは、パラメーターに ? を含む PreparedStatement 構文を使用し、その場合ユーザー名はすべてのパラメーターに設定されます。典型的な設定は、<tt>SELECT username, password FROM app_users WHERE username=?</tt> です。
realmwizard.advanced.AuditEnabledExp                         = 可能であれば、すべてのログインの試行を特定のファイルに記録を残します。パスは Geronimo のホーム・ディレクトリーと対応させるべきです (典型的な値は <tt>var/log/login-attempts.log</tt> です) 。
realmwizard.advanced.credentialName                          = クレデンシャル名
realmwizard.advanced.credentialNameExp                       = 可能であれば、レルムは特定のクレデンシャル名の配下に、サブジェクトにあるプライベートなクレデンシャルに各ユーザー名とパスワードを保存します。
realmwizard.advanced.failuresWithin                          = 失敗
realmwizard.advanced.failuresWithinSeconds                   = 秒
realmwizard.advanced.global                                  = グローバル
realmwizard.advanced.global.description                      = グローバルであれば、セキュリティー・レルムの名前は一意的である必要がありますが、EJBで使用可能です。グローバルでない場合、一意的である必要はありません。どのケースにおいても、レルムのプラグインはアプリケーションから可視化できるように Web アプリケーションの親となる必要があります。
realmwizard.advanced.keepAccountLockedFor                    = アカウント・ロックを維持する
realmwizard.advanced.keepAccountLockedForSeconds             = 秒
realmwizard.advanced.lockUserAfter                           = ユーザーのロック
realmwizard.advanced.lockoutEnabledExp                       = 可能であれば、個々の時間枠で失敗したログインの一定回数によって、ユーザーのアカウントをしばらくの間ロックさせます。これは、ブルートフォース・アカウント攻撃に対する防御策です。
realmwizard.advanced.namedCredential                         = 命名されたクレデンシャル
realmwizard.advanced.storePasswordEnabledExp                 = 可能であれば、レルムはサブジェクトにあるプライベート・クレデンシャルの各ユーザーのパスワードを保存します。これによって、ログイン処理完了後にパスワードへのアクセスを許可します。これは通常必須ではありません。
realmwizard.advanced.title                                   = <b>セキュリティー・レルムの作成</b> -- ステップ 3: 高度な構成
realmwizard.common.JDBCDriverClass                           = JDBC ドライバー・クラス
realmwizard.common.JDBCPassword                              = JDBC パスワード
realmwizard.common.JDBCUrl                                   = JDBC URL
realmwizard.common.JDBCUsername                              = JDBC ユーザー名
realmwizard.common.addSecurityRealm                          = 新規セキュリティー・レルムの追加
realmwizard.common.addToEAR                                  = EAR に追加
realmwizard.common.comfirmPwd                                = 確認パスワード
realmwizard.common.configurationOptions                      = 構成オプション
realmwizard.common.controlFlag                               = 制御フラグ
realmwizard.common.databasePool                              = データベース・プール
realmwizard.common.deploy                                    = デプロイ
realmwizard.common.deployCommand                             = コマンドのデプロイ
realmwizard.common.deployRealm                               = レルムのデプロイ
realmwizard.common.deploymentPlan                            = デプロイメント・プラン
realmwizard.common.digestAlgorithm                           = ダイジェスト・アルゴリズム
realmwizard.common.digestEncoding                            = ダイジェスト・エンコーディング
realmwizard.common.driverJAR                                 = ドライバー JAR
realmwizard.common.editRealm                                 = レルムの編集
realmwizard.common.editSettings                              = 設定の編集
realmwizard.common.emptyText                                 = フォーカスされている項目は空欄にできません。
realmwizard.common.enableAuditing                            = 検査を有効化する
realmwizard.common.enableLockout                             = ロックアウトを有効化する
realmwizard.common.groupSelectSQL                            = SELECT SQL グループ
realmwizard.common.integer                                   = フォーカスされている項目は整数値である必要があります。
realmwizard.common.logFile                                   = ログ・ファイル
realmwizard.common.loginDomainName                           = ログイン・ドメイン名
realmwizard.common.loginModule                               = ログイン・モジュール
realmwizard.common.loginModuleClass                          = ログイン・モジュール・クラス
realmwizard.common.nameOfSecurityRealm                       = セキュリティー・レルム名
realmwizard.common.passwordMismatch                          = パスワードが一致していません。
realmwizard.common.principals                                = プリンシパル
realmwizard.common.realmName                                 = レルム名
realmwizard.common.realmType                                 = レルム・タイプ
realmwizard.common.serverSide                                = サーバー・サイド
realmwizard.common.serverWide                                = サーバー全体
realmwizard.common.showPlan                                  = プランの表示
realmwizard.common.skipTestAndDeploy                         = テストをスキップしてデプロイ
realmwizard.common.skipTestAndShowPlan                       = テストをスキップしてプラン表示
realmwizard.common.storePassword                             = パスワードの保存
realmwizard.common.supportAdvancedMapping                    = 高度なマッピングのサポート
realmwizard.common.testAgain                                 = 再テスト
realmwizard.common.testLogin                                 = テスト・ログイン
realmwizard.common.userSelectSQL                             = SELECT SQL ユーザー
realmwizard.configure.certprops.groupsURI.description        = グループ情報を持っているプロパティー・ファイル (Geronimo のホーム・ディレクトリーの相対パス) の場所。\r\n各行の書式は <tt>group=user,user,...</tt> です。
realmwizard.configure.certprops.groupsURI.name               = グループ・ファイル URI
realmwizard.configure.certprops.usersURI.description         = ユーザー・マッピング情報の証明書を持っているプロパティー・ファイル (Geronimo のホーム・ディレクトリーの相対パス) の場所。\r\n各行の書式は <tt>username=certificatename</tt> で、証明書の名前は <tt>X509Certificate.getSubjectX500Principal().getName()</tt> です。
realmwizard.configure.certprops.usersURI.name                = ユーザー・ファイル URI
realmwizard.configure.ldap.authentication.description        = 使用するセキュリティー・レベルで、<tt>none</tt>、<tt>simple</tt>、または、<tt>strong</tt>を使用可能です (通常の値は <tt>simple</tt> です) 。この属性を指定しない場合、その振舞い方はサービス・プロバイダーによって決められます。
realmwizard.configure.ldap.authentication.name               = 認証
realmwizard.configure.ldap.connectionPassword.description    = LDAP サーバーとの接続に使用するパスワード。
realmwizard.configure.ldap.connectionPassword.name           = 接続パスワード
realmwizard.configure.ldap.connectionProtocol.description    = LDAP サーバーとの通信に使用する接続プロトコル。通常は空欄のままですが、サーバーがサポートしていれば <tt>ssl</tt> を設定することも可能です。
realmwizard.configure.ldap.connectionProtocol.name           = 接続プロトコル
realmwizard.configure.ldap.connectionURL.description         = LDAP サーバーとの接続方法を示す URL。通常は <tt>ldap://ldap-server-hostname:389</tt> (Geronimo に統合された Apache ディレクトリー・サーバーでは <tt>ldap://localhost:1389</tt>) です。
realmwizard.configure.ldap.connectionURL.name                = 接続 URL
realmwizard.configure.ldap.connectionUsername.description    = LDAP サーバーとの接続に使用するユーザー名。管理者、または、他のユーザーのパスワードをテストするためにアクセスしたディレクトリー管理者です。
realmwizard.configure.ldap.connectionUsername.name           = 接続ユーザー名
realmwizard.configure.ldap.initialContextFactory.description = 初期コンテキスト・ファクトリーの完全修飾クラス名。ここに何を指定すればよいのかわからない場合、<tt>com.sun.jndi.ldap.LdapCtxFactory</tt> を使用します。
realmwizard.configure.ldap.initialContextFactory.name        = 初期コンテキスト・ファクトリー
realmwizard.configure.ldap.roleBase.description              = ロールを検索するためのベースとなる LDAP コンテキスト (の場所)。下にある "ロール検索のサブ・ツリー" の設定にしたがって、この場所のみ、もしくは、そこも含めたすべてのサブ・コンテキストを検索します。
realmwizard.configure.ldap.roleBase.name                     = ロール・ベース
realmwizard.configure.ldap.roleName.description              = ロールの名前に相当する LDAP の属性。大抵は <tt>cn</tt> を設定します。
realmwizard.configure.ldap.roleName.name                     = ロール名
realmwizard.configure.ldap.roleSearchMatching.description    = ロールのメンバーであるユーザーを探すためのロールで使用する LDAP 属性の検索文字列。これはロールが同一名称の属性を多数持っている時に使用されますが、異なる値 (ユーザー単位のロール) もそうです。通常、パラメーター <tt>{0}</tt> はユーザー名を識別するために使用します。典型的な値は <tt>(member={0})</tt> や <tt>(memberUID={0})</tt> です。
realmwizard.configure.ldap.roleSearchMatching.name           = ロール・ユーザーの検索文字列
realmwizard.configure.ldap.roleSearchSubtree.description     = <tt>true</tt> を設定すると、"ロール・ベース" 配下のサブ・ツリーにあるロールも検索します。<tt>false</tt> を設定すると、"ロール・ベース" の場所のみ検索します。
realmwizard.configure.ldap.roleSearchSubtree.name            = ロール検索のサブ・ツリー
realmwizard.configure.ldap.userBase.description              = ユーザーを検索するためのベースとなる LDAP コンテキスト (の場所)。下にある "ユーザー検索のサブ・ツリー" の設定にしたがい、検索はこの場所のみ、もしくは、そこも含めたすべてのサブ・コンテキストを検索します。
realmwizard.configure.ldap.userBase.name                     = ユーザー・ベース
realmwizard.configure.ldap.userRoleName.description          = ロールのエントリーがユーザーの属性を持っていない場合、代わりにユーザーのエントリーにロールの属性を持ち、"ロール・ユーザーの検索文字列" の代わりに使用します。ロールを一覧化しているユーザーの属性を命名します。典型的な値は <tt>(memberOf={0})</tt> です。
realmwizard.configure.ldap.userRoleName.name                 = ユーザー・ロールの検索文字列
realmwizard.configure.ldap.userSearchMatching.description    = ユーザーを探すために使用する LDAP 属性の検索文字列。RFC 2254 フィルターを許可し、通常、パラメーター <tt>{0}</tt> はユーザーを識別するために使用されます。典型的な値は <tt>(uid={0})</tt> や <tt>(cn={0})</tt> です。
realmwizard.configure.ldap.userSearchMatching.name           = ユーザーの検索マッチング
realmwizard.configure.ldap.userSearchSubtree.description     = <tt>true</tt> を設定すると、"ユーザー・ベース" 配下のサブ・ツリーにあるユーザーも検索します。<tt>false</tt> を設定すると、"ユーザー・ベース" の場所のみ検索します。
realmwizard.configure.ldap.userSearchSubtree.name            = ユーザー検索のサブ・ツリー
realmwizard.configure.props.digest.description               = パスワードで使用するメッセージ・ダイジェスト・アルゴリズム (例. MD5、SHA1、等)。ダイジェスト・アルゴリズムを使用しない場合は、ここを空欄にしてください。
realmwizard.configure.props.digest.name                      = ダイジェスト・アルゴリズム
realmwizard.configure.props.encoding.description             = ダイジェストで使用するエンコーディング (例. hex、base64)。 メッセージ・ダイジェスト・アルゴリズムを指定した場合のみ使用されます。何も指定しない場合、hex を使用します。
realmwizard.configure.props.encoding.name                    = ダイジェスト・エンコーディング
realmwizard.configure.props.groupsURI.description            = グループ情報を持っているプロパティー・ファイル (Geronimo のホーム・ディレクトリーの相対パス) の場所。\r\n各行の書式は <tt>group=user,user,...</tt> です。
realmwizard.configure.props.groupsURI.name                   = グループ・ファイル URI
realmwizard.configure.props.usersURI.description             = ユーザー/パスワードの情報を持っているプロパティー・ファイル (Geronimo のホーム・ディレクトリーの相対パス) の場所。\r\n各行の書式は <tt>username=password</tt> です。
realmwizard.configure.props.usersURI.name                    = ユーザー・ファイル URI
realmwizard.configure.title                                  = <b>セキュリティー・レルムの作成</b> -- ステップ 2: ログインモジュールの構成
realmwizard.edit.configurationOptionsExp                     = ログイン・モジュールに必要な構成オプション、標準 Java プロパティー書式 (1 行に 1 個、<tt>名前=値</tt>)
realmwizard.edit.controlFlagExp                              = ログイン・モジュールの制御フラグで、ログイン・モジュールが成功もしくは失敗した場合に全般的なログイン処理で発生する内容を制御します。詳細はここを参照してください
realmwizard.edit.ifLeaveBlank                                = 下のエントリーと同様に多くのログイン・モジュールを使用する必要がない場合、余分なエントリーを空白にしてください。
realmwizard.edit.loginDomainExp                              = セキュリティー・レルムのすべてのモジュール間で一意的である必要がある、ログイン・モジュールのログイン・ドメイン。これは 2 つの異なる個々のログイン・モジュール (例えば、2 つの異なる LDAP サーバーと接続する 2 つの LDAP ログイン・モジュール) よりプリンシパルを識別するのに使用可能です。
realmwizard.edit.loginModuleClassExp                         = ログイン・モジュールの完全修飾クラス名。
realmwizard.edit.loginModuleJAR                              = ログイン・モジュール JAR
realmwizard.edit.loginModuleJARExp                           = ログイン・モジュールとプリンシパルのクラスを含む JAR。
realmwizard.edit.realmNameExp                                = サーバーにある他のセキュリティー・レルムの名前と異なる名前 (名前に空白を含めないようにしてください) 。他のコンポーネントはセキュリティー・レルムを参照するためにこの名前を使用します。
realmwizard.edit.serverSideExp                               = アプリケーション・サーバー内で実行されるサーバー側のログイン・モジュール (通常は正しいです) 。クライアント側のログイン・モジュールは、例えば、クライアント OS のシングル・サインオンを使用する目的でクライアント環境で実行されます。
realmwizard.edit.summary                                     = <p>この画面では、新規もしくは既存のセキュリティー・レルムを編集します。</p><p>セキュリティー・レルムは 1 個以上のログイン・モジュールを持っています。多くの通常のレルムには 1 個のログイン・モジュールだけを持ちます。追加するログイン・モジュールには、非常に基本的なセキュリティー情報の保存へアクセスしたり、レルムの認証処理に影響しないレルムに対して検査するような機能を追加するために使用されます。</p>
realmwizard.edit.supportAdvancedMappingExp                   = 通常 Geronimo では同一の名前やクラスを持つ 2 つの異なるプリンシパル間で識別することはできませんが、2 つの異なるログイン・モジュールによって作り出されます。このオプションが有効となっていると、Geronimo は各プリンシパルからどのログイン・モジュールやレルムがきたのかを追跡するためのプリンシパルを "ラップ" します。これによって、Geronimo デプロイメント・プランにマッピングするセキュリティーの "realm-principal" と "login-domain-principal" の要素を使用するようになります。
realmwizard.list.noSecurityRealms                            = セキュリティー・レルムが定義されていません
realmwizard.list.seeExamples                                 = アプリケーションからレルムの使い方を参照するには、各レルムの一覧より、<b>使用方法</b>のリンクをクリックしてください。\r\n
realmwizard.list.title                                       = この画面では、使用可能なすべてのセキュリティー・レルムの一覧を表示します。セキュリティー・レルムが (やむなくアプリケーションのデプロイメント・プランを変更できない) 単一アプリケーションの一部としてデプロイされている間、サーバー・スコープのセキュリティー・レルムは編集可能です。
realmwizard.selectType.nameOfSecurityRealmExp                = 他のセキュリティー・レルムの名前と異なる名前 (名前に空白を含めないようにしてください) 。他のコンポーネントはセキュリティー・レルムを参照するためにこの名前を使用します。
realmwizard.selectType.realmTypeExp                          = セキュリティー・レルムのマスターとして使用されているログイン・モジュールのタイプ。ユーザー・プリンシパルを操作するために複数のログイン・モジュールを使用するカスタム・ログイン・モジュールとレルムを含むマニュアル構成のオプションを指定するには "その他" を選択してください。
realmwizard.selectType.title                                 = <b>セキュリティー・レルムの作成</b> -- ステップ 1: 名前とタイプの選択
realmwizard.showPlan.addToEARExp                             = トップレベルのセキュリティー・レルムとしてデプロイする代わりに、EAR の一部としてこのレルムをデプロイ可能です。このプランを使ってセキュリティー・レルムを EAR に追加するには、上記のプランから (もしあれば) <tt>dependency</tt> 要素、および、<tt>gbean</tt> 要素を持つ <tt>META-INF/geronimo-application.xml</tt> ファイルを EAR に作成してください。このような感じになります:
realmwizard.showPlan.deployCommandExp                        = このプランを使ってコマンドラインからセキュリティー・レルムをデプロイするには、(<tt>security-realm.xml</tt> という) ファイルをコピーして貼り付けし、保存してください。その後、以下のコマンドを実行してください:
realmwizard.showPlan.title                                   = <b>セキュリティー・レルムの作成</b> -- デプロイメント・プランの表示
realmwizard.testLogin.passwordExp                            = レルムにログインするために使用するパスワード。
realmwizard.testLogin.summary                                = ここからレルムのメインとなるログイン・モジュールのユーザー名とパスワードを入力してください。ログインに成功し、プリンシパルがユーザーに生成されると、参照できます。これは、メインとなるログイン・モジュールの設定が正しいかどうかの目安を意味します。検査やロックアウトといった高度な機能は呼び出しません。
realmwizard.testLogin.title                                  = <b>セキュリティー・レルムの作成</b> -- ステップ 4: テスト・ログイン
realmwizard.testLogin.usernameExp                            = レルムにログインするために使用するユーザー名。
realmwizard.testResults.testResults                          = テスト結果
realmwizard.testResults.title                                = <b>セキュリティー・レルムの作成</b> -- ステップ 5: ログイン結果
realmwizard.usage.applicationCode                            = アプリケーション・コード
realmwizard.usage.applicationCodeExp                         = <p>セキュリティーのロールを実行するための特殊なアプリケーション・コードは不要です。</p><p>アプリケーションが <tt>HttpServletRequest.getUserPrincipal()</tt> を呼び出すと、Geronimo は <tt>GeronimoCallerPrincipal</tt> を実装しているプリンシパルクラスを返します -- (<tt>GeronimoUserPrincipal</tt> は <tt>GeronimoCallerPrincipal</tt> を実装しているため) 通常はユーザー名です。カスタム・ログイン・モジュールを使用していたり、<tt>getUserPrincipal</tt> で間違った結果を取得した場合、<tt>GeronimoCallerPrincipal</tt> を実装したユーザーのプリンシパル・クラスを作成してみてください。</p> <p>アプリケーションが <tt>HttpServletRequest.isUserInRole(role)</tt> を呼び出すと、Geronimo は、レルムのログイン・モジュールによってユーザーにアサインされたプリンシパルが前述のロール・マッピングの一覧にあったかどうか次第で true か false を返します。</p>
realmwizard.usage.geronimoWebXmlLater                        = <p>この例は {0} が Web アプリケーションへのすべてのログインをハンドルするために使用されることを示しています。プリンシパル・クラスとプリンシパル名の組み合わせを使用して、1 ユーザー (<tt>root</tt>) と 1 グループ (<tt>administrators</tt>) の組み合わせと <tt>admin</tt> ロールをマッピングします。( {0} がカスタム・ログイン・モジュールを使用する場合、プリンシパル・クラスは異なっているかもしれませんが、上記一覧のプリンシパルはすべての標準 Geronimo ログイン・モジュールによってユーザーとグループのために使用されます。)</p> <p>また分割ログイン・ドメイン名を使用するために分割ログイン・モジュールを構成することも可能なので、ロール・マッピングのログイン・ドメイン名を使用してください。しかしながら、これはユーザーへのプリンシパルをアサインしている多数のログイン・モジュールを持つ場合にとても重要です (したがって、ログイン・ドメイン "Foo" のユーザー "root" は、ログイン・ドメイン "Bar" のユーザー "root" とは異なります) 。</p> <p>最後に、<tt>security</tt> セクションが EAR <tt>application.xml</tt> デプロイメント・ディスクリプターに宣言されている場合、EARのどのモジュールを繰り返す必要がありません -- それらは同一のロール・マッピング情報とすべて共有します。</p>
realmwizard.usage.geronimoWebXmlPreface                      = <p>セキュリティー・レルムと各ロールのメンバーを構成するには、Web アプリケーションに <tt>geronimo-web.xml</tt> デプロイメント・プランを持たせる必要があります。WAR の <tt>WEB-INF</tt> ディレクトリーに同梱させるか、コマンドライン上でデプロイ・ツールから分割して提供します。</p> <p><tt>geronimo-web.xml</tt> プランには、Web アプリケーションのログイン認証で使用するレルムを示す <tt>security-realm-name</tt> 要素を持っています。また、<tt>web.xml</tt> に一覧化されている各 <tt>security-role</tt> のメンバーとなるべき各ユーザーとグループを一覧化している <tt>security</tt> 要素も設定する必要があります。</p>
realmwizard.usage.title                                      = この画面では、J2EE アプリケーションからセキュリティー・レルム {0} を使用する方法を説明します。ここで取り上げている例は Web アプリケーションですが、他のアプリケーション・モジュールも同様に動作します。
realmwizard.usage.webXmlShouldHave                           = <p><tt>web.xml</tt> は以下の要素を持っています</p><ul>  <li>保護された画面または URL を指定する 1 個以上の <tt>security-constraint</tt> ブロック</li>  <li>アプリケーションのログイン方式を構成する、 <tt>login-config</tt> セクション</li>  <li>アプリケーションで使用されるセキュリティー・ロールを一覧化した 1 個以上の <tt>security-role</tt> ブロック</li></ul>
